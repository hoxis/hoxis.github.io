<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hoxis&#39; blog</title>
  
  <subtitle>生命在于折腾</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hoxis.github.io/"/>
  <updated>2019-04-11T03:42:15.238Z</updated>
  <id>https://hoxis.github.io/</id>
  
  <author>
    <name>hoxis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows环境查看端口占用情况、相应进程、杀死进程</title>
    <link href="https://hoxis.github.io/windows-kill-pid.html"/>
    <id>https://hoxis.github.io/windows-kill-pid.html</id>
    <published>2019-04-11T03:42:12.000Z</published>
    <updated>2019-04-11T03:42:15.238Z</updated>
    
    <content type="html"><![CDATA[<p>本地调试启动程序时经常遇到端口占用的情况，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">错误: 代理抛出异常错误: <span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span>java.rmi.server.ExportException<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span>: Port already <span class="keyword">in</span> </span><br><span class="line">use: <span class="number">54530</span>; nested exception is: </span><br><span class="line"></span><br><span class="line">      &lt;u&gt;java.net.BindException&lt;<span class="regexp">/u&gt;: Address already in use: JVM_Bind</span></span><br></pre></td></tr></table></figure><p>下面来看下 Windows 下如何查看端口占用情况，以及如何杀死端口占用的进程。</p><a id="more"></a><h1 id="1、查看端口占用情况"><a href="#1、查看端口占用情况" class="headerlink" title="1、查看端口占用情况"></a>1、查看端口占用情况</h1><p><code>netstat –ano|findstr &quot;指定端口号&quot;</code>，比如，查看 54530 的占用情况：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">C:</span>\WINDOWS\system32&gt;netstat -ano|findstr <span class="string">"54530"</span></span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">49643</span>        <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">54530</span>        ESTABLISHED     <span class="number">4388</span></span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">54530</span>        <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">11320</span></span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">54530</span>        <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">49643</span>        ESTABLISHED     <span class="number">11320</span></span><br></pre></td></tr></table></figure><p>最右边的数字就是进程号。</p><h1 id="2、查看进程名"><a href="#2、查看进程名" class="headerlink" title="2、查看进程名"></a>2、查看进程名</h1><p>可以使用 <code>tasklist|findstr &quot;进程号&quot;</code> 来查看进程名称，比如：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">C</span>:\WINDOWS\system32&gt;tasklist|findstr <span class="string">"4388"</span></span><br><span class="line">xxx.exe     <span class="number">4388</span> Services                   <span class="number">0</span>     <span class="number">13</span>,<span class="number">276</span> <span class="keyword">K</span></span><br></pre></td></tr></table></figure><p>可以看出，是 xxx.exe 这个进程占用了端口号，这时可以使用 Windows 任务管理器将服务停掉。</p><p>或者使用命令。</p><h1 id="3、杀死进程"><a href="#3、杀死进程" class="headerlink" title="3、杀死进程"></a>3、杀死进程</h1><p>可以使用 <code>tskill 进程号</code>来杀死指定进程。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">C</span>:\WINDOWS\system32&gt;tasklist|findstr <span class="string">"4388"</span></span><br><span class="line">xxx.exe     <span class="number">4388</span> Services                   <span class="number">0</span>     <span class="number">13</span>,<span class="number">276</span> <span class="keyword">K</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">C</span>:\WINDOWS\system32&gt;tskill <span class="number">4388</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">C</span>:\WINDOWS\system32&gt;tasklist|findstr <span class="string">"4388"</span></span><br></pre></td></tr></table></figure><p>可以看出，进程已被杀死。</p><p>若提示没有权限杀死进程，请以管理员身份运行 cmd。</p><p>win10 环境下开启方法，按下 win+S：</p><p><img src="https://blog-1254259578.cos.ap-shanghai.myqcloud.com/picgo/201904111133.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本地调试启动程序时经常遇到端口占用的情况，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;错误: 代理抛出异常错误: &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;java.rmi.server.ExportException&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;: Port already &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use: &lt;span class=&quot;number&quot;&gt;54530&lt;/span&gt;; nested exception is: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;u&amp;gt;java.net.BindException&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/u&amp;gt;: Address already in use: JVM_Bind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面来看下 Windows 下如何查看端口占用情况，以及如何杀死端口占用的进程。&lt;/p&gt;
    
    </summary>
    
      <category term="绊脚石" scheme="https://hoxis.github.io/categories/%E7%BB%8A%E8%84%9A%E7%9F%B3/"/>
    
    
      <category term="Windows" scheme="https://hoxis.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>记一次服务器宕机后数据库恢复的过程</title>
    <link href="https://hoxis.github.io/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%95%E6%9C%BA%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E7%9A%84%E8%BF%87%E7%A8%8B.html"/>
    <id>https://hoxis.github.io/记一次服务器宕机后数据库恢复的过程.html</id>
    <published>2019-04-08T13:46:26.530Z</published>
    <updated>2019-04-08T13:46:26.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>现象很简单，数据库服务器被宕机，当然是在没有停数据库服务的情况下。</p><p>机器重启后，试图重启MySQL服务，无果，查看错误日志：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">170920  0:30:17  InnoDB: Assertion failure <span class="keyword">in</span> thread 140107687212800 <span class="keyword">in</span> file /<span class="built_in">export</span>/home/pb2/build/sb_0-2629600-1291399482.5/mysql-5.5.10/storage/innobase/include/fut0lst.ic line 83</span><br><span class="line">InnoDB: Failing assertion: addr.page == FIL_NULL || addr.boffset &gt;= FIL_PAGE_DATA</span><br><span class="line">InnoDB: We intentionally generate a memory <span class="built_in">trap</span>.</span><br><span class="line">InnoDB: Submit a detailed bug report to http://bugs.mysql.com.</span><br><span class="line">InnoDB: If you get repeated assertion failures or crashes, even</span><br><span class="line">InnoDB: immediately after the mysqld startup, there may be</span><br><span class="line">InnoDB: corruption <span class="keyword">in</span> the InnoDB tablespace. Please refer to</span><br><span class="line">InnoDB: http://dev.mysql.com/doc/refman/5.1/en/forcing-recovery.html</span><br><span class="line">InnoDB: about forcing recovery.</span><br><span class="line">170920  0:30:17 - mysqld got signal 6 ;</span><br><span class="line">This could be because you hit a bug. It is also possible that this binary</span><br><span class="line">or one of the libraries it was linked against is corrupt, improperly built,</span><br><span class="line">or misconfigured. This error can also be caused by malfunctioning hardware.</span><br><span class="line">We will try our best to scrape up some info that will hopefully <span class="built_in">help</span> diagnose</span><br><span class="line">the problem, but since we have already crashed, something is definitely wrong</span><br><span class="line">and this may fail.</span><br><span class="line"></span><br><span class="line">key_buffer_size=16777216</span><br><span class="line">read_buffer_size=262144</span><br><span class="line">max_used_connections=0</span><br><span class="line">max_threads=500</span><br><span class="line">thread_count=0</span><br><span class="line">connection_count=0</span><br><span class="line">It is possible that mysqld could use up to </span><br><span class="line">key_buffer_size + (read_buffer_size + sort_buffer_size)*max_threads = 406067 K</span><br><span class="line">bytes of memory</span><br><span class="line">Hope that<span class="string">'s ok; if not, decrease some variables in the equation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">thd: 0x0</span></span><br><span class="line"><span class="string">Attempting backtrace. You can use the following information to find out</span></span><br><span class="line"><span class="string">where mysqld died. If you see no messages after this, something went</span></span><br><span class="line"><span class="string">terribly wrong...</span></span><br><span class="line"><span class="string">stack_bottom = (nil) thread_stack 0x40000</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld(my_print_stacktrace+0x39)[0x916839]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld(handle_segfault+0x359)[0x4fc0d9]</span></span><br><span class="line"><span class="string">/lib64/libpthread.so.0(+0xf4a0)[0x7f6d5ca9f4a0]</span></span><br><span class="line"><span class="string">/lib64/libc.so.6(gsignal+0x35)[0x7f6d5be4a885]</span></span><br><span class="line"><span class="string">/lib64/libc.so.6(abort+0x175)[0x7f6d5be4c065]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x7d5601]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x7ca012]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x7ca357]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x7cce1a]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x7b89e8]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x78d97d]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld(_Z24ha_initialize_handlertonP13st_plugin_int+0x48)[0x6683a8]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x57ddba]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld(_Z11plugin_initPiPPci+0xb5d)[0x581cbd]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x50212c]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld(_Z11mysqld_mainiPPc+0x3c2)[0x504742]</span></span><br><span class="line"><span class="string">/lib64/libc.so.6(__libc_start_main+0xfd)[0x7f6d5be36cdd]</span></span><br><span class="line"><span class="string">/usr/local/mysql/bin/mysqld[0x4fa3fa]</span></span><br><span class="line"><span class="string">The manual page at http://dev.mysql.com/doc/mysql/en/crashing.html contains</span></span><br><span class="line"><span class="string">information that should help you find out what is causing the crash.</span></span><br><span class="line"><span class="string">170920 00:30:17 mysqld_safe mysqld from pid file /usr/local/mysql/data/localhost.localdomain.pid ended</span></span><br><span class="line"><span class="string">170920 01:04:55 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data</span></span><br><span class="line"><span class="string">170920  1:04:55 [Warning] Ignoring user change to '</span>ser=mysql<span class="string">' because the user was set to '</span>mysql<span class="string">' earlier on the command line</span></span><br></pre></td></tr></table></figure><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>刚开始的重点放在了这段日志上：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">It is possible that mysqld could use up to </span><br><span class="line">key_buffer_size + (read_buffer_size + sort_buffer_size)*max_threads = 406067 K</span><br><span class="line">bytes of memory</span><br><span class="line">Hope that<span class="string">'s ok; if not, decrease some variables in the equation.</span></span><br></pre></td></tr></table></figure></p><p>以为是MySQL的一些参数设置有问题，结合Google结果，对<code>/etc/my.cnf</code>进行了修改，仍无果。问题解决之后想来，因为之前MySQL是运行正常的，因此配置一般不会有问题，当时也是“病急乱投医”了。</p><h2 id="1-Forcing-InnoDB-Recovery"><a href="#1-Forcing-InnoDB-Recovery" class="headerlink" title="1. Forcing InnoDB Recovery"></a>1. Forcing InnoDB Recovery</h2><p>设置恢复模式启动mysql，在 /etc/my.cnf中添加如下配置：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_force_recovery = 1</span><br></pre></td></tr></table></figure></p><p><strong>其中后面的值设置为1、如果1不能恢复，再逐步增加为2/3/4等。直到能启动mysql为止！！！</strong></p><p>Forcing InnoDB Recovery提供了6个等级的修复模式，需要注意的是值大于3的时候，会对数据文件造成永久的破坏，不可恢复。六个等级的介绍摘抄如下：</p><ol><li><strong>SRV_FORCE_IGNORE_CORRUPT</strong><br>Lets the server run even if it detects a corrupt page. Tries to make SELECT * FROM tbl_name jump over corrupt index records and pages, which helps in dumping tables.</li><li><strong>SRV_FORCE_NO_BACKGROUND</strong><br>Prevents the master thread and any purge threads from running. If a crash would occur during the purge operation, this recovery value prevents it.</li><li><strong>SRV_FORCE_NO_TRX_UNDO</strong><br>Does not run transaction rollbacks after crash recovery.</li><li><strong>SRV_FORCE_NO_IBUF_MERGE</strong><br>Prevents insert buffer merge operations. If they would cause a crash, does not do them. Does not calculate table statistics. This value can permanently corrupt data files. After using this value, be prepared to drop and recreate all secondary indexes.</li><li><strong>SRV_FORCE_NO_UNDO_LOG_SCAN</strong><br>Does not look at undo logs when starting the database: InnoDB treats even incomplete transactions as committed. This value can permanently corrupt data files.</li><li><strong>SRV_FORCE_NO_LOG_REDO</strong><br>Does not do the redo log roll-forward in connection with recovery. This value can permanently corrupt data files. Leaves database pages in an obsolete state, which in turn may introduce more corruption into B-trees and other database structures.</li></ol><h2 id="恢复模式下启动MySQL"><a href="#恢复模式下启动MySQL" class="headerlink" title="恢复模式下启动MySQL"></a>恢复模式下启动MySQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe -user=mysql&amp;</span><br></pre></td></tr></table></figure><p>重启成功后，测试数据库是否可以正常连接：<code>mysql -uroot -p123456</code></p><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>恢复模式数据库是只读的，当然和恢复级别相关。<br>现在需要做的是将数据库数据备份，然后清除之前的错误数据，最后再从备份数据中进行恢复。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123456 <span class="comment">--all-databases  &gt; all_mysql_backup.sql</span></span><br></pre></td></tr></table></figure></p><h2 id="原数据清理或备份"><a href="#原数据清理或备份" class="headerlink" title="原数据清理或备份"></a>原数据清理或备份</h2><p>清理数据前需要先将数据库服务停止。<br>将数据库的data目录进行备份，相当于恢复到数据库刚安装完成时的状态。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data-bak</span><br><span class="line"><span class="built_in">cd</span> data</span><br><span class="line">mv * ../data-bak/</span><br></pre></td></tr></table></figure></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>因为所有的数据都已删除掉，因此需要进行MySQL的初始化。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">./scripts/mysql_install_db --user=mysql&amp;</span><br></pre></td></tr></table></figure></p><h3 id="备份数据恢复"><a href="#备份数据恢复" class="headerlink" title="备份数据恢复"></a>备份数据恢复</h3><p>登录MySQL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure></p><p>登录后，在数据库中执行下列语句，即可恢复数据：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /app/all_mysql_backup.sql</span><br></pre></td></tr></table></figure></p><p>恢复后对数据进行检查。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;现象很简单，数据库服务器被宕机，当然是在没有停数据库服务的情况下。&lt;/p&gt;
&lt;p&gt;机器重启后，试图重启MySQL服务，无果，查看错误日志：&lt;/p&gt;
    
    </summary>
    
      <category term="绊脚石" scheme="https://hoxis.github.io/categories/%E7%BB%8A%E8%84%9A%E7%9F%B3/"/>
    
    
      <category term="错误处理" scheme="https://hoxis.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
      <category term="数据库" scheme="https://hoxis.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>我学设计模式：适配器（Adapter）模式</title>
    <link href="https://hoxis.github.io/%E6%88%91%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%88Adapter%EF%BC%89%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://hoxis.github.io/我学设计模式：适配器（Adapter）模式.html</id>
    <published>2019-04-08T13:46:26.528Z</published>
    <updated>2019-04-08T13:46:26.528Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>定义：将一个类的接口转化成客户端希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p></blockquote><a id="more"></a><p>主要功能是进行转换匹配，从而可以复用已有的功能。通过给适配器对象组合被适配的对象，然后当客户端调用Target时，适配器会将相应的功能委托给被适配的对象去完成。生活中的适配器模式很常见，比如电压转换器、翻译等。</p><h2 id="适配器模式中的3个角色"><a href="#适配器模式中的3个角色" class="headerlink" title="适配器模式中的3个角色"></a>适配器模式中的3个角色</h2><ul><li><p>Target 目标角色<br>该角色定义把其他类转换为何种接口，也就是期望接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>目标角色的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTarget</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteTarget doing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Adaptee 源角色<br>想把谁转换成目标角色，这个“谁”就是源角色。它是已经存在的、运行良好的类或对象，经过适配器的包装，成为一个新的角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adaptee doing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Adapter 适配器角色<br>核心角色，其他两个角色都是已经存在的，而适配器角色是需要新建的。它的职责就是把源角色转换为目标角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>场景类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//原有的业务逻辑</span></span><br><span class="line">        Target target = <span class="keyword">new</span> ConcreteTarget();</span><br><span class="line">        target.request();</span><br><span class="line">        <span class="comment">//现在增加了适配器角色后的业务逻辑</span></span><br><span class="line">        Target target2 = <span class="keyword">new</span> Adapter();</span><br><span class="line">        target2.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="适配器的实现"><a href="#适配器的实现" class="headerlink" title="适配器的实现"></a>适配器的实现</h2><p>适配器通常是一个类，一般或让其去实现Target接口，然后再其具体实现里面调用Adaptee。</p><h3 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h3><p>当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，<strong>继承原有的类Adaptee</strong>，实现新的接口即可。</p><h3 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h3><p>当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Adapter类，<strong>持有原类Adaptee的一个实例</strong>，在Adapter类的方法中，调用实例的方法就行。</p><h3 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a>接口的适配器模式</h3><p>当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter，实现所有方法，我们写别的类的时候，继承抽象类即可。</p><h3 id="适配器模式的调用顺序"><a href="#适配器模式的调用顺序" class="headerlink" title="适配器模式的调用顺序"></a>适配器模式的调用顺序</h3><p><img src="http://hoxis-github-io.qiniudn.com/150708-adapter-call-sequence.png" alt="适配器模式的调用顺序"></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>更好的复用性</li><li>刚好的可扩展性</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>过多地使用会让系统非常混乱，很难从整体进行把握。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</li></ul><h2 id="何时使用适配器"><a href="#何时使用适配器" class="headerlink" title="何时使用适配器"></a>何时使用适配器</h2><p>适配器模式的本质是：<strong>转换匹配，复用功能</strong>。通过转换已有的功能实现，从而可以将其匹配成所需的接口。转换匹配是手段，复用功能是目的。</p><ul><li>想使用一个已存在的类，但它的接口不符合需求时。或者是它不能对每一个子类都进行适配，这种情况下可以使用对象适配器，直接适配这些子类的父类。</li><li>想创建一个可复用的类，但是这个类可能会与一些类不兼容时</li></ul><hr><p>本文是《研磨设计模式》的读书笔记。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;定义：将一个类的接口转化成客户端希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计模式" scheme="https://hoxis.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="https://hoxis.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我学设计模式：外观（Facade）模式</title>
    <link href="https://hoxis.github.io/%E6%88%91%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%A4%96%E8%A7%82%EF%BC%88Facade%EF%BC%89%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://hoxis.github.io/我学设计模式：外观（Facade）模式.html</id>
    <published>2019-04-08T13:46:26.527Z</published>
    <updated>2019-04-08T13:46:26.527Z</updated>
    
    <content type="html"><![CDATA[<p>定义：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加易用。</p><a id="more"></a><p>外观模式比较简单，两个字：封装！外观模式是为了解决类与类之间的依赖关系的，将类与类之间（比如A、B、C）的关系放在一个Facade类中，从外部看来只要调用Facade类中的方法，就可以自动调用A、B、C的功能，从而降低了类之间的耦合度。</p><h2 id="认识外观模式：封装交互，简化调用"><a href="#认识外观模式：封装交互，简化调用" class="headerlink" title="认识外观模式：封装交互，简化调用"></a>认识外观模式：<strong>封装交互，简化调用</strong></h2><p><img src="http://hoxis-github-io.qiniudn.com/150708-facade.png" alt="外观模式示意图"></p><p>如图所示，外观模式减少了外部与子系统内多个模块的交互，松散耦合，从而让外部可以更简单地使用子系统。一个直观的例子就是电脑，外部来看我们面对的是电脑，只要对电脑上的按钮操作即可，但是电脑内部有很多子系统，如CPU、Memory、Disk等。当我们启动或关闭电脑时，只要对封装好的Computer操作即可，而不需对每个子系统启动。</p><p><img src="http://hoxis-github-io.qiniudn.com/150708-facade-example.png" alt="外观模式示例"></p><h2 id="外观模式的调用顺序"><a href="#外观模式的调用顺序" class="headerlink" title="外观模式的调用顺序"></a>外观模式的调用顺序</h2><p><img src="http://hoxis-github-io.qiniudn.com/150708-facade-call-sequence.png" alt="外观模式的调用顺序"></p><h2 id="何时使用外观模式"><a href="#何时使用外观模式" class="headerlink" title="何时使用外观模式"></a>何时使用外观模式</h2><ul><li>希望为一个复杂的子系统提供一个简单的接口</li><li>想让客户端和抽象类的实现部分松散耦合</li><li>构建多层结构系统时，可以使用外观作为每层的入口</li></ul><hr><p>本文是《研磨设计模式》的读书笔记。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加易用。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计模式" scheme="https://hoxis.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="外观模式" scheme="https://hoxis.github.io/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我学设计模式：简单工厂模式</title>
    <link href="https://hoxis.github.io/%E6%88%91%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://hoxis.github.io/我学设计模式：简单工厂模式.html</id>
    <published>2019-04-08T13:46:26.527Z</published>
    <updated>2019-04-08T13:46:26.528Z</updated>
    
    <content type="html"><![CDATA[<p>提供一个创建对象实例的功能，而无需关心其具体实现。被创建实例的类型可以是接口、抽象类，也可以是具体的类。</p><a id="more"></a><h2 id="认识简单工厂"><a href="#认识简单工厂" class="headerlink" title="认识简单工厂"></a>认识简单工厂</h2><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul><li><p>一个简单接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口的两个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplA</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ImplA s="</span> + s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplB</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ImplB s="</span> + s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 具体创建Api对象的方法</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> condition 外部传入的选择条件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 创建好的Api对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Api <span class="title">createApi</span><span class="params">(<span class="keyword">int</span> condition)</span> </span>&#123;</span><br><span class="line">    Api api = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (condition == <span class="number">1</span>) &#123;</span><br><span class="line">      api = <span class="keyword">new</span> ImplA();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition == <span class="number">2</span>) &#123;</span><br><span class="line">      api = <span class="keyword">new</span> ImplB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> api;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Api api = Factory.createApi(<span class="number">1</span>);</span><br><span class="line">    api.operation(<span class="string">"正在使用简单工厂"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>要点：</p><ol><li><p>简单工厂的功能<br>通常用来创造接口，但也可以用来创造抽象类或普通类的实例。</p></li><li><p>静态工厂<br>简单工厂的方法通常是静态的，也被称为静态工厂。</p></li><li><p>万能工厂<br>一个简单工厂可以创建不同的接口、抽象了或者是实例。</p></li></ol><blockquote><p>简单工厂的创建范围通常不要太大，建议控制在一个独立的组件级别或者模块级别。</p></blockquote><h3 id="简单工厂的调用顺序"><a href="#简单工厂的调用顺序" class="headerlink" title="简单工厂的调用顺序"></a>简单工厂的调用顺序</h3><p><img src="http://hoxis-github-io.qiniudn.com/150706-the%20call%20sequence%20of%20%20simple%20factory.png" alt="简单工厂的调用顺序"></p><h3 id="简单工厂的命名建议"><a href="#简单工厂的命名建议" class="headerlink" title="简单工厂的命名建议"></a>简单工厂的命名建议</h3><ul><li>类名：<code>模块名称+Factory</code>，如用户模块的工厂就称为<code>UserFactory</code></li><li>方法名：<code>get+接口名称</code>或者<code>create+接口名称</code>，比如<code>getUser</code></li></ul><h2 id="简单工厂中方法的写法"><a href="#简单工厂中方法的写法" class="headerlink" title="简单工厂中方法的写法"></a>简单工厂中方法的写法</h2><p>主要实现的功能是<strong>选择合适的实现类</strong>来创建实例对象。选择条件或者参数主要有：</p><ul><li>源自客户端，有Client传入参数</li><li>源于配置文件，从中获取用于判断的值</li><li>源于运行期间的某个值</li></ul><h3 id="可配置的简单工厂"><a href="#可配置的简单工厂" class="headerlink" title="可配置的简单工厂"></a>可配置的简单工厂</h3><p>如上述的工厂代码实例，创建对象时根据传入的参数值来判断创建的实现类，这种情况下每次新增一个实现类都要来修改该工厂类，这种做法明显不太好。</p><p>解决的方法可以<strong>使用配置文件</strong>，当有新的实现类时，只需在配置文件中配置即可。然后使用反射的方式来实现类。</p><h2 id="思考简单工厂"><a href="#思考简单工厂" class="headerlink" title="思考简单工厂"></a>思考简单工厂</h2><h3 id="本质：选择实现"><a href="#本质：选择实现" class="headerlink" title="本质：选择实现"></a>本质：选择实现</h3><p>简单工厂的重点在于选择，实现是已经做好了的，目的在于为客户端选择相应的实现，从而使得客户端和具体实现之间解耦。</p><h3 id="何时选用简单工厂"><a href="#何时选用简单工厂" class="headerlink" title="何时选用简单工厂"></a>何时选用简单工厂</h3><ul><li>想完全封装隔离具体实现，让外部只能通过接口来操作封装体</li><li>想对创建对象的职责集中管理和控制</li></ul><h2 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h2><ul><li>简单工厂 和 抽象工厂模式<br>简单工厂是用来选择实现的，可以选择任意接口的实现。</li></ul><p>抽象工厂是用来选择产品簇的实现的，也就是说抽象工厂里有多个用于选择并创建对象的方法，并且这些对象之间是有关系的，它们通常是构成一个产品簇所需要的部件对象。</p><ul><li>简单工厂 和 工厂方法模式<br>工厂方法的本质也是用来选择实现的，区别在于它是把选择具体实现的功能<strong>延迟到子类实现</strong>。</li></ul><hr><p>本文是《研磨设计模式》的读书笔记。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提供一个创建对象实例的功能，而无需关心其具体实现。被创建实例的类型可以是接口、抽象类，也可以是具体的类。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计模式" scheme="https://hoxis.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="简单工厂" scheme="https://hoxis.github.io/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/"/>
    
      <category term="工厂模式" scheme="https://hoxis.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我学设计模式：单例（Singleton）模式</title>
    <link href="https://hoxis.github.io/%E6%88%91%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%EF%BC%88Singleton%EF%BC%89%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://hoxis.github.io/我学设计模式：单例（Singleton）模式.html</id>
    <published>2019-04-08T13:46:26.527Z</published>
    <updated>2019-04-08T13:46:26.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><p>要想控制一个类只被创建一个实例，那么首要的问题就是把创建实例的权限收回来，让类自己来负责创建自己类的实例，然后由这个类来提供外部可以访问这个类实例的方法，这就是单例模式的实现方法。</p><a id="more"></a><h2 id="单例模式的结构和实现"><a href="#单例模式的结构和实现" class="headerlink" title="单例模式的结构和实现"></a>单例模式的结构和实现</h2><p><img src="http://hoxis-github-io.qiniudn.com/150717-singleton.png" alt="单例模式的结构图"></p><p>Singleton:负责创建Singleton类自己的唯一实例，并提供一个getInstance的方法，来外部来访问这个类的唯一实例。</p><ol><li>私有化构造方法</li><li>提供<strong>静态的</strong>获取实例的方法</li><li>定义存储实例的属性，因为要在静态方法中使用，因此要加上static修饰</li><li>实现控制实例的创建</li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>所谓懒汉模式，既然懒，那么在创建对象实例时就不要着急，在马上要使用对象实例时才会创建，在装载对象时不会创建对象实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式懒汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *         2015年7月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4. 定义一个变量来存储创建好的类实例</span></span><br><span class="line">    <span class="comment">// 5. 因为要在静态方法中使用，因此要加上static修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazy instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 构造方法私有化，好在内部控制创建实例的数目</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义一个方法为客户端提供类实例</span></span><br><span class="line">    <span class="comment">// 3. 这个方法需要定义成类方法，也就是</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 6. 判断存储实例的变量是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonLazy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String singletonData;<span class="comment">// 单例可以有自己的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性的值</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSingletonData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例可以有自己的操作方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>所谓饿汉模式，就是在创建对象实例时比较急，在装载类的时候就会创建对象实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.designpattern.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式饿汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *         2015年7月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHungry</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4. 直装载类的时候就会创建对象实例，只创建一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonHungry instance = <span class="keyword">new</span> SingletonHungry();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 构造方法私有化，好在内部控制创建实例的数目</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义一个方法为客户端提供类实例</span></span><br><span class="line">    <span class="comment">// 3. 这个方法需要定义成类方法，也就是</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHungry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5. 直接使用以及创建好的实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String singletonData;<span class="comment">// 单例可以有自己的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性的值</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSingletonData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例可以有自己的操作方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="单例模式的范围"><a href="#单例模式的范围" class="headerlink" title="单例模式的范围"></a>单例模式的范围</h3><p>目前Java实现的单例是一个虚拟机范围的，因为装载类的功能是虚拟机的，所以一个虚拟机在通过自己的ClassLoader装载饿汉模式实现单例时就会创建一个类的实例。</p><p>因此如果一个虚拟机里面有很多个ClassLoader，而这些ClassLoader都装载某个类的话，就会产生多个实例。</p><h3 id="单例模式的调用顺序"><a href="#单例模式的调用顺序" class="headerlink" title="单例模式的调用顺序"></a>单例模式的调用顺序</h3><ul><li>懒汉模式</li></ul><p><img src="http://hoxis-github-io.qiniudn.com/150717-singleton-lazy.png" alt="单例模式的调用顺序"></p><ul><li>饿汉模式</li></ul><p><img src="http://hoxis-github-io.qiniudn.com/150717-singleton-hungry.png" alt="单例模式的调用顺序"></p><h3 id="体现的一些思想"><a href="#体现的一些思想" class="headerlink" title="体现的一些思想"></a>体现的一些思想</h3><ul><li><p>延迟加载<br>懒汉模式中，一开始没有加载所需的资源或者数据，一直等到马上就要使用了才加载，即所谓的“延迟加载”。</p></li><li><p>缓存<br>当某些资源或数据被频繁的使用，而且它们是存储在系统外部的（如数据库、硬盘），那么每次操作都要从数据库获取，速度会很慢，操作性能问题。</p></li></ul><p>一个简单的方法就是把这些数据缓存到内存中，每次操作的时候先到内存里找，若有则直接使用；若果没有再获取它并设置到缓存中。</p><p>缓存是一种典型的空间换取时间的方案。</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ol><li><p>不加同步的懒汉模式是线程不安全的。比如，有线程A、B同时调用getInstance方法，那就可能导致并发问题，如图。<br><img src="http://hoxis-github-io.qiniudn.com/150717-singleton-threadconflict.png" alt="懒汉模式线程冲突"></p></li><li><p>如何实现懒汉模式的线程安全</p><ol><li><p>加上关键字<code>synchronized</code>，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重检查加锁。不是在每次进入getInstance时都需要同步，而是先不同步，进入方法后，先检查实例是否存在。如果不存在才进入下面的同步块，这是第一重检查。进入同步块后，再次检查实例是否存在，如果不存在，就在同步的情况下创建一个实例，这是第二重检查。<br>双重检查加锁机制的实现需要使用<code>volatile</code>关键字，被它修饰的变量的值将不会被本地线程缓存，所有对该变量的读写都是直接操作共享内存，从而确保多个线程能够正确的处理该变量。<br>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonVolatile <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查实例是否存在，不存在则进入到同步块</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 同步块，线程安全地创建实例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonVolatile.class) &#123;</span><br><span class="line">            <span class="comment">// 再次检查实例是否存在，不存在则真正的创建实例</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> SingletonVolatile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种实现方式既可以实现线程安全，同时也不会对性能造成太大的影响。</p></li></ol></li><li>饿汉模式是线程安全的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要想控制一个类只被创建一个实例，那么首要的问题就是把创建实例的权限收回来，让类自己来负责创建自己类的实例，然后由这个类来提供外部可以访问这个类实例的方法，这就是单例模式的实现方法。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="设计模式" scheme="https://hoxis.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://hoxis.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于maven的Spring+ActiveMQ整合Demo</title>
    <link href="https://hoxis.github.io/%E5%9F%BA%E4%BA%8Emaven%E7%9A%84Spring+ActiveMQ%E6%95%B4%E5%90%88Demo.html"/>
    <id>https://hoxis.github.io/基于maven的Spring+ActiveMQ整合Demo.html</id>
    <published>2019-04-08T13:46:26.526Z</published>
    <updated>2019-04-08T13:46:26.526Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是示范基于Maven的ActiveMQ+Spring的简单使用，基于ActiveMQ消息代理的Spring JMS消息配置，以及定时任务的使用。</p><a id="more"></a><h1 id="JMS简介"><a href="#JMS简介" class="headerlink" title="JMS简介"></a>JMS简介</h1><p>JMS提供了应用之间的异步通信机制，当异步发送消息时，客户端不需要等待服务端处理消息结果。</p><p><img src="http://hoxis-github-io.qiniudn.com/151023-jms-in-spring.png" alt="同步通信与异步通信"></p><h2 id="构建JMS"><a href="#构建JMS" class="headerlink" title="构建JMS"></a>构建JMS</h2><p>两个主要概念：<strong>消息代理</strong>（message broker）和<strong>目的地</strong>（destination）。</p><p>当一个应用发送消息时，会把消息交给一个消息代理。消息代理实际上是JMS版的邮局。消息代理可以确保消息被投递到指定的目的地，同时释放发送者，使其能够继续其他的业务。</p><p>目的地就像一个邮箱，可以将消息放入邮箱，直至有人将其取走。JMS中有两种类型的目的地：<strong>队列</strong>和<strong>主题</strong>。，分别应用于队列的点对点模型和主题的发布/订阅模型。</p><h3 id="点对点消息模型"><a href="#点对点消息模型" class="headerlink" title="点对点消息模型"></a>点对点消息模型</h3><p>每一个消息都有一个发送者和一个接收者。<br><img src="http://hoxis-github-io.qiniudn.com/151023-point-2-point.png" alt="点对点消息模型"><br>当消息代理得到消息后，会将消息放入到消息队列中，接收者请求队列中的下一条消息时，该消息就会从队列中取出，投递给接收者。因为消息投递后会从队列中删除，因此可以保证消息只投递给一个接收者。</p><p>可以使用多个接收者来处理队列中的消息，不过每个接收者都会处理自己接收到的消息，需要多个接收者监听队列。</p><h3 id="发布-订阅消息模型"><a href="#发布-订阅消息模型" class="headerlink" title="发布-订阅消息模型"></a>发布-订阅消息模型</h3><p>消息会发送给一个<strong>主题</strong>，多个接收者可以监听一个主题。与队列不同的是，消息不再是只投递给一个接收者，所有主题的订阅者都可以接收到此消息。<br><img src="http://hoxis-github-io.qiniudn.com/151023-publish-subscribe-messaging-model.png" alt="发布-订阅消息模型"></p><h2 id="JMS的优点"><a href="#JMS的优点" class="headerlink" title="JMS的优点"></a>JMS的优点</h2><ul><li>无需等待</li><li>面向消息和解耦</li><li>位置独立</li><li>确保投递</li></ul><h1 id="在Spring中搭建消息代理"><a href="#在Spring中搭建消息代理" class="headerlink" title="在Spring中搭建消息代理"></a>在Spring中搭建消息代理</h1><h2 id="安装ActiveMQ"><a href="#安装ActiveMQ" class="headerlink" title="安装ActiveMQ"></a>安装ActiveMQ</h2><p><a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ</a>是一个开源的消息代理， 也是使用JMS进行异步消息传递的最佳选择。在<a href="http://activemq.apache.org/download.html" target="_blank" rel="noopener">官方网站下载</a>后，解压缩安装包，点击<code>apache-activemq-5.12.1\bin\activemq.bat</code>运行即可（64位操作系统可能需要点击<code>apache-activemq-5.12.1\bin\win64\activemq.bat</code>运行）。运行后进入<code>http://localhost:8161/</code>表明安装成功， 这时就可以使用它进行消息代理了。</p><h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.samples.service.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Generic properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jsp.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">jsp.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jstl.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jstl.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet.version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">servlet.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-framework.version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">spring-framework.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Logging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.0.13<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Other Web dependencies --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jstl.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jsp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring and Transactions --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr250-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><p>使用JMS连接工厂通过消息代理发送消息，因为选择了ActiveMQ作为消息代理，因此需要配置JMS连接工厂，让它知道如何连接到ActiveMQ。<code>ActiveMQConnectionFactory</code>是ActiveMQ自带的连接工厂，可以在Spring中进行配置。</p><p>使用<code>JmsTemplate</code>可以创建连接、获得会话以及发送和接收消息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Activemq 连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activeMQConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"system1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"manager1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"failover:(tcp://localhost:61616)?timeout=2000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ConnectionFactory Definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.CachingConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"activeMQConnectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Default Destination Queue Definition --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试配置多个Destination --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"test.activemq.queue"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JmsTemplate Definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Message Sender Definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSender"</span> <span class="attr">class</span>=<span class="string">"activemq.publisher.MessageSender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"jmsTemplate"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">ref</span>=<span class="string">"destination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息监听器，主要监听的目的地址 Message Receiver Definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageReceiver"</span> <span class="attr">class</span>=<span class="string">"activemq.consumer.MessageReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.SimpleMessageListenerContainer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destinationName"</span> <span class="attr">value</span>=<span class="string">"test.activemq.queue"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"messageReceiver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>当调用<code>JmsTemplate</code>的<code>send()</code>方法，<code>JmsTemplate</code>将负责JMS连接、会话并代表发送者发送消息。这里使用了默认的消息目的地。</p><p><img src="http://hoxis-github-io.qiniudn.com/151103-jmsTemplate-send.png" alt="JmsTemplate发送消息"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> activemq.publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JmsTemplate jmsTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Destination destination;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSender</span><span class="params">(<span class="keyword">final</span> JmsTemplate jmsTemplate, <span class="keyword">final</span> Destination destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jmsTemplate = jmsTemplate;</span><br><span class="line">        <span class="keyword">this</span>.destination = destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jmsTemplate.setDefaultDestination(destination);</span><br><span class="line">            jmsTemplate.convertAndSend(text);</span><br><span class="line">            System.out.println(<span class="string">"发送消息 : "</span> + text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接收消息监听器"><a href="#接收消息监听器" class="headerlink" title="接收消息监听器"></a>接收消息监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> activemq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">            TextMessage textMessage = (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String text = textMessage.getText();</span><br><span class="line">                System.out.println(<span class="string">"接收到消息: "</span> + text);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用Spring的定时任务定时发送消息。<br>定时任务配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"QuartzFactoryBean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"capacityDataPublisherJobTrigger"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"capacityDataPublisherJob"</span> <span class="attr">class</span>=<span class="string">"activemq.TestSenderService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">init-method</span>=<span class="string">"run"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"capacityDataPublisherJobTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"capacityDataPublisherJobDetail"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>0 0/5 * * * ?<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"capacityDataPublisherJobDetail"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"capacityDataPublisherJob"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"run"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"concurrent"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> activemq.publisher.MessageSender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSenderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSender messageSender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        messageSender.send(<span class="string">"message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在tomcat中运行项目。<br>运行后发送了两条消息，消息队列中显示：<br><img src="http://hoxis-github-io.qiniudn.com/151103-activemq-send.png" alt="此处输入图片的描述"></p><p>重启项目时，接收消息监听器会处理队列中所有的消息，项目运行时，每次发送消息成功后都会触发接收消息监听器：<br><img src="http://hoxis-github-io.qiniudn.com/151103-activemq-send-recieve.png" alt="此处输入图片的描述"></p><p>入列和出列：<br><img src="http://hoxis-github-io.qiniudn.com/151103-activemq-send-recieve2.png" alt="此处输入图片的描述"></p><hr><p>代码获取地址：<br><a href="https://github.com/hoxis/JavaWeb/tree/master/activemq" target="_blank" rel="noopener">https://github.com/hoxis/JavaWeb/tree/master/activemq</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是示范基于Maven的ActiveMQ+Spring的简单使用，基于ActiveMQ消息代理的Spring JMS消息配置，以及定时任务的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hoxis.github.io/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
      <category term="Maven" scheme="https://hoxis.github.io/tags/Maven/"/>
    
      <category term="ActiveMQ" scheme="https://hoxis.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>使用org.w3c.dom.Element的setTextContent()、getTextContent()方法时出现编译错误</title>
    <link href="https://hoxis.github.io/%E4%BD%BF%E7%94%A8org.w3c.dom.Element%E7%9A%84setTextContent()%E3%80%81getTextContent()%E6%96%B9%E6%B3%95%E6%97%B6%E5%87%BA%E7%8E%B0%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF.html"/>
    <id>https://hoxis.github.io/使用org.w3c.dom.Element的setTextContent()、getTextContent()方法时出现编译错误.html</id>
    <published>2019-04-08T13:46:26.525Z</published>
    <updated>2019-04-08T13:46:26.525Z</updated>
    
    <content type="html"><![CDATA[<p>今天在更新项目后进行编译时，出现如下错误一堆：<br><img src="http://hoxis-github-io.qiniudn.com/150811-org.w3c.dom.Element-error.jpg" alt="编译错误"></p><a id="more"></a><p>Google之，在<code>stackoverflow</code>上看到如下的解决方法：</p><blockquote><p>I came here with the same problem. Even worse: I had two projects side by side, both targetting the same JRE (1.6), and one was able to resolve Node.getTextContent() while the other wasn’t. I resolved it sort of by accident; I went to project properties | Java Build Path | Order and Export tab, selected the JRE (which was at the bottom of the list) and clicked the “Top” button to move it to the top. My problem went away. It appears that the Node I wanted was hidden by another one. :-\ Maybe this will help with your problem.</p></blockquote><p>大体解决方法就是：<br>在项目的<code>Java Build Path | Order and Export</code>选项卡中，将<code>JRE System Library</code>选中，并<code>Top</code>置顶。然后再进行编译即可。如图：<br><img src="http://hoxis-github-io.qiniudn.com/150811-jdk6top.png" alt="top-jre6"></p><p>但是上面并没有给出原因。</p><hr><p>其实顺着问题的解决思路想想，肯定是jar出现了冲突所致。于是我就在项目的jar包中找可能含有<code>org.w3c.dom.Element</code>这个类的jar包。既然将JRE的lib进行了置顶，那么就有理由猜测JRE-lib里存在这个类的相关方法。</p><p>最终，在<code>rt.jar</code>和<code>xml-apis.jar</code>和中找到了。应该就是这两个jar冲突所致，由于引用优先级的不同导致引用了<code>xml-apis.jar</code>中的方法。</p><p>其实在<code>pom.xml</code>中并没有这个jar的直接引用，在<code>Dependency  Hierarchy</code>视图中搜索<code>xml-apis</code>可以发现，它其实是由于<code>dom4j</code>的依赖而引入的。如图：<br><img src="http://hoxis-github-io.qiniudn.com/150811-xml-api.png" alt="Dependency  Hierarchy"></p><p>解决方法：右击该jar，选择<code>exclude maven artifact</code>，确认并保存，重新编译即可：<br><img src="http://hoxis-github-io.qiniudn.com/150811-exclude-maven.png" alt="exclude maven artifact"></p><p>最终的<code>pom.xml</code>中只是在<code>dom4j</code>的<code>&lt;dependency&gt;</code>中多了这么一段<code>&lt;exclusions&gt;</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xml-apis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xml-apis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://stackoverflow.com/questions/5534864/compilation-error-in-node-gettextcontent-for-jdk-6" target="_blank" rel="noopener">http://stackoverflow.com/questions/5534864/compilation-error-in-node-gettextcontent-for-jdk-6</a><br><a href="http://www.educity.cn/wenda/364108.html" target="_blank" rel="noopener">http://www.educity.cn/wenda/364108.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在更新项目后进行编译时，出现如下错误一堆：&lt;br&gt;&lt;img src=&quot;http://hoxis-github-io.qiniudn.com/150811-org.w3c.dom.Element-error.jpg&quot; alt=&quot;编译错误&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="绊脚石" scheme="https://hoxis.github.io/categories/%E7%BB%8A%E8%84%9A%E7%9F%B3/"/>
    
    
      <category term="错误处理" scheme="https://hoxis.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第四章：面向切面的Spring</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第四章：面向切面的Spring.html</id>
    <published>2019-04-08T13:46:26.522Z</published>
    <updated>2019-04-08T13:46:26.522Z</updated>
    
    <content type="html"><![CDATA[<p>分布于应用中多处的功能称为<strong>横切关注点</strong>，通过这些横切关注点在概念上是与应用的业务逻辑相分离的，但其代码往往直接嵌入在应用的业务逻辑之中。将这些横切关注点与业务逻辑相分离正是<strong>面向切面编程（AOP）</strong>所要解决的。</p><a id="more"></a><h1 id="什么是面向切面编程"><a href="#什么是面向切面编程" class="headerlink" title="什么是面向切面编程"></a>什么是面向切面编程</h1><p><img src="http://hoxis-github-io.qiniudn.com/160108-spring-in-action-4.1.png" alt="切面实现了横切关注点的模块化"></p><p>面向切面编程中，通过声明的方式定义通用功能（安全、事务等）以何种方式在何处应用，而无需修改受影响的类（CourseService、StudentService等）。</p><h2 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h2><h3 id="通知（Advice）：何种功能、何时"><a href="#通知（Advice）：何种功能、何时" class="headerlink" title="通知（Advice）：何种功能、何时"></a>通知（Advice）：何种功能、何时</h3><p>切面的工作被称为<strong>通知</strong>，同时通知还要解决何时执行这个工作的问题。Spring切面可以应用5种类型的通知：</p><ul><li>Before：在方法被调用之前调用通知；</li><li>After：在方法调用之后调用通知；</li><li>After-returning：在方法成功执行后；</li><li>After-throwing：在方法抛出异常后；</li><li>Around：在方法调用之前和之后都会调用通知；</li></ul><h3 id="连接点（Joinpoint）：能够应用通知的点"><a href="#连接点（Joinpoint）：能够应用通知的点" class="headerlink" title="连接点（Joinpoint）：能够应用通知的点"></a>连接点（Joinpoint）：能够应用通知的点</h3><p>连接点是在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程中。</p><h3 id="切点（Pointcut）：何处，应用通知的连接点的集合"><a href="#切点（Pointcut）：何处，应用通知的连接点的集合" class="headerlink" title="切点（Pointcut）：何处，应用通知的连接点的集合"></a>切点（Pointcut）：何处，应用通知的连接点的集合</h3><p>切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称来指定这些切点，或是利用正则表达式定义匹配来指定这些切点。</p><h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><p>切面是通知和切点的结合，即何时在何处完成何种功能。</p><h3 id="引入（Introduction）"><a href="#引入（Introduction）" class="headerlink" title="引入（Introduction）"></a>引入（Introduction）</h3><p>引入允许我们向现有的类添加新方法或属性，从而可以在无需修改现有类的情况下，让它们具有新的行为和状态。</p><h3 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h3><p>将切面应用到目标对象来创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中，在目标对象的生命周期里有多个点可以进行织入：</p><ul><li>编译期：需要特殊的编译器，AspectJ的织入编译器就是这种方式；</li><li>类加载期：在目标类加载到JVM时被织入，需要特殊的类加载器。</li><li>运行期：在应用运行的某个时刻被织入，一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。Spring AOP就是这种方式。</li></ul><h2 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h2><ul><li>基于代理的经典AOP；</li><li>@AspectJ注解驱动的切面；</li><li>纯POJO切面；</li><li>注入式AspectJ切面（适合Spring个版本）；</li></ul><p>Spring是在运行期将切面织入到所管理的Bean中的，如图所示，代理类封装了目标类，当拦截到方法调用时，在调用目标Bean的方法之前，代理会执行切面逻辑。真正应用需要被代理的Bean时，Spring才会创建代理对象。Spring的切面由包裹了目标对象的代理类实现，代理类处理方法的调用，执行额外的切面逻辑，并调用目标方法。</p><p><img src="http://hoxis-github-io.qiniudn.com/160112-spring-in-action-4.3.png" alt="Spring的切面由包裹了目标对象的代理类实现，代理类处理方法的调用，执行额外的切面逻辑，并调用目标方法。"></p><p>Spring只支持方法连接点，缺少对字段连接点的支持，例如拦截对象字段的修改。也不支持构造器连接点，也就无法在Bean创建时应用通知。</p><h1 id="使用切点选择连接点"><a href="#使用切点选择连接点" class="headerlink" title="使用切点选择连接点"></a>使用切点选择连接点</h1><p>Spring AOP中，需要使用AspectJ的<em>切点表达式</em>来定义切点。</p><table><thead><tr><th style="text-align:center">AspectJ指示器</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">arg()</td><td>限制连接点匹配参数为<strong>指定类型</strong>的执行方法</td></tr><tr><td style="text-align:center">@args()</td><td>限制连接点匹配参数由<strong>指定注解标注</strong>的执行方法</td></tr><tr><td style="text-align:center"><strong>execution()</strong></td><td><strong>用于匹配是连接点的执行方法</strong></td></tr><tr><td style="text-align:center">this()</td><td>限制连接点匹配AOP代理的Bean引用为指定类型的类</td></tr><tr><td style="text-align:center">target()</td><td>限制连接点匹配目标对象为执行类型的类</td></tr><tr><td style="text-align:center">@target()</td><td>限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型的注解</td></tr><tr><td style="text-align:center">within()</td><td>限制连接点匹配指定的类型</td></tr><tr><td style="text-align:center">@within()</td><td>限制连接点匹配指定注解所标注的类型</td></tr><tr><td style="text-align:center">@annotation()</td><td>限制匹配带有指定注解连接点</td></tr></tbody></table><h2 id="编写切点"><a href="#编写切点" class="headerlink" title="编写切点"></a>编写切点</h2><p><img src="http://hoxis-github-io.qiniudn.com/160112-spring-in-action-4.4.png" alt="使用AspectJ切点表达式来定位"></p><p>这里使用了execution()指示器来选择Instrument的play()方法。表达式以<code>*</code>开头表示不关心返回值的类型，然后指定了全限定类名和方法名，使用<code>..</code>作为方法的参数列表，表示可以是任意的入参。</p><p>使用<code>&amp;&amp;</code>将execution()和within()进行连接，那么也就可以使用<code>||</code>（或）和<code>!</code>（非）。</p><p><img src="http://hoxis-github-io.qiniudn.com/160112-spring-in-action-4.5.png" alt="使用within()指示器限制切点范围"></p><h2 id="使用Spring的bean-指示器"><a href="#使用Spring的bean-指示器" class="headerlink" title="使用Spring的bean()指示器"></a>使用Spring的bean()指示器</h2><p>bean()使用Bean id来作为参数，从而限制切点只匹配特定的Bean，如：</p><p><code>execution(* com.springinaction.springidol.Instrument.play()) and bean(eddie)</code></p><p>这里，表示在执行Instrument的play()方法时应用通知，但限定Bean的id为eddie。</p><h1 id="在XML中声明切面"><a href="#在XML中声明切面" class="headerlink" title="在XML中声明切面"></a>在XML中声明切面</h1><table><thead><tr><th style="text-align:center">AOP配置元素</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;aop:advisor&gt;</code></td><td>定义AOP通知器</td></tr><tr><td style="text-align:center"><code>&lt;aop:after&gt;</code></td><td>定义AOP后置通知（不管该方法是否执行成功）</td></tr><tr><td style="text-align:center"><code>&lt;aop:after-returning&gt;</code></td><td>在方法成功执行后调用通知</td></tr><tr><td style="text-align:center"><code>&lt;aop:after-throwing&gt;</code></td><td>在方法抛出异常后调用通知</td></tr><tr><td style="text-align:center"><code>&lt;aop:around&gt;</code></td><td>定义AOP环绕通知</td></tr><tr><td style="text-align:center"><code>&lt;aop:aspect&gt;</code></td><td>定义切面</td></tr><tr><td style="text-align:center"><code>&lt;aop:aspect-autoproxy&gt;</code></td><td>定义<code>@AspectJ</code>注解驱动的切面</td></tr><tr><td style="text-align:center"><code>&lt;aop:before&gt;</code></td><td>定义AOP前置通知</td></tr><tr><td style="text-align:center"><code>&lt;aop:config&gt;</code></td><td>顶层的AOP配置元素，大多数的<code>&lt;aop:*&gt;</code>包含在<code>&lt;aop:config&gt;</code>元素内</td></tr><tr><td style="text-align:center"><code>&lt;aop:declare-parent&gt;</code></td><td>为被通知的对象引入额外的接口，并透明的实现</td></tr><tr><td style="text-align:center"><code>&lt;aop:pointcut&gt;</code></td><td>定义切点</td></tr></tbody></table><p>下面定义一个观众类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The audience is taking their seats."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The audience is turning off their cellphones"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applaud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CLAP CLAP CLAP CLAP CLAP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演失败之后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Boo! We want our money back!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="声明前置和后置通知"><a href="#声明前置和后置通知" class="headerlink" title="声明前置和后置通知"></a>声明前置和后置通知</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"eddie"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instrument"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Guitar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"my love"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"audience"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Audience"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span><span class="comment">&lt;!-- 引用audience Bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(* com.springinaction.springidol.Performer.perform(..))"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表演之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"takeSeats"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"turnOffCellPhones"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表演之后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"applaud"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表演失败之后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"demandRefund"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;aop:config&gt;</code>中，可以声明一个或多个通知器、切面或者切点。<code>pointcut</code>属性定义了通知所引用的切点。最终的通知逻辑如何织入到业务逻辑中：<br><img src="http://hoxis-github-io.qiniudn.com/160112-spring-in-action-4.6.png" alt="Audience切面包含4中通知，这些通知把通知=逻辑织入到匹配的切面的切点方法中"></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeforeAndAfter</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException</span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-idol.xml"</span>);</span><br><span class="line">Performer performer = (Performer) context.getBean(<span class="string">"eddie"</span>);</span><br><span class="line">performer.perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果：</p><blockquote><p>The audience is taking their seats.<br>The audience is turning off their cellphones<br>Playing my love : Guitar Guitar Guitar<br>CLAP CLAP CLAP CLAP CLAP</p></blockquote><h2 id="声明环绕通知"><a href="#声明环绕通知" class="headerlink" title="声明环绕通知"></a>声明环绕通知</h2><p>前置通知和后置通知之间共享消息需要使用成员变量，而Audience是单例，使用成员变量有可能存在线程安全问题。使用环绕通知可以完成之前前置和后置所实现的相同功能，而且只需一个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundAudience</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinpoint)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line">System.out.println(<span class="string">"The audience is taking their seats."</span>);</span><br><span class="line">System.out.println(<span class="string">"The audience is turning off their cellphones"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行被通知的方法</span></span><br><span class="line">joinpoint.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之后</span></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"CLAP CLAP CLAP CLAP CLAP"</span>);</span><br><span class="line">System.out.println(<span class="string">"The performance took "</span> + (end - start) + <span class="string">" milliseconds."</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line"><span class="comment">// 表演失败之后</span></span><br><span class="line">System.out.println(<span class="string">"Boo! We want our money back!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProceedingJoinPoint</code>作为入参，从而可以在通知里调用被通知的方法。</p><p>XML配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"audience"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.AroundAudience"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span><span class="comment">&lt;!-- 引用audience Bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(* com.springinaction.springidol.Performer.perform(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"watchPerformance"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="为通知传递参数"><a href="#为通知传递参数" class="headerlink" title="为通知传递参数"></a>为通知传递参数</h2><p>读心者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MindReader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interceptThoughts</span><span class="params">(String thoughts)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">getThoughts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Magician是MindReader 接口的一个简单实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Magician</span> <span class="keyword">implements</span> <span class="title">MindReader</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String thoughts;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interceptThoughts</span><span class="params">(String thoughts)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Intercepting volunteer's thoughts"</span>);</span><br><span class="line"><span class="keyword">this</span>.thoughts = thoughts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getThoughts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> thoughts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是一个志愿者，供读心者去截取他的内心感应：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thinker</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thinkOfSomething</span><span class="params">(String thoughts)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volunteer</span> <span class="keyword">implements</span> <span class="title">Thinker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String thoughts;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thinkOfSomething</span><span class="params">(String thoughts)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Thinker: "</span> + thoughts);</span><br><span class="line"><span class="keyword">this</span>.thoughts = thoughts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getThoughts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> thoughts;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过配置实现将被通知方法的参数传递给通知：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"volunteer"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Volunteer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"magician"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Magician"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"magician"</span>&gt;</span><span class="comment">&lt;!-- 引用magician Bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"thinking"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(* com.springinaction.springidol.Thinker.thinkOfSomething(String)) and args(thoughts) "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"interceptThoughts"</span> <span class="attr">pointcut-ref</span>=<span class="string">"thinking"</span></span></span><br><span class="line"><span class="tag"><span class="attr">arg-names</span>=<span class="string">"thoughts"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>切入点指定了Thinker的thinkOfSomething()方法，指定了String参数，然后在args参数中标识了将thoughts作为参数。</p><p>同时，<aop:before>引用了thoughts参数，标识该参数必须传递给magician的interceptThoughts()方法。</aop:before></p><p><strong>注意：</strong></p><blockquote><p><aop:before>引用的<code>thoughts</code>参数和pointcut标识的<code>thoughts</code>参数，二者名称必须一致！</aop:before></p></blockquote><p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeforeArgs</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-magician.xml"</span>);</span><br><span class="line">Thinker thinker = (Thinker) context.getBean(<span class="string">"volunteer"</span>);</span><br><span class="line">MindReader mindReader = (MindReader) context.getBean(<span class="string">"magician"</span>);</span><br><span class="line">thinker.thinkOfSomething(<span class="string">"晚上吃啥呢？"</span>);</span><br><span class="line">System.out.println(<span class="string">"MindReader: "</span> + mindReader.getThoughts());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果：</p><blockquote><p>Intercepting volunteer’s thoughts<br>Thinker: 晚上吃啥呢？<br>MindReader: 晚上吃啥呢？</p></blockquote><h2 id="通过切面引入新功能"><a href="#通过切面引入新功能" class="headerlink" title="通过切面引入新功能"></a>通过切面引入新功能</h2><p>切面可以为SpringBean添加新方法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:declare-parents</span> <span class="attr">types-matching</span>=<span class="string">"com.springinaction.springidol.Performer+"</span></span></span><br><span class="line"><span class="tag"><span class="attr">implement-interface</span>=<span class="string">"com.springinaction.springidol.Contestant"</span></span></span><br><span class="line"><span class="tag"><span class="attr">default-impl</span>=<span class="string">"com.springinaction.springidol.GraciousContestant"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><aop:declare-parents>声明了此切面所通知的Bean在它的对象层次结构中拥有新的父类，即类型匹配Performer接口（由types-matching指定）的Bean会实现Contestant接口（由implement-interface指定），同时可以指定Contestant的实现（default-impl，也可以用delegate-ref指定一个Spring Bean来实现）。</aop:declare-parents></p><h1 id="注解切面：-Aspect、-Pointcut、"><a href="#注解切面：-Aspect、-Pointcut、" class="headerlink" title="注解切面：@Aspect、@Pointcut、"></a>注解切面：@Aspect、@Pointcut、<aop:aspectj-autoproxy></aop:aspectj-autoproxy></h1><p>采用注解的方式将之前的Audience标注为一个切面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJAudience</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义切点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.springinaction.springidol.Performer.perform(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The audience is taking their seats."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The audience is turning off their cellphones"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之后</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applaud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CLAP CLAP CLAP CLAP CLAP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演失败之后</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Boo! We want our money back!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@Pointcut</code>注解用于定义一个在<code>@AspectJ</code>切面内可重用的切点，其值是一个AspectJ切点表达式，这里标识该切点必须匹配Performer接口的perform()方法。performance()切点的名称作为参数赋值给了所有的通知注解，从而可以标识每一个通知方法应该应用在哪里。</p><p>**AfterReturning 和After 的区别：</p><ul><li>AfterReturning 增强处理处理只有在目标方法成功完成后才会被织入。</li><li>After 增强处理不管目标方法如何结束（保存成功完成和遇到异常中止两种情况），它都会被织入。</li></ul><p>使用配置注解，首先我们要将切面在spring上下文中声明成自动代理bean，即<br><code>&lt;aop:aspectj-autoproxy /&gt;</code>。</p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAspectJBeforeAndAfter</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-idol.xml"</span>);</span><br><span class="line">Performer performer = (Performer) context.getBean(<span class="string">"eddie"</span>);</span><br><span class="line">performer.perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果：</p><blockquote><p>The audience is taking their seats.<br>The audience is turning off their cellphones<br>Playing my love : Guitar Guitar Guitar<br>CLAP CLAP CLAP CLAP CLAP</p></blockquote><p>运行测试程序时可能会出错，形如：</p><blockquote><p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘eddie’ defined in class path resource [spring-idol.xml]: Cannot create inner bean ‘com.springinaction.springidol.Guitar#365d15c6’ of type [com.springinaction.springidol.Guitar] while setting bean property ‘instrument’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘com.springinaction.springidol.Guitar#365d15c6’ defined in class path resource [spring-idol.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: error at ::0 can’t find referenced pointcut performance</p></blockquote><p>上网搜了一下，发现是JDK不匹配。<br>我原来用的JDK1.7匹配的是aspectjrt.1.6.2和aspectjweaver.1.6.2，因此会报错。</p><blockquote><p>如果要使用AspectJ完成注解切面需要注意下面的JDK与AspectJ的匹配：<br>JDK1.6 —— aspectJ1.6<br>JDK1.7 —— aspectJ1.7.3+</p></blockquote><h2 id="注解环绕通知：-Around"><a href="#注解环绕通知：-Around" class="headerlink" title="注解环绕通知：@Around"></a>注解环绕通知：@Around</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJAroundAudience</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义切点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.springinaction.springidol.Performer.perform(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinpoint)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 表演之前</span></span><br><span class="line">System.out.println(<span class="string">"The audience is taking their seats."</span>);</span><br><span class="line">System.out.println(<span class="string">"The audience is turning off their cellphones"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行被通知的方法</span></span><br><span class="line">joinpoint.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表演之后</span></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"CLAP CLAP CLAP CLAP CLAP"</span>);</span><br><span class="line">System.out.println(<span class="string">"The performance took "</span> + (end - start) + <span class="string">" milliseconds."</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line"><span class="comment">// 表演失败之后</span></span><br><span class="line">System.out.println(<span class="string">"Boo! We want our money back!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不要忘了配置：@Aspect和<aop:aspectj-autoproxy><br>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAspectJAround</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-idol-around.xml"</span>);</span><br><span class="line">Performer performer = (Performer) context.getBean(<span class="string">"eddie"</span>);</span><br><span class="line">performer.perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></aop:aspectj-autoproxy></p></blockquote><h2 id="传递参数给所标注的通知"><a href="#传递参数给所标注的通知" class="headerlink" title="传递参数给所标注的通知"></a>传递参数给所标注的通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJMagician</span> <span class="keyword">implements</span> <span class="title">MindReader</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String thoughts;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.springinaction.springidol.Thinker.thinkOfSomething(String)) &amp;&amp; args(thoughts))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thinking</span><span class="params">(String thoughts)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"thinking(thoughts)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interceptThoughts</span><span class="params">(String thoughts)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Intercepting volunteer's thoughts"</span>);</span><br><span class="line"><span class="keyword">this</span>.thoughts = thoughts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getThoughts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> thoughts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><aop:pointcut> 变为@Pointcut，<aop:before>变为@Before，注解里不需要arg-names属性所对应的注解。</aop:before></aop:pointcut></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布于应用中多处的功能称为&lt;strong&gt;横切关注点&lt;/strong&gt;，通过这些横切关注点在概念上是与应用的业务逻辑相分离的，但其代码往往直接嵌入在应用的业务逻辑之中。将这些横切关注点与业务逻辑相分离正是&lt;strong&gt;面向切面编程（AOP）&lt;/strong&gt;所要解决的。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第六章：web视图解析</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9Aweb%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第六章：web视图解析.html</id>
    <published>2019-04-08T13:46:26.522Z</published>
    <updated>2019-04-08T13:46:26.522Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要内容包括：</p><ul><li>将model数据展现为HTML</li><li>JSP视图的使用</li></ul><p>在前面的章节中，我们主要关注点在于编写控制来处理web请求，同时也创建了一些简单的视图来展现请求返回的model数据，本章我们将主要讨论在控制器完成请求处理之后和将返回结果展示到用户的浏览器之前，这个过程之间发生了什么。</p><a id="more"></a><h1 id="理解视图解析"><a href="#理解视图解析" class="headerlink" title="理解视图解析"></a>理解视图解析</h1><p>在之前章节中所编写的控制器中并没有直接生成HTML的方法，它只是将数据填充到model中，然后将model传送到视图中进行展现。</p><p>Spring MVC中定义了一个<code>ViewResolver</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法resolveViewName()，当给定一个视图名称和一个Locale时就会返回一个View实例，View是另外一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>View接口的工作是对model、servlet请求、响应对象进行处理，并将结果输出到response中。</p><p>看起来很简单啊，我们所需要做的仅仅是编写ViewResolver和View的实现类来将内容输出到response中，并在用户浏览器中进行展示即可，但真的是这样吗？</p><p>虽然可以编写自定义的实现类，而且有些时候会需要一些特殊的处理，Spring提供了一些现成的实现类：</p><table><thead><tr><th>视图解析器</th><th>描述</th></tr></thead><tbody><tr><td>BeanNameViewResolver</td><td>在Spring的application context中的bean中查找与视图名称相同id</td></tr><tr><td>ContentNegotiatingViewResolver</td><td>委托给一个或多个人视图解析器，而选择哪一个取决于请求的内容类型</td></tr><tr><td>FreeMarkerViewResolver</td><td>查找一个基于FreeMarker的模版</td></tr><tr><td>InternalResourceViewResolver</td><td>在web应用程序的war文件中查找视图</td></tr><tr><td>JasperReportsViewResolver</td><td>解析为JasperReport报表文件</td></tr><tr><td>ResourceBundleViewResolver</td><td>根据属性文件(properties file)查找View实现</td></tr><tr><td>TilesViewResolver</td><td>通过Tiles模版定义的模版解析，模版的名称与视图名称相同</td></tr><tr><td>UrlBasedViewResolver</td><td>根据视图名称直接解析，当视图名称与物理视图名称匹配时</td></tr><tr><td>VelocityLayoutViewResolver</td><td>解析为从不同的Velocity模版组成的Velocity布局</td></tr><tr><td>VelocityViewResolver</td><td>解析为Velocity模版</td></tr><tr><td>XmlViewResolver</td><td>根据XML文件（/WEB_INF/views.xml）中声明的View实现进行解析，与BeanNameViewResolver类似</td></tr><tr><td>XsltViewResolver</td><td>基于XSLT视图解析</td></tr></tbody></table><p>我们没有足够的时间和篇幅来讨论所有的解析器，上面的每个解析器都对应着一个特定的视图技术。InternalResourceViewResolver主要用于JSP，TilesViewResolver用于 Apache Tiles视图，FreeMarkerViewResolver和VelocityViewResolver分别用于FreeMarker和Velocity模版。</p><h1 id="创建JSP视图"><a href="#创建JSP视图" class="headerlink" title="创建JSP视图"></a>创建JSP视图</h1><p>Spring对JSP视图有两种支持方式：</p><ul><li>InternalResourceViewResolver：可以将视图名称解析到JSP文件。另外，对JSP中使用的JSTL（JavaServer Pages Standard Tag Library）标签也提供了支持。</li><li>Spring提供了两种JSP标签库，一种是form-to-model绑定，另外一种则提供基本的功能。</li></ul><p>InternalResourceViewResolver是最简单也是最常用的一个解析器，下面我们来看一下它是如何使用它来完成任务。</p><h2 id="配置JSP视图解析器"><a href="#配置JSP视图解析器" class="headerlink" title="配置JSP视图解析器"></a>配置JSP视图解析器</h2><p>一些视图解析器（如ResourceBundleViewResolver）是直接的将逻辑视图名称映射到一个特定的View接口实现类上，而InternalResourceViewResolver则采用了另外的比较间接的方式。它采用了一种约定，通过给逻辑视图名称添加前缀和后缀来确定web应用中对应的物理路径。</p><p>假设有一个逻辑视图名称为home，如果将所有的JSP文件都存放在/WEB-INF/views/目录下，并且主页的JSP名为home.jsp，那么可以通过为home添加前缀/WEB-INF/views/和后缀.jsp来找到对应的物理视图路径，如图所示。</p><p><img src="http://hoxis-github-io.qiniudn.com/160217-spring-in-action-6.1.png" alt="InternalResourceViewResolver通过为逻辑视图名称添加前缀和后缀来解析视图"></p><p>可以在使用<code>@Bean</code>注解的类进行设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置一个JSP视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，如果采用基于XML的Spring配置，也可以通过如下方式进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/views/"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">p:suffix</span>=<span class="string">".jsp"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="探索JSTL视图"><a href="#探索JSTL视图" class="headerlink" title="探索JSTL视图"></a>探索JSTL视图</h3><p>当JSP页面使用JSTL标签时，就需要配置InternalResourceViewResolver来解析JstlView了。</p><p>JSTL格式化标签需要一个Locale来正确地格式化一些特定语言环境的值，如日期和币种。消息标签可以使用Spring消息源和Locale来正确地选中消息并解析到HTML。</p><p>要解析JstlView，需要在InternalResourceViewResolver中设置<code>viewClass</code>属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolver.setViewClass(JstlView.class);</span><br></pre></td></tr></table></figure></p><p>同样的，xml配置中也需要进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p:viewClass="org.springframework.web.servlet.view.JstlView"</span><br></pre></td></tr></table></figure></p><h2 id="使用Spring的JSP库"><a href="#使用Spring的JSP库" class="headerlink" title="使用Spring的JSP库"></a>使用Spring的JSP库</h2><p>Spring提供了两种JSP标签库，一种用于将绑定了model属性的HTML标签进行渲染，其他的一些标签在不同场合下可以用到。</p><h3 id="将表单绑定到model"><a href="#将表单绑定到model" class="headerlink" title="将表单绑定到model"></a>将表单绑定到model</h3><p>Spring的表单绑定JSP标签库共有14种，与原生HTML标签不同的是，它们可以将一个对象绑定在model，并且可以从model对象的属性中获取填充值。标签库同时可以用来与用户交互错误信息。</p><p>要使用表单绑定标签库，需要在JSP页面中进行声明：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> %&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意，这里使用了sf作为前缀。</p><table><thead><tr><th style="text-align:center">JSP标签</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;sf:checkbox&gt;</code></td><td>生成一个checkbox类型的HTML input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:checkboxes&gt;</code></td><td>生成一组checkbox类型的HTML input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:errors&gt;</code></td><td>通过一个HTML <code>&lt;span&gt;</code>标签展现字段的错误</td></tr><tr><td style="text-align:center"><code>&lt;sf:form&gt;</code></td><td>生成一个HTML的<code>&lt;form&gt;</code>标签，同时为内部标签的绑定暴露了一个绑定路径（binding path）</td></tr><tr><td style="text-align:center"><code>&lt;sf:hidden&gt;</code></td><td>生成一个type为hidden的Html input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:input&gt;</code></td><td>生成一个type为text的Html input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:label&gt;</code></td><td>生成一个HTML <code>&lt;label&gt;</code>标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:option&gt;</code></td><td>生成一个HTML的<code>&lt;option&gt;</code>标签，根据绑定的值来设置selected属性</td></tr><tr><td style="text-align:center"><code>&lt;sf:options&gt;</code></td><td>根据绑定的集合、数组或者map，生成一个option标签列表</td></tr><tr><td style="text-align:center"><code>&lt;sf:password&gt;</code></td><td>生成password类型的input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:radiobutton&gt;</code></td><td>生成radio类型的input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:radiobuttons&gt;</code></td><td>生成一组radio类型的input标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:select&gt;</code></td><td>生成<code>&lt;select&gt;</code>标签</td></tr><tr><td style="text-align:center"><code>&lt;sf:textarea&gt;</code></td><td>生成<code>&lt;textarea&gt;</code>标签</td></tr></tbody></table><p>现在就可以在之前的用户注册界面进行使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">commandName</span>=<span class="string">"spitter"</span>&gt;</span></span><br><span class="line">    First Name: <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"firstName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Last Name: <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"lastName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Email: <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Password: <span class="tag">&lt;<span class="name">sf:password</span> <span class="attr">path</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Register"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用Spring的form标签主要有两个作用，第一是它会自动的绑定来自Model中的一个属性值到当前form对应的实体对象，默认是command属性，这样我们就可以在form表单体里面方便的使用该对象的属性了；第二是它支持我们在提交表单的时候使用除GET和POST之外的其他方法进行提交，包括DELETE和PUT等。</p><p>这个时候如果Model中存在一个属性名称为command的javaBean，在渲染上面的代码时就会取command的对应属性值赋给对应标签的值。</p><p>我们指定form默认自动绑定的是Model的command属性值，那么当我的form对象对应的属性名称不是command的时候，应该怎么办呢？对于这种情况，Spring给我们提供了一个commandName属性，我们可以通过该属性来指定我们将使用Model中的哪个属性作为form需要绑定的command对象。除了commandName属性外，指定modelAttribute属性也可以达到相同的效果。</p><p>这里将commandName设置为spitter，因此model中必然存在一个key为spitter的对象，否则表单将不能渲染。这意味着需要对SpitterController进行简单的改动，以保证model中存在一个Spitter的对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理来自/spitter/register的get请求</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showRegistrationForm</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">model.addAttribute(<span class="keyword">new</span> Spitter());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到表单代码中，使用<code>&lt;sf:input&gt;</code>代替了<code>&lt;input&gt;</code>标签，这个标签会生成一个HTML的<code>&lt;input&gt;</code>标签，并且将它的attribute属性设为text，它的value属性会根据<code>&lt;sf:input&gt;</code>标签的path属性设置的值去model对象中对应的属性值进行设置。如model中的Spitter对象有一个firstName属性为Jack，那么<code>&lt;sf:input path=&quot;firstName&quot; /&gt;</code>会被解析为含有<code>value=&quot;Jack&quot;</code>的input标签。</p><p>为了更好的理解，在一次注册失败后，会重定向到注册页面，对应的HTML的form标签如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"spitter"</span> <span class="attr">action</span>=<span class="string">"/spitter/spitter/register"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    First Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"firstName"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"J"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Last Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"lastName"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"B"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Email:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"jack"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Username:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"jack"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    Password:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Register"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>值得注意的是，从Spring3.1开始，<code>&lt;sf:input&gt;</code>标签允许使用<code>type</code>属性来声明一些特殊的HTML5类型，如data、range和email等，例如，可以这样来声明email：<br><code>Email: &lt;sf:input path=&quot;email&quot; type=&quot;email&quot; /&gt;&lt;br/&gt;</code></p><p>这样就会解析为：<br><code>Email: &lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;email&quot; value=&quot;jack&quot;/&gt;&lt;br/&gt;</code></p><h3 id="错误信息展示"><a href="#错误信息展示" class="headerlink" title="错误信息展示"></a>错误信息展示</h3><p>当存在验证错误时，错误的详细信息会被存放model数据中并被request携带，所要做的就是对model中的错误信息进行展示，使用<code>&lt;sf:errors&gt;</code>标签即可。</p><p>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">First Name: <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"firstName"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"firstName"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">```      </span><br><span class="line">这里将`<span class="tag">&lt;<span class="name">sf:errors</span>&gt;</span>`的path属性设置为firstName，那么就会展示Spitter model对象的firstName的验证错误信息，如果没有错误，那么就不会对其进行解析。如果有，会将其解析为`<span class="tag">&lt;<span class="name">span</span>&gt;</span>`标签。</span><br><span class="line">```html</span><br><span class="line">First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"firstName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"firstName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"firstName.errors"</span>&gt;</span>size must be between 2 and 30<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另外一种展示错误信息的方式是将它们放在一起进行展示，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">commandName</span>=<span class="string">"spitter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"*"</span> <span class="attr">element</span>=<span class="string">"div"</span> <span class="attr">cssClass</span>=<span class="string">"errors"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的path属性使用了<code>*</code>，这表明<code>&lt;sf:errors&gt;</code>标签会解析所有属性的错误信息。需要注意的是，这里设置了属性element为div，默认情况下errors会被解析为<code>&lt;span&gt;</code>标签，适用于只有一条错误信息时。但是当有多条错误信息时，就需要使用<code>&lt;div&gt;</code>，这样错误信息就会解析为<code>&lt;div&gt;</code>标签。</p><p>现在还需要对需要更正的属性进行高亮显示，可以通过使用<code>&lt;sf:label&gt;</code>标签以及它的<code>cssErroeClass</code>属性来实现：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">commandName</span>=<span class="string">"spitter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"*"</span> <span class="attr">element</span>=<span class="string">"div"</span> <span class="attr">cssClass</span>=<span class="string">"errors"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sf:label</span> <span class="attr">path</span>=<span class="string">"firstName"</span> <span class="attr">cssErrorClass</span>=<span class="string">"error"</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">sf:label</span>&gt;</span>：</span><br><span class="line">    <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"firstName"</span> <span class="attr">cssErrorClass</span>=<span class="string">"error"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;sf:label&gt;</code>标签也有一个path属性，用来显示对于的model对象中的属性，如果没有验证错误，那么会将其解析为<code>&lt;label&gt;</code>标签：<br><code>&lt;label for=&quot;firstName&quot;&gt;First Name&lt;/label&gt;</code></p><p>如果出现了验证错误消息，那么就会解析成：<br><code>&lt;label for=&quot;firstName&quot; class=&quot;error&quot;&gt;First Name&lt;/label&gt;</code></p><p>类似的，<code>&lt;sf:input&gt;</code>将其cssErrorClass属性设置为error，如果出现验证错误，那么解析后的<code>&lt;input&gt;</code>标签的class属性会被设置为error。可以自定义属性信息：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.error</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-class">.error</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-class">.error</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ffcccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.errors</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ffcccc</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在可以为用户展示一个比较美观的验证错误信息，另外还可以在Spitter类中为验证信息设置message属性，从而可以得到比较友好的验证信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">5</span>, max = <span class="number">16</span>, message = <span class="string">"&#123;username.size&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">5</span>, max = <span class="number">25</span>, message = <span class="string">"&#123;password.size&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">30</span>, message = <span class="string">"&#123;firstName.size&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">30</span>, message = <span class="string">"&#123;lastName.size&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Email</span>(message = <span class="string">"&#123;email.valid&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure></p><p>对于每一个属性，为@Size标注的message设置了一个字符串，其中的值使用了大括号包括，那么大括号之间的值对应的真实内容可以通过properties文件进行设置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firstName.<span class="attribute">size</span>=First name must be between &#123;min&#125; <span class="keyword">and</span> &#123;max&#125; characters long.</span><br><span class="line">lastName.<span class="attribute">size</span>=Last name must be between &#123;min&#125; <span class="keyword">and</span> &#123;max&#125; characters long.</span><br><span class="line">username.<span class="attribute">size</span>=Username must be between &#123;min&#125; <span class="keyword">and</span> &#123;max&#125; characters long.</span><br><span class="line">password.<span class="attribute">size</span>=Password must be between &#123;min&#125; <span class="keyword">and</span> &#123;max&#125; characters long.</span><br><span class="line">email.<span class="attribute">valid</span>=The email<span class="built_in"> address </span>must be valid.</span><br></pre></td></tr></table></figure></p><p>其中的min和max是@Size标注中设置的。</p><p>当用户提交了一个不合法的注册信息时，可以得到如下图这样的错误提示信息：<br><img src="http://hoxis-github-io.qiniudn.com/160223-spring-in-action-6.3.png" alt="对验证错误信息进行友好地展示"></p><h3 id="Spring基础标签库"><a href="#Spring基础标签库" class="headerlink" title="Spring基础标签库"></a>Spring基础标签库</h3><p>处理表单绑定标签库之外，Spring还提供了一个跟基本的JSP标签库。要使用该标签库，需要在页面中做以下声明：<br><code>&lt;%@ taglib uri=&quot;http://www.springframework.org/tags&quot; prefix=&quot;s&quot; %&gt;</code></p><p>声明了之后，就可以在页面中使用如下的JSP标签了：</p><table><thead><tr><th style="text-align:left">JSP标签</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;s:bind&gt;</code></td><td>通常和form一起用，用以指明表单要提交到哪个类或类的属性中去</td></tr><tr><td style="text-align:left"><code>&lt;spring:escapeBody&gt;</code></td><td>对标签中的内容进行转义处理</td></tr><tr><td style="text-align:left"><code>&lt;spring:hasBindErrors&gt;</code></td><td>用于将特定对象（request属性中）中绑定的的errors解析出来</td></tr><tr><td style="text-align:left"><code>&lt;spring:htmlEscape&gt;</code></td><td>设置当前页面的默认的HTML转义值</td></tr><tr><td style="text-align:left"><code>&lt;spring:message&gt;</code></td><td>根据code取得消息资源，并将其解析为一个page、request、session或者application范围的变量（由var或者scope属性指定）</td></tr><tr><td style="text-align:left"><code>&lt;spring:nestedpath&gt;</code></td><td>为<code>&lt;spring:bind&gt;</code>配置嵌套路径</td></tr><tr><td style="text-align:left"><code>&lt;s:theme&gt;</code></td><td>与<code>&lt;spring:message&gt;</code>相同，只不过处理的是theme消息</td></tr><tr><td style="text-align:left"><code>&lt;spring:transform&gt;</code></td><td>来转换表单中不与bean中的属性一一对应的那些属性</td></tr><tr><td style="text-align:left"><code>&lt;s:url&gt;</code></td><td>与<code>&lt;spring:message&gt;</code>相同，只不过处理的是URI模版变量</td></tr><tr><td style="text-align:left"><code>&lt;s:eval&gt;</code></td><td>与<code>&lt;spring:message&gt;</code>相同，只不过处理的是SpEL表达式</td></tr></tbody></table><h3 id="展示消息的国际化支持"><a href="#展示消息的国际化支持" class="headerlink" title="展示消息的国际化支持"></a>展示消息的国际化支持</h3><p>使用<code>&lt;s:message&gt;</code>标签可以对引用外部属性文件的文件进行完美地解析，如：<br><code>&lt;h1&gt;&lt;s:message code=&quot;spittr.welcome&quot; /&gt;&lt;/h1&gt;</code>。</p><p>这里<code>&lt;s:message&gt;</code>标签会从某个属性文件中根据key值spittr.welcome读取对应的文本并解析到页面中，在这之前需要对这个key-value进行配置。</p><p>Spring有一些实现自<code>MessageSource</code>接口的消息源类，其中一个比较常用的就是<code>ResourceBundleMessageSource</code>，它可以从properties文件中加载消息，下面的@Bean方法对该类进行了配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    messageSource.setBasename(<span class="string">"messages"</span>);</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中的关键在于设置了<code>basename</code>属性，之后ResourceBundleMessageSource就可以对classpath根路径下相对应的的properties文件进行解析。</p><p>另外，还可以使用<code>ReloadableResourceBundleMessageSource</code>，它可以在不重新编译或者重启项目的情况下重新加载消息属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ReloadableResourceBundleMessageSource messageSource = <span class="keyword">new</span> ReloadableResourceBundleMessageSource();</span><br><span class="line">    messageSource.setBasename(<span class="string">"file:///etc/spittr/messages"</span>);</span><br><span class="line">    messageSource.setCacheSeconds(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与ResourceBundleMessageSource主要的区别在于basename的设置，这里可以将其设置为classpath（需要前缀<code>classpath:</code>）、文件系统（<code>file:</code>）或者项目的根目录（不加任何前缀）。上面代码中设置的就是在文件系统中的/etc/spittr目录中查找文件名称为messages的文件。</p><p>下面创建一个名为messages.properties的文件，并添加如下内容：<br><code>spittr.welcome=Welcome to Spittr!</code></p><h3 id="构建URL："><a href="#构建URL：" class="headerlink" title="构建URL："></a>构建URL：<s:url></s:url></h3><p><code>&lt;s:url&gt;</code>标签的主要功能就是创建URL，并将其分配给一个变量或者解析到响应中。作为JSTL的<code>&lt;c:url&gt;</code>标签的简单替换，它也有这一些新功能。</p><p><code>&lt;s:url&gt;</code>标签需要一个servlet上下文相关的URL，并对其进行解析。例如：<br><code>&lt;a href=&quot;&lt;s:url href=&quot;/spitter/register&quot; /&gt;&quot;&gt;Register&lt;/a&gt;</code></p><p>如果servlet上下文是spittr，那么上面的链接将会被解析为：<br><code>&lt;a href=&quot;/spittr/spitter/register&quot;&gt;Register&lt;/a&gt;</code></p><p>将servlet上下文作为链接前缀添加到目标链接中。</p><p>另外也可以使用<code>&lt;s:url&gt;</code>标签构建URL并分配到变量中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">href</span>=<span class="string">"/spitter/register"</span> <span class="attr">var</span>=<span class="string">"registerUrl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;registerUrl&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>默认情况下，URL变量是page范围内的。但是也可以通过设置<code>scope</code>属性将其设置为application、session或者request范围内的：<br><code>&lt;s:url href=&quot;/spitter/register&quot; var=&quot;registerUrl&quot; scope=&quot;request&quot; /&gt;</code></p><p>如果想为URL添加参数，可以通过<code>&lt;s:param&gt;</code>标签进行添加。例如，下面的<code>&lt;s:url&gt;</code>标签通过<code>&lt;s:param&gt;</code>为/spittles设置了max和count属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">href</span>=<span class="string">"/spittles"</span> <span class="attr">var</span>=<span class="string">"spittlesUrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在看起来<code>&lt;s:url&gt;</code>和<code>&lt;c:url&gt;</code>没有什么区别嘛。但是如果需要创建一个含有路径参数的URL时怎么处理？如何让一个href中有一个可以替换的path参数？</p><p>使用<code>&lt;s:param&gt;</code>就可以处理：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">href</span>=<span class="string">"/spitter/&#123;username&#125;"</span> <span class="attr">var</span>=<span class="string">"spitterUrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"jbauer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>href中有一个占位符，通过<s:param>来指定这个占位符的值。</s:param></p><p>另外，<code>&lt;s:url&gt;</code>也可以实现URL的转义，通过设置<code>htmlEscape</code>属性可以完成URL中的HTML转义：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"/spittles"</span> <span class="attr">htmlEscape</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的标签将会被解析为：<br><code>/spitter/spittles?max=60&amp;amp;count=20</code></p><p>另一方面，如果想在JavaScript代码中使用URL，那么可以设置<code>javaScriptEscape</code>属性为true。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"/spittles"</span> <span class="attr">var</span>=<span class="string">"spittlesJSUrl"</span> <span class="attr">javaScriptEscape</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> spittlesUrl = <span class="string">"$&#123;spittlesJSUrl&#125;"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述代码会被解析为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> spittlesUrl = <span class="string">"\/spitter\/spittles?max=60&amp;count=20"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内容转义："><a href="#内容转义：" class="headerlink" title="内容转义："></a>内容转义：<s:escapebody></s:escapebody></h3><p>有时想在页面展示一段HTML代码，一般的要在页面显示字符<code>&lt;</code>和<code>&gt;</code>需要用<code>&amp;lt;</code>和<code>&amp;gt;</code>代替，但是这种做法明显的很笨重而且难读。这种情况下可以使用<code>&lt;s:escapeBody&gt;</code>标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:escapeBody</span> <span class="attr">htmlEscape</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:escapeBody</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述代码会被解析为：<br><code>&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;</code></p><p>当然，该标签页支持JavaScript代码，只需将其<code>javaScriptEscape</code>属性设为true即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:escapeBody</span> <span class="attr">javaScriptEscape</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:escapeBody</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="使用Apache-Tiles视图"><a href="#使用Apache-Tiles视图" class="headerlink" title="使用Apache Tiles视图"></a>使用Apache Tiles视图</h1><p>假设要为所有页面添加一个通用的页首和页尾，一般的做法是为每个JSP页面添加HTML代码，显然这种方法在后期不方便进行维护。</p><p>刚好的方法是使用排版引擎，例如Apache Tiles，来定义所有页面中的通用页面排版。</p><h2 id="配置Tiles视图解析器"><a href="#配置Tiles视图解析器" class="headerlink" title="配置Tiles视图解析器"></a>配置Tiles视图解析器</h2><p>为了在Spring中使用Tiles，必须配置一些bean。需要一个<code>TilesConfigurer</code>，它主要用来定位以及加载tile定义。另外还需要<code>TilesViewResolver</code>来解析tile定义中的逻辑视图。</p><p>对于这两个组件，Apache Tiles 2和3中使用了不同的包：org.springframework.web.servlet<br>.view.tiles2和org.springframework.web.servlet<br>.view.tiles3，这里我们使用3版本。</p><p>下面添加<code>TilesConfigurer</code>的bean定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TilesConfigurer <span class="title">tilesConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TilesConfigurer tiles = <span class="keyword">new</span> TilesConfigurer();</span><br><span class="line"><span class="comment">// 指定tile定义的位置</span></span><br><span class="line">tiles.setDefinitions(<span class="keyword">new</span> String[] &#123; <span class="string">"/WEB-INF/layout/tiles.xml"</span> &#125;);</span><br><span class="line"><span class="comment">// 开启刷新</span></span><br><span class="line">tiles.setCheckRefresh(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> tiles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置TilesConfigurer时，最重要的属性就是definitions，该属性使用一个String数组作为参数，用来指定tile定义文件的位置。可以指定多个位置，还可以使用<strong>通配符</strong>。例如可以使用如下的配置来指定TilesConfigurer寻找/WEB-INF目录下的任意名为tiles.xml的文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tiles.setDefinitions(<span class="keyword">new</span> String[] &#123;</span><br><span class="line">    <span class="string">"/WEB-INF/**/tiles.xml"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Ant风格的**模式表明要在/WEB-INF/下的所有目录查找名为tiles.xml的文件。</p><p>下面来配置<code>TilesViewResolver</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">tilesViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TilesViewResolver();</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">另外，也可以使用XML的方式配置：</span><br><span class="line">```xml</span><br><span class="line">&lt;bean id=<span class="string">"tilesConfigurer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.tiles3.TilesConfigurer"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"definitions"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;/WEB-INF/layout/tiles.xml.xml&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;/WEB-INF/views<span class="comment">/**/tiles.xml&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/list&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="定义tile配置文件"><a href="#定义tile配置文件" class="headerlink" title="定义tile配置文件"></a>定义tile配置文件</h3><p>Apache Tiles提供了一个DTD（document type definition）用来指定XML中tile的定义。每个定义由<code>&lt;definition&gt;</code>元素组成，该元素又有一个或多个<code>&lt;put-attribute&gt;</code>，如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE tiles-definitions PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://tiles.apache.org/dtds/tiles-config_3_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tiles-definitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义一个基础tile --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"base"</span> <span class="attr">template</span>=<span class="string">"/WEB-INF/layout/page.jsp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"header"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/layout/header.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/layout/footer.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"home"</span> <span class="attr">extends</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/home.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"registerForm"</span> <span class="attr">extends</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/registerForm.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"profile"</span> <span class="attr">extends</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/profile.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"spittles"</span> <span class="attr">extends</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/spittles.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"spittle"</span> <span class="attr">extends</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/spittle.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tiles-definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>每个<code>&lt;definition&gt;</code>元素定义了一个tile，代表着一个JSP模版。一个tile同时也可以代表其他在主模版中被嵌入的模版。对应base tile，它表示一个header JSP模版和footer JSP模版。</p><p>下面是page.jsp：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://tiles.apache.org/tags-tiles"</span> <span class="attr">prefix</span>=<span class="string">"t"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">session</span>=<span class="string">"false"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spittr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"&lt;s:url value="</span>/<span class="attr">resources</span>/<span class="attr">style.css</span>" /&gt;</span>"&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">t:insertAttribute</span> <span class="attr">name</span>=<span class="string">"header"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">t:insertAttribute</span> <span class="attr">name</span>=<span class="string">"body"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 尾部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">t:insertAttribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中的关键在于如何使用<code>&lt;t:insertAttribute&gt;</code>标签从Tile标签库插入到其他模版中。使用该标签来引入header、body、footer属性，最终的布局如下图所示：</p><p><img src="http://hoxis-github-io.qiniudn.com/160302-spring-in-action-6.4.png" alt="基本布局"></p><p>其中，header和footer属性在tile定义文件中分别指明了，但是body属性呢？它在哪里设置呢？</p><p>base tile的主要作用是作为一个基础模版用来作为其他tile定义扩展使用的。那么扩展了base的tile就继承了base的header和footer属性（也可以进行重写）。它们自己也设置了一个body属性用来引用一个JSP模版。</p><p>如home tile，它继承自base，所以它继承了base的所有属性。即使home tile的定义非常简单，但是它相当于如下定义：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"home"</span> <span class="attr">template</span>=<span class="string">"/WEB-INF/layout/page.jsp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"header"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/layout/header.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/layout/footer.jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/home.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>hsader.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url value="</span>/" /&gt;</span>"&gt;<span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"&lt;s:url value="</span>/<span class="attr">resources</span>" /&gt;</span>/images/spittr_logo_50.png" border="0" /&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>footer.jsp：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copyright &amp;copy; Craig Walls</span><br></pre></td></tr></table></figure></p><p>每一个继承自base的tile都定义了自己的body模版：</p><p>home.jsp：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">session</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Spittr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">spittles</span>" /&gt;</span>"&gt;Spittles<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">spitter</span>/<span class="attr">register</span>" /&gt;</span>"&gt;Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的关键在于一个页面的公共部分已经在page.jsp、header.jsp、footer.jsp中捕获，这样就可以在所有页面里进行重复利用，简化后期的维护工作。</p><p>如下图所示，页面中包含一些样式和图片，但是这些与Tiles是没有关联的，因此这里就不再进行详细的阐述。但是，从这个页面可以看出页面是如何通过各个不同的tile组件组成的。</p><p><img src="http://hoxis-github-io.qiniudn.com/160316-spring-in-action-6.5.png" alt="通过Tile加载的Spittr的首页"></p><h1 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h1><p>虽然JSP已经使用了较长的时间，并且在Java web中使用的也很广泛，但是它也有自身的一些缺陷。明显的就是JSP是以HTML或者XML的形式展现的。大多数的JSP模版都使用HTML的格式，并使用各种JSP标签库。虽然这些标签库可以在JSP中进行动态的解析，但是却很难有一个格式良好的页面。比如，可以在HTML中使用下面的JSP标签：<br><code>&lt;input type=&quot;text&quot; value=&quot;&lt;c:out value=&quot;${thing.name}&quot;/&gt;&quot; /&gt;</code></p><p>当阅读一个没有解析的JSP页面时，常常很难读懂，简直就是一场视觉灾难！因为JSP并不是真正的HTML，很多web浏览器和编辑器很难对JSP进行解析。</p><p>另外，JSP与servlet规范是紧密耦合的，这就意味着它只能使用在以servlet为基础的web应用中。</p><p>近年内有涌现出很多要替代JSP作为java应用的视图技术，其中一个有力的竞争者就是：Thymeleaf。<code>Thymeleaf</code>不需要依赖标签库，并且是可编辑的、可以解析到HTML中。另外，它与servlet规范是没有耦合的，因此它可以在JSP不能使用的环境进行使用。下面，我们来看一下如何在Spring MVC中使用<code>Thymeleaf</code>。</p><h2 id="配置Thymeleaf视图解析器"><a href="#配置Thymeleaf视图解析器" class="headerlink" title="配置Thymeleaf视图解析器"></a>配置<code>Thymeleaf</code>视图解析器</h2><p>为了在Spring中使用<code>Thymeleaf</code>，需要配置3个bean：</p><ul><li>ThymeleafViewResolver：用来从逻辑视图中解析出Thymeleaf模版；</li><li>SpringTemplateEngine：对模版进行处理，并给出结果；</li><li>TemplateResolver：用来加载Thymeleaf模版；</li></ul><p>下面使用Java类的方式进行声明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thymeleaf视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line"><span class="keyword">return</span> viewResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thymeleaf驱动</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TemplateEngine <span class="title">templateEngine</span><span class="params">(TemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line"><span class="keyword">return</span> templateEngine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模版解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver();</span><br><span class="line">templateResolver.setPrefix(<span class="string">"/WEB-INF/templates/"</span>);</span><br><span class="line">templateResolver.setSuffix(<span class="string">".html"</span>);</span><br><span class="line">templateResolver.setTemplateMode(<span class="string">"HTML5"</span>);</span><br><span class="line"><span class="keyword">return</span> templateResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用XML配置文件的方式进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring3.view.ThymeleafViewResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:templateEngine-ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring3.SpringTemplateEngine"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:templateResolver-ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.thymeleaf.templateresolver.ServletContextTemplateResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/templates/"</span> <span class="attr">p:suffix</span>=<span class="string">".html"</span> <span class="attr">p:templateMode</span>=<span class="string">"HTML5"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>ThymeleafViewResolver是Spring MVC视图解析器ViewResolver的一个实现，和其他视图解析器一样，它会对一个逻辑视图名称进行解析，此时最终的视图会是一个Thymeleaf模版。</p><p>注意，ThymeleafViewResolver中注入了一个SpringTemplateEngine的bean类，SpringTemplateEngine可以用来对模版进行转换和解析。</p><p>TemplateResolver用来定位最终的模版。</p><h2 id="定义Thymeleaf模版"><a href="#定义Thymeleaf模版" class="headerlink" title="定义Thymeleaf模版"></a>定义Thymeleaf模版</h2><p>Thymeleaf模版主要是HTML文件，并没有一些特殊的标签或者标签库。它是通过自定义命名空间的方式来向标准HTML中添加Thymeleaf属性的。比如下面的例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spittr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resources/style.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Spittr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/spittles&#125;"</span>&gt;</span>Spittles<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/spitter/register&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>主页模版非常简单，只使用了th:href属性。该属性就像HTML的href属性，使用起来也是一样的。它的特别之处在于它可以包含Thymeleaf表达式。它会对href属性进行解析，这就是Thymeleaf表达式的工作原理：它们对应着标准的HTML属性，并且会解析一些计算值。这种情况下，所有的th:href属性会使用<code>@{}</code>表达式来得出相关的上下文URL路径（类似于JSTL中的<c:url>标签）。</c:url></p><p>Thymeleaf模版不像JSP，它是可以编辑甚至可以自然的解析，不需要准备其他任何处理过程。当然，需要Thymeleaf对模版进行处理从而获取到预想的输出。但是不需要做其他特殊的处理，home.html就可以装载到浏览器中，如图所示：</p><p><img src="http://hoxis-github-io.qiniudn.com/160418-spring-in-action-6.6.png" alt="Thymeleaf模版可以像处理HTML文件一样进行解析"></p><p>如上图所示，JSP文件的标签库声明也会显示出来，并且在超链接前面会有一些奇怪的标记。</p><p>相反，Thymeleaf模版解析得比较完美，唯一的不足就是超链接的解析。浏览器没有将<code>th:href</code>解析为<code>href</code>，所有<code>link</code>没有解析为超链接的样式。</p><p>Spring的JSP标签擅长使用绑定，如果摒弃使用JSP，那么该如何使用属性绑定呢？</p><h3 id="使用Thymeleaf进行绑定"><a href="#使用Thymeleaf进行绑定" class="headerlink" title="使用Thymeleaf进行绑定"></a>使用Thymeleaf进行绑定</h3><p>表单绑定是Spring MVC的一个重要特性，没有正确的表单绑定，你就必须保证HTML的表单字段是正确命名的，并且是和后台的对象属性是一一映射的。同时还要保证当验证失败对表单进行展示时属性值可以正确地set到相应的对象属性中去。</p><p>比如registration.jsp中的First Name属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:label</span> <span class="attr">path</span>=<span class="string">"firstName"</span> <span class="attr">cssErrorClass</span>=<span class="string">"error"</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">sf:label</span>&gt;</span>：</span><br><span class="line"><span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"firstName"</span> <span class="attr">cssErrorClass</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里<code>&lt;sf:input&gt;</code>标签会被解析为HTML的<code>&lt;input&gt;</code>标签，并且其value属性会根据后台对象的firstName属性进行设置。同时使用了<code>&lt;sf:label&gt;</code>和cssErrorClass属性用来在出现验证错误时解析该标签。</p><p>但是本节中我们要讨论的是如何在Thymeleaf中使用动态绑定，而不是JSP，比如下面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('firstName')&#125;? 'error'"</span>&gt;</span></span><br><span class="line">    First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span>:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;firstName&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('firstName')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里使用了<code>th:class</code>属性，该属性会被解析为一个<code>class</code>属性，并且其值是使用给定的表达式计算而来。该属性会对firstName值进行检查是否存在校验错误，如果存在，那么class属性解析后就会包含<code>error</code>，如果没有错误，那么class属性就不会进行解析。</p><p><code>&lt;input&gt;</code>标签使用了<code>th:field</code>属性来从后台对象中解析出firstName属性。这里使用了<code>th:field</code>属性与后台对象的firstName属性进行了绑定，这样可以同时得到为firstName设置的value属性和name属性。</p><p>下面的代码中验证了Thymeleaf的数据绑定：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;spitter&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errors"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#fields.hasErrors('*')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"err : $&#123;#fields.errors('*')&#125;"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">th:text</span>=<span class="string">"$&#123;err&#125;"</span>&gt;</span>Input is incorrect<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('firstName')&#125;? 'error'"</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span>: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;firstName&#125;"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('firstName')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('lastName')&#125;? 'error'"</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span>: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;lastName&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('lastName')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('email')&#125;? 'error'"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span>: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;email&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('email')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('username')&#125;? 'error'"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span>: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;username&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('username')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('password')&#125;? 'error'"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span>: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;password&#125;"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">th:class</span>=<span class="string">"$&#123;#fields.hasErrors('password')&#125;? 'error'"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Register"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述代码使用了相同的Thymeleaf属性和<code>*{}</code>表达式来对后台对象进行绑定。值得注意的是，我们在form的顶部使用Thymeleaf来解析所有的异常。<code>&lt;div&gt;</code>元素使用了<code>th:if</code>属性来对是否存在错误进行校验，如果有错误，那么就会对<code>&lt;div&gt;</code>进行解析，否则就不解析。</p><p><code>&lt;div&gt;</code>中的列表是无序的，针对变量err中的每一个error，每个<code>&lt;li&gt;</code>中的<code>th:each</code>会解析为一个<code>&lt;li&gt;</code>标签。<code>&lt;li&gt;</code>标签也有一个<code>th:text</code>属性，该属性会对表达式的值进行计算，并将结果解析到对应的<code>&lt;li&gt;</code>标签中。最终，针对每个error，都会有一个<code>&lt;li&gt;</code>进行展示。</p><p>你也许会对<code>${}</code>和<code>*{}</code>包含的表达式有疑惑。<code>${}</code>表达式是变量表达式，如<code>${spitter}</code>。一般的，都是一些OGNL(Object-Graph Navigation Language，对象图导航语言)表达式，但是当使用Spring时，它们就是SpEL表达式。比如<code>${spitter}</code>会解析为key是spitter的model对象。</p><p>而<code>*{}</code>表达式则是选择表达式，变量表达式根据整个的SpEL上下文进行计算，而选择表达式则是根据指定的对象进行计算。在上述表单中，选中的对象是在<code>&lt;form&gt;</code>标签中根据<code>th:object</code>属性指定的，即来自model的spitter对象，因此，<code>*{password}</code>表达式会被解析为spitter对象的password属性。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对请求的处理仅仅是Spring MVC的一半内容，如果来自控制器的结果准备进行展示，那么所产生的model数据需要解析到views中并在用户的浏览器中进行展示。Spring在试图解析方面是非常灵活的，并且可以提供一些创造性的选项，包括传统的JSP和较为高级的Apache Tile页面引擎。</p><p>本章大致介绍了视图以及Spring提供的视图解析，同时对如何使用JSP和Apache Tile进行了研究，另外还有Thymeleaf。</p><p>不知道是我见识少还是我没怎么关注前端技术，好像还没有见人使用过Tile和Thymeleaf，因此本文翻译过程中显得很单薄，代码也不完善，读完之后只能有一个大体的了解，请见谅。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将model数据展现为HTML&lt;/li&gt;
&lt;li&gt;JSP视图的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前面的章节中，我们主要关注点在于编写控制来处理web请求，同时也创建了一些简单的视图来展现请求返回的model数据，本章我们将主要讨论在控制器完成请求处理之后和将返回结果展示到用户的浏览器之前，这个过程之间发生了什么。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第八章：使用Spring Web Flow</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E4%BD%BF%E7%94%A8Spring%20Web%20Flow.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第八章：使用Spring Web Flow.html</id>
    <published>2019-04-08T13:46:26.521Z</published>
    <updated>2019-04-08T13:46:26.521Z</updated>
    
    <content type="html"><![CDATA[<p>第四版的第八章内容与第三版基本一致。</p><p>本章内容：</p><ul><li>创建会话式web应用程序</li><li>定义流程状态和行为</li><li>保护web流程</li></ul><a id="more"></a><p>互联网的一个奇特之处就在于它很容易让人迷失。有如此多的内容可以查看和阅读，而超链接是其强大魔力的核心所在。</p><p>有时候，web应用程序需要控制web冲浪者的导向，引导他们一步步地访问应用。比如电子商务网站的付款流程，从购物车开始，应用程序会引导你依次经过配送详情、账单信息以及最终的订单确认。</p><p>Spring Web Flow是一个web框架，它适用于元素规定流程运行的程序。本章中，我们将会探索它是如何用于Spring Web框架平台的。</p><p>其实我们可以使用任何的Web框架编写流程化的应用程序，比如使用Struts构建特定的流程。但是这样没有办法将流程与实现分开，你会发现流程的定义分散在组成流程的各个元素中，没有特定的地方能够完整地描述整个流程。</p><p>Spring Web Flow是Spring MVC的扩展，它支持开发基于流程的应用程序，可以将流程的定义和实现流程行为的类和视图分离开来。</p><p>在介绍Spring Web Flow的时候，我们会暂且放下Spittr样例，而使用生产披萨订单的web程序。</p><p>使用的第一步是在项目中进行安装，那么就从安装开始吧。</p><h1 id="在Spring中配置Spring-Web-Flow"><a href="#在Spring中配置Spring-Web-Flow" class="headerlink" title="在Spring中配置Spring Web Flow"></a>在Spring中配置Spring Web Flow</h1><p>Spring Web Flow是基于Spring MVC构建的，这就意味着所有的流程请求都需要经过Spring MVC的<code>DispatcherServlet</code>。我们需要在Spring应用上下文中配置一些Bean来处理流程请求并执行流程。</p><p>现在还没有支持使用Java来配置Spring Web Flow，所以没得选，只能在XML中进行配置。有一些Bean会使用Spring Web Flow的Spring配置文件命名空间来进行声明，因此我们需要在上下文定义XML文件中添加相应的命名空间：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:flow</span>=<span class="string">"http://www.springframework.org/schema/webflow-config"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow-config </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>声明了命名空间后，就可以准备装配Web Flow的Bean了。</p><h2 id="编写流程执行器"><a href="#编写流程执行器" class="headerlink" title="编写流程执行器"></a>编写流程执行器</h2><p>顾名思义，<strong>流程执行器</strong>（flow executor ）就是用来驱动流程的执行。当用户进入到一个流程时，流程执行器会为该用户创建并启动一个流程执行器的实例。当流程暂停时（例如为用户展示视图时），流程执行器会在用户执行操作后恢复流程。</p><p>在Spring中，<code>&lt;flow:flow-executor&gt;</code>元素可以创建一个流程执行器：<br><code>&lt;flow:flow-executor id=&quot;flowExecutor&quot; /&gt;</code></p><p>尽管流程执行器负责创建和执行流程，但它并不负责加载流程定义。这个要由流程注册表（flow registry）负责，下面会创建它。</p><h2 id="配置流程注册表"><a href="#配置流程注册表" class="headerlink" title="配置流程注册表"></a>配置流程注册表</h2><p>流程注册表的工作就是加载流程定义，并让流程执行器可以使用它们。可以在Spring中使用<code>&lt;flow:flow-registry&gt;</code>进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">flow:flow-registry</span> <span class="attr">id</span>=<span class="string">"flowRegistry"</span> <span class="attr">base-path</span>=<span class="string">"/WEB-INF/flows"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow:flow-location-pattern</span> <span class="attr">value</span>=<span class="string">"/**/*-flow.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow:flow-registry</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>正如这里声明的，流程注册表会在<code>/WEB-INF/flows</code>目录下寻找流程定义，这个路径是由<code>base-path</code>属性指明的。根据<code>&lt;flow:flow-location-pattern&gt;</code>元素，任何以<code>-flow.xml</code>结尾的XML文件都会被视为流程定义。</p><p>所有的流程都是通过其ID来进行引用的。使用<code>&lt;flow:flow-location-pattern&gt;</code>元素，流程的ID就是相对于<code>base-path</code>的路径，或者是双星号所代表的路径，如下图展示了流程ID是如何计算的：<br><img src="http://hoxis-github-io.qiniudn.com/160510-spring-in-action-8.1.png" alt="在使用流程定位模式时，流程定义文件相对于基本路径的路径将用作流程的id"></p><p>另外，你也可以不使用<code>base-path</code>属性，直接显式地声明流程定义文件的位置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">flow:flow-registry</span> <span class="attr">id</span>=<span class="string">"flowRegistry"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">flow:flow-location</span> <span class="attr">path</span>=<span class="string">"/WEB-INF/flows/springpizza.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow:flow-registry</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里使用了<code>&lt;flow:flow-location&gt;</code>而不是<code>&lt;flow:flow-location-pattern&gt;</code>，<code>path</code>属性直接指定了<code>/WEB-INF/flows/springpizza.xml</code>为流程定义文件。当这样定义时，流程的ID是从流程定义文件的文件名中获取的，这就是<code>springpizza</code>。</p><p>如果你希望更显示地指定流程ID，那么可以通过<code>&lt;flow:flow-location&gt;</code>元素的id属性来进行设置。例如，要设定pizza作为流程ID，可以这样进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">flow:flow-registry</span> <span class="attr">id</span>=<span class="string">"flowRegistry"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">flow:flow-location</span> <span class="attr">id</span>=<span class="string">"pizza"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"/WEB-INF/flows/springpizza.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow:flow-registry</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="处理流程请求"><a href="#处理流程请求" class="headerlink" title="处理流程请求"></a>处理流程请求</h2><p>正如前面的章节中提到的，<code>DispatcherServlet</code>会将请求分发给控制器，但是对于流程而言，你需要<code>FlowHandlerMapping</code>来帮助<code>DispatcherServlet</code>将流程请求发送给Spring Web Flow。<code>FlowHandlerMapping</code>的配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.webflow.mvc.servlet.FlowHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"flowRegistry"</span> <span class="attr">ref</span>=<span class="string">"flowRegistry"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>FlowHandlerMapping</code>装配了注册表的引用，这样它就知道如何将请求的URL匹配到流程上。例如，如果有一个ID为pizza的流程，<code>FlowHandlerMapping</code>就会知道如果请求的URL是<code>/pizza</code>的话，就会将其匹配到这个流程上。</p><p>然而，<code>FlowHandlerMapping</code>的工作仅仅是将流程请求定向到Spring Web Flow，响应请求的是<code>FlowHandlerAdapter</code>，它等同于Spring MVC的控制器，会对流程请求进行响应并处理。<code>FlowHandlerAdapter</code>可以像下面这样装配成一个Spring Bean：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.webflow.mvc.servlet.FlowHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"flowExecutor"</span> <span class="attr">ref</span>=<span class="string">"flowExecutor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个处理适配器就是<code>DispatcherServlet</code>和Spring Web Flow之间的桥梁。它会处理流程请求并管理基于这些请求的流程。在这里，它装配了流程执行器的引用，而后者是为请求执行流程的。</p><p>现在已经配置了Spring Web Flow所需的Bean和组件，下面所需的就是真正的定义流程了。首先了解下流程的组成元素。</p><h1 id="流程组件"><a href="#流程组件" class="headerlink" title="流程组件"></a>流程组件</h1><p>在Spring Web Flow中，流程是由3个主要元素组成的：<strong>状态</strong>（state）、<strong>转移</strong>（transition）和<strong>流程数据</strong>（flow data）。<code>状态</code>是流程中事件发生的地点。如果将流程想象成公路旅行，那么状态就是路途上的城镇、路边饭店以及风景点等。<strong>流程中的状态是业务逻辑执行、做出决策或将页面展示给用户的地方</strong>，而不是在公路旅行中买薯片或者可乐这些行为。</p><p>如果说流程状态是公路上停下来的地点，那么<strong>转移</strong>就是连接这些点的公路。在流程上，需要通过转移从一个状态到达另一个状态。</p><p>在城镇间旅行的时候，可能需要购买一些纪念品、留下一下回忆。类似的，在流程处理过程中，它要收集一些数据：流程当前状况等。也许你很想将其称为流程的状态，但是我们定义的状态已经有了另外的含义。</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>Spring Web Flow定义了5种不同的状态，如下表所示。通过选择Spring Web Flow的状态几乎可以把任意的安排功能构造成会话式的Web应用程序。尽管并不是所有的流程都需要下表中的状态，但最终你可能会经常使用其中几个。</p><table><thead><tr><th>状态类型</th><th>作用</th></tr></thead><tbody><tr><td>行为（Action）</td><td>流程逻辑发生的地方</td></tr><tr><td>决策（Decision）</td><td>决策状态将流程分为两个方向，它会基于流程数据的评估结果确定流程方向</td></tr><tr><td>结束（End）</td><td>结束状态是流程的最后一站，进入End状态，流程就会终止</td></tr><tr><td>子流程（Subflow）</td><td>子流程状态会在当前正在运行的流程上下文中启动一个新的流程</td></tr><tr><td>视图（View）</td><td>视图状态会暂停流程并邀请用户参与流程</td></tr></tbody></table><p>首先了解下这些流程元素在Spring Web Flow定义中是如何表现的。</p><h3 id="视图状态"><a href="#视图状态" class="headerlink" title="视图状态"></a>视图状态</h3><p>视图状态用来为用户展现信息并使用户在流程中发挥作用。实际的视图实现可以是Spring支持的任意视图类型，但通常是用JSP来实现的。</p><p>在流程定义文件中，<code>&lt;view-state&gt;</code>用来定义视图状态：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"welcome"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这个简单的示例中，id属性有两个含义。其一，它定义了流程中的状态。其二，因为这里没有其他地方指定视图，那么它就指定了流程到达这个状态时要展现的逻辑视图名称为welcome。</p><p>如果要显示地指定另外一个视图名称，那么就可以使用<code>view</code>属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"welcome"</span> <span class="attr">view</span>=<span class="string">"greeting"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果流程为用户展现了一个表单，你希望指定表单所绑定的对象，可以使用<code>model</code>属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"takePayment"</span> <span class="attr">model</span>=<span class="string">"flowScope.paymentDetails"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里指定了takePayment视图将绑定流程范围内的paymentDetails对象。</p><h3 id="行为状态"><a href="#行为状态" class="headerlink" title="行为状态"></a>行为状态</h3><p>视图状态包括流程应用的用户，而行为状态则是应用程序自身在执行任务。行为状态一般会触发Spring所管理Bean的一些方法，并跟你讲方法调用的执行结果转移到另一个状态。</p><p>在流程定义文件中，行为状态使用<code>&lt;action-state&gt;</code>元素来声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action-state</span> <span class="attr">id</span>=<span class="string">"saveOrder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">expression</span>=<span class="string">"pizzaFlowActions.saveOrder(order)"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"thankYou"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action-state</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>尽管没有严格要求，但是<code>&lt;action-state&gt;</code>元素一般都有一个<code>&lt;evaluate&gt;</code>子元素，该元素给出了行为状态要做的事情，<code>expression</code>属性指定了进入这个状态时要评估的表达式。本例中，给出的是SpEL表达式，这表明它将会找到ID为pizzaFlowActions的Bean，并调用其saveOrder()方法。</p><h3 id="决策状态"><a href="#决策状态" class="headerlink" title="决策状态"></a>决策状态</h3><p>流程有可能会按照线性执行下去，从一个状态到另一个状态，没有其他的替代路线。但是更常见的是流程在某一个点根据流程当前情况进入不同的分支。</p><p>决策状态能够使得在流程执行时产生两个分支，它会评估一个Boolean表达式，根据结果是true还是false在两个状态转移中选择一个。在流程定义文件中，使用<code>&lt;decision-state&gt;</code>元素来定义决策状态：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">decision-state</span> <span class="attr">id</span>=<span class="string">"checkDeliveryArea"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pizzaFlowActions.checkDeliveryArea(customer.zipCode)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">then</span>=<span class="string">"addCustomer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">else</span>=<span class="string">"deliveryWarning"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">decision-state</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;decision-state&gt;</code>并不是单独工作的，<code>&lt;if&gt;</code>元素是其核心，它是进行表达式评估的地方，如果表达式结果为true，流程会转向<code>then</code>属性指定的状态，为false会转向<code>else</code>指定的状态中。</p><h3 id="子流程状态"><a href="#子流程状态" class="headerlink" title="子流程状态"></a>子流程状态</h3><p>也许你不会将应用程序的所有逻辑都写在一个方法里，而是将其分散到多个类、方法一起其他结构中。</p><p>同样的，将流程分成独立的部分也是个不错的主意。<code>&lt;subflow-state&gt;</code>元素允许在一个正在执行的流程中调用另一个流程：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">subflow-state</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">subflow</span>=<span class="string">"pizza/order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"order"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"orderCreated"</span> <span class="attr">to</span>=<span class="string">"payment"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">subflow-state</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里，<code>&lt;input&gt;</code>元素作为子流程的输入被用于传递订单对象。如果子流程结束的<code>&lt;end-state&gt;</code>状态ID为orderCreated，那么本流程就会转移到ID为payment的状态。</p><h3 id="结束状态"><a href="#结束状态" class="headerlink" title="结束状态"></a>结束状态</h3><p>最后，所有的流程都要结束。这就是流程转移到结束状态时所做的。<code>&lt;end-state&gt;</code>元素指定了流程的结束：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"customerReady"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>当流程到达<code>&lt;end-state&gt;</code>时，流程就会结束。接下来发生什么要取决于以下几个因素：</p><ul><li>如果结束的流程是个子流程，那么调用它的流程将会从<code>&lt;subflow-state&gt;</code>处继续执行。<code>&lt;end-state&gt;</code>的ID将会用作时间触发从<code>&lt;subflow-state&gt;</code>开始的转移。</li><li>如果<code>&lt;end-state&gt;</code>设置了view属性，那么就会渲染指定的视图。视图可以是相对于流程的路径，也可以是流程模板，使用<code>externalRedirect:</code>前缀的会重定向到流程外部的页面，而使用<code>flowRedirect:</code>前缀的则会重定向到另外一个流程。</li><li>如果结束的流程不是子流程也没有配置view属性，那么这个流程就会结束。浏览器最后将会加载流程的基本URL地址，同时，因为没有活动的流程，所以会开始一个新的流程实例。</li></ul><p>需要注意的是一个流程可能有多个结束状态。因为子流程的结束状态ID确定了激活的事件，所以也许你会希望以多种结束状态来结束子流程，从而能够在调用流程中触发不同的事件，即使不是在子流程中，也有可能在结束流程后，根据流程的执行情况有多个显示页面供选择。</p><p>下面看一下流程是如何在状态间迁移的，如何在流程中通过定义转移来完成道路铺设。</p><h2 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h2><p>如前文所述，转移连接了流程中的状态。流程中除结束状态外的每个状态，至少需要一个转移，这样就知道在状态完成时的走向。一个状态也许有多个转移，分别表示当前状态结束时可以执行的不同路径。</p><p>转移是通过<code>&lt;transition&gt;</code>元素来定义的，作为其他状态元素（<code>&lt;action-state&gt;</code>、<code>&lt;view-state&gt;</code>和<code>&lt;subflow-state&gt;</code>）的子元素。最简单的形式就是<code>&lt;transition&gt;</code>元素在流程中指定下一个状态：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"customerReady"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>属性<code>to</code>用于指定流程中的下一个状态。如果<code>&lt;transition&gt;</code>元素只使用了<code>to</code>属性，那么这个转移就会是当前状态的默认转移选项，如果没有其他可用转移的话，就会使用它。</p><p>更为常见的转移定义是基于事件的触发来进行的。在视图状态，事件通常会是用户采取的动作。在行为状态，事件是评估表达式得到的结果。而在子流程状态，事件取决于子流程结束状态的ID。在任意事件中，你可以使用<code>on</code>属性来指定触发转移的事件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"phoneEntered"</span> <span class="attr">to</span>=<span class="string">"lookupCustomer"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>在示例中，如果触发了phoneEntered事件流程，就会进入lookupCustomer状态。</p><p>在抛出异常时，流程也可能进入另一种状态。例如，如果没有找到顾客的记录，你可能希望流程转移到一个显示注册表单的视图状态，如下面：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on-exception</span>=<span class="string">"com.springinaction.pizza.service.CustomerNotFoundException"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">to</span>=<span class="string">"registrationForm"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>属性<code>on-exception</code>和属性<code>on</code>十分类似，它是指定了要发生转移的异常而不是一个事件。</p><h3 id="全局转移"><a href="#全局转移" class="headerlink" title="全局转移"></a>全局转移</h3><p>在创建完流程后，也许你会发现有些状态使用了一些通用的转移。例如在整个流程中到处都有如下转移：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"endState"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>与其在多个流程状态中重复通用的转移，不如将其作为<code>&lt;globaltransitions&gt;</code>的子元素，从而作为<strong>全局转移</strong>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-transitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"endState"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-transitions</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>定义完全局转移，流程中所有的状态都会默认拥有这个cancel转移。</p><h2 id="流程数据"><a href="#流程数据" class="headerlink" title="流程数据"></a>流程数据</h2><p>当流程从一个状态到达另一个状态时，它会带走一些数据。有时这些数据很快就会被使用，比如直接展示给用户，有时这些数据需要在整个流程中传递并在流程结束时使用。</p><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>流程数据是保存在变量中的，而变量可以在流程的任意位置进行引用，并且可以以多种方式进行创建。其中最简单的方式就是使用<code>&lt;var&gt;</code>元素：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">var</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.pizza.domain.Customer"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里创建了一个新的Customer实例并将其放在customer变量中，这个变量可以在流程的任意状态下进行访问使用。</p><p>作为行为状态的一部分或者说作为视图状态的入口，也可以使用<code>&lt;evaluate&gt;</code>元素来创建变量：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">result</span>=<span class="string">"viewScope.toppingsList"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">expression</span>=<span class="string">"T(com.springinaction.pizza.domain.Topping).asList()"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里<code>&lt;evaluate&gt;</code>元素计算了一个SpEL表达式，并将结果放到toppingsList变量中，这个变量是视图作用域的。</p><p>类似的，<code>&lt;set&gt;</code>元素也可以设置变量的值：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"flowScope.pizza"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"new com.springinaction.pizza.domain.Pizza()"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;set&gt;</code>元素与<code>&lt;evaluate&gt;</code>元素类似，都是讲变量设置为表达式计算的结果。这里我们设置了一个流程范围的pizza变量，它的值为Pizza对象的新实例。</p><h3 id="流程数据的作用域"><a href="#流程数据的作用域" class="headerlink" title="流程数据的作用域"></a>流程数据的作用域</h3><p>流程中所携带的数据都有其各自的生命周期，这取决于保存数据的变量本身的作用域，如下表：</p><table><thead><tr><th>范围</th><th>生命周期</th></tr></thead><tbody><tr><td>Conversation</td><td>最高层级的流程开始时创建，在最高层级的流程结束时销毁。由最高层级的流程和其所有的子流程所共享</td></tr><tr><td>Flow</td><td>当流程开始时创建，在流程结束时销毁。只在创建它的流程中是可见的</td></tr><tr><td>Request</td><td>当一个请求进入流程时创建，流程返回时销毁</td></tr><tr><td>Flash</td><td>流程开始时创建，流程结束时销毁。在视图状态解析后，才会被清除</td></tr><tr><td>View</td><td>进入视图状态时创建，退出这个状态时销毁，只在视图状态内可见</td></tr></tbody></table><p>当使用<code>&lt;var&gt;</code>元素声明变量时，变量始终是流程作用域的，也就是在流程作用域内定义变量。当使用<code>&lt;set&gt;</code>或<code>&lt;evaluate&gt;</code>时，作用域通过name或result属性的前缀指定。例如，将一个值赋给流程作用域的theAnswer变量：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"flowScope.theAnswer"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>到目前为止，我们已经看到了Web流程的所有原材料，下面要将其进行整合了，完成一个完整的流程。</p><h1 id="组合起来：披萨流程"><a href="#组合起来：披萨流程" class="headerlink" title="组合起来：披萨流程"></a>组合起来：披萨流程</h1><p>首先从构建一个高层次的流程开始，它定义了订购披萨的整体流程，然后将其拆分为多个子流程。</p><h2 id="定义基本流程"><a href="#定义基本流程" class="headerlink" title="定义基本流程"></a>定义基本流程</h2><p>当顾客访问Spizza网站时，他们需要进行用户识别、选择一个或多个披萨添加到订单、提供支付信息，然后提交订单，等待披萨上来，如下图：<br><img src="http://hoxis-github-io.qiniudn.com/160512-spring-in-action-8.2.png" alt="网上购买披萨的流程"></p><p>下面展示Spring Web Flow的XML流程定义来实现披萨订单的整体流程：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/webflow"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/webflow/spring-webflow-2.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.pizza.domain.Order"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用顾客子流程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">subflow-state</span> <span class="attr">id</span>=<span class="string">"identifyCustomer"</span> <span class="attr">subflow</span>=<span class="string">"pizza/customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">value</span>=<span class="string">"order.customer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"customerReady"</span> <span class="attr">to</span>=<span class="string">"buildOrder"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">subflow-state</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用订单子流程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">subflow-state</span> <span class="attr">id</span>=<span class="string">"buildOrder"</span> <span class="attr">subflow</span>=<span class="string">"pizza/order"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"order"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"orderCreated"</span> <span class="attr">to</span>=<span class="string">"takePayment"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">subflow-state</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用支付子流程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">subflow-state</span> <span class="attr">id</span>=<span class="string">"takePayment"</span> <span class="attr">subflow</span>=<span class="string">"pizza/payment"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"order"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"paymentTaken"</span> <span class="attr">to</span>=<span class="string">"saveOrder"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">subflow-state</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 保存订单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action-state</span> <span class="attr">id</span>=<span class="string">"saveOrder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">expression</span>=<span class="string">"pizzaFlowActions.saveOrder(order)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"thankCustomer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action-state</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 感谢顾客 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"thankCustomer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"endState"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"endState"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全局取消转移 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-transitions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"endState"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-transitions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>流程定义中的第一件事就是声明order变量。每次流程开始的时候都会创建一个Order实例。Order类会包含关于订单的所有信息、顾客信息、订购的披萨以及支付信息等。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.pizza.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configurable</span>(<span class="string">"order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   <span class="keyword">private</span> Customer customer;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Pizza&gt; pizzas;</span><br><span class="line">   <span class="keyword">private</span> Payment payment;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      pizzas = <span class="keyword">new</span> ArrayList&lt;Pizza&gt;();</span><br><span class="line">      customer = <span class="keyword">new</span> Customer();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//getters and setters</span></span><br><span class="line">&#125;   </span><br><span class="line">```   </span><br><span class="line">流程定义的主要组成部分是流程的状态，默认情况下，流程定义文件中的第一个状态会是流程访问的第一个状态。本例中就是identifyCustomer状态（一个子流程）。也可以通过`&lt;flow&gt;`元素的`start-state`属性来指定任意状态为开始状态：</span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;flow xmlns=<span class="string">"http://www.springframework.org/schema/webflow"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/webflow</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/webflow/spring-webflow-2.3.xsd"</span></span><br><span class="line">    start-state=<span class="string">"identifyCustomer"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/flow&gt;</span><br></pre></td></tr></table></figure></p><p>识别顾客、构建披萨订单和支付这样的活动比较复杂，并不适合将其直接放在一个状态，而是以<code>&lt;subflow-state&gt;</code>元素展现的。</p><p>流程变量order将在前3个状态中进行填充并在第4个状态中进行保存。identifyCustomer子流程使用了<code>&lt;output&gt;</code>元素来填充order的customer属性，将其设置为调用顾客子流程收到的输出。buildOrder和takePayment状态使用了不同的方式，它们使用<code>&lt;input&gt;</code>将order流程变量作为输入，这些子流程就能在其内部填充order对象。</p><p>在订单得到顾客、披萨以及支付信息后，就可以对其进行保存。saveOrder是处理这个任务的行为状态。它使用<code>&lt;evaluate&gt;</code>来调用ID为pizzaFlowActions的Bean的saveOrder()方法，并将保存的订单对象传递进来。订单完成保存后会转移到thankCustomer。</p><p>thankCustomer状态是一个简单的视图状态，后台使用了<code>/WEB-INF/flows/pizza/thankCustomer.jsp</code>文件进行展示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:jsp</span>=<span class="string">"http://java.sun.com/JSP/Page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:output</span> <span class="attr">omit-xml-declaration</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:directive.page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spizza<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Thank you for your order!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        &lt;a href='$&#123;flowExecutionUrl&#125;&amp;_eventId=finished'&gt;Finish&lt;/a&gt;</span><br><span class="line">        ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>该页面提供了一个完成流程的链接，它展示了用户与流程交互的唯一办法。</p><p>Spring Web Flow为视图的用户提供了一个flowExecutionUrl变量，它包含了流程的URL。结束链接将一个_eventId参数关联到URL上，以便返回到Web流程时触发finished事件。这个事件将会使流程到达结束状态。</p><p>流程将会在结束状态完成。由于在流程结束后没有下一步做什么具体信息，流程将会重新从identifyCustomer状态开始，以准备接受下一个订单。</p><p>下面还要定义identifyCustomer、buildOrder、takePayment这些子流程。</p><h2 id="收集顾客信息"><a href="#收集顾客信息" class="headerlink" title="收集顾客信息"></a>收集顾客信息</h2><p>对于一个顾客，需要收集其电话、住址等信息，如下面的流程图：<br><img src="http://hoxis-github-io.qiniudn.com/160512-spring-in-action-8.3.png" alt="识别顾客流程"></p><p>这个流程不再是线性的，而是有了分支。例如在查找顾客后，流程可能结束，也可能转到注册表单。同样的，在checkDeliveryArea状态，顾客可能会被告警，也可能是不被告警。</p><p>程序清单：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/webflow"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Customer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"welcome"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"phoneEntered"</span> <span class="attr">to</span>=<span class="string">"lookupCustomer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action-state</span> <span class="attr">id</span>=<span class="string">"lookupCustomer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">result</span>=<span class="string">"order.customer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"pizzaFlowActions.lookupCustomer(requestParameters.phoneNumber)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"registrationForm"</span></span></span><br><span class="line"><span class="tag"><span class="attr">on-exception</span>=<span class="string">"com.springinaction.pizza.service.CustomerNotFoundException"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"customerReady"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"registrationForm"</span> <span class="attr">model</span>=<span class="string">"order"</span> <span class="attr">popup</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"order.customer.phoneNumber = requestParameters.phoneNumber"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">on-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"submit"</span> <span class="attr">to</span>=<span class="string">"checkDeliveryArea"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">decision-state</span> <span class="attr">id</span>=<span class="string">"checkDeliveryArea"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pizzaFlowActions.checkDeliveryArea(order.customer.zipCode)"</span></span></span><br><span class="line"><span class="tag"><span class="attr">then</span>=<span class="string">"addCustomer"</span> <span class="attr">else</span>=<span class="string">"deliveryWarning"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">decision-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"deliveryWarning"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"accept"</span> <span class="attr">to</span>=<span class="string">"addCustomer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action-state</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">expression</span>=<span class="string">"pizzaFlowActions.addCustomer(order.customer)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"customerReady"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- End state --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"customerReady"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面将这个流程定义分解成一个个的状态。</p><h3 id="询问电话号码"><a href="#询问电话号码" class="headerlink" title="询问电话号码"></a>询问电话号码</h3><p>welcome状态是一个很简单的视图状态，它欢迎访问Spizza网站的顾客并要求输入电话。它有两个转移：如果从视图触发phoneEntered事件，就会定向到lookupCustomer，另外一个就是在全局转移中定义用来响应cancel事件的cancel转移。</p><p>页面代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"form"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Pizza<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to Spring Pizza!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_flowExecutionKey"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;flowExecutionKey&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phoneNumber"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"_eventId_phoneEntered"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"Lookup Customer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个简单的表单用来让用户输入电话号码，有两个特殊的部分，首先是隐藏的<code>_flowExecutionKey</code>输入。当进入视图状态时，流程暂停并等待用户采取一些行为。当用户提交表单时，流程执行键会在_flowExecutionKey输入域中返回，并在流程暂停的位置进行恢复。</p><p>还需要注意提交按钮的名称<code>_eventId_</code>部分是Spring Web Flow的一个线索，它表明了接下来要触发事件。当点击这个按钮提交表单时，就会触发phoneEntered事件，进而转移到lookupCustomer。</p><h3 id="查找顾客"><a href="#查找顾客" class="headerlink" title="查找顾客"></a>查找顾客</h3><p>当欢迎顾客的表单提交后，顾客的电话号码将包含在请求参数中，并用于查询顾客。lookupCustomer状态的<code>&lt;evaluate&gt;</code>元素是查找发生的位置。它将电话号码从请求参数中抽取出来，并传递到pizzaFlowActions Bean的lookupCustomer()方法中。该方法要么返回Customer对象，要么抛出CustomerNotFoundException异常。</p><p>在前一种情况下，Customer对象会被设置到customer变量中（通过<code>result</code>属性）并默认的转移将流程带到customerReady状态。如果没有查到顾客，那么会抛出异常，流程会转移到registrationForm状态。</p><h3 id="注册新顾客"><a href="#注册新顾客" class="headerlink" title="注册新顾客"></a>注册新顾客</h3><p>registrationForm要求用户填写配送地址：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"form"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Pizza<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Customer Registration<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form:form</span> <span class="attr">commandName</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_flowExecutionKey"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">"$&#123;flowExecutionKey&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>Phone number: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.phoneNumber"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>Address: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.address"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>City: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.city"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>State: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.state"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>Zip Code: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">form:input</span> <span class="attr">path</span>=<span class="string">"customer.zipCode"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"_eventId_submit"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"_eventId_cancel"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">"Cancel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>该表单绑定到了Order.customer对象上。</p><h3 id="检查配送区域"><a href="#检查配送区域" class="headerlink" title="检查配送区域"></a>检查配送区域</h3><p>顾客提供了地址后，需要确认住址是否在配送范围内，因此使用了决策状态。</p><p>决策状态checkDeliveryArea有一个<code>&lt;if&gt;</code>元素，它将顾客的邮编传递到pizzaFlowActions Bean的checkDeliveryArea()方法中，该方法会返回一个Boolean值。</p><p>如果顾客在配送范围内，那么流程将转移到addCustomer状态，否则进入deliveryWarning视图状态。deliveryWarnin视图：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Pizza<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Delivery Unavailable<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The address is outside of our delivery area. The order</span><br><span class="line">may still be taken for carry-out.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;flowExecutionUrl&#125;&amp;_eventId=accept"</span>&gt;</span>Accept<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;flowExecutionUrl&#125;&amp;_eventId=cancel"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中有两个链接，允许用户继续订单或者取消订单。通过使用与welcome状态相同的flowExecutionUrl变量，这些链接分别触发流程中的accept和cancel事件。如果发送的是accept事件，那么流程会转移到addCustomer状态。否则，子流程会转移到cancel状态。</p><h3 id="存储顾客数据"><a href="#存储顾客数据" class="headerlink" title="存储顾客数据"></a>存储顾客数据</h3><p>addCustomer有一个<code>&lt;evaluate&gt;</code>元素，它会调用pizzaFlowActions.addCustomer()方法，将order.customer流程参数传递进去。</p><p>一旦这个流程完成，就会执行默认转移，流程会转移到ID为customerReady的结束状态。</p><h3 id="结束流程"><a href="#结束流程" class="headerlink" title="结束流程"></a>结束流程</h3><p>当customer流程完成所有的路径后，会到达customerReady的结束状态。当调用它的披萨流程恢复时，它会接收到一个customerReady事件，这个事件将使得流程转移到buildOrder状态。</p><p>注意，customerReady结束状态包含了一个<code>&lt;output&gt;</code>元素。在流程中，它等同于Java的<code>return</code>语句。它会从子流程中传递一些数据到调用流程。例如，<code>&lt;output&gt;</code>元素返回customer变量，这样披萨流程中的identifyCustomer子流程状态就可以将其指定给订单。</p><p>另外，如果用户在任意地方触发了cancel事件，将会通过cancel状态结束流程，这也会在披萨流程中触发cancel事件并导致转移到披萨流程的结束状态。</p><h2 id="构建订单"><a href="#构建订单" class="headerlink" title="构建订单"></a>构建订单</h2><p>下面就是确定顾客想要什么样的披萨，提示用户创建披萨并将其放入订单，如图：<br><img src="http://hoxis-github-io.qiniudn.com/160512-spring-in-action-8.4.png" alt="通过订单子流程添加披萨"></p><p>可以看到，showOrder状态位于订单子流程的中心位置。这是用户进入这个流程时的状态，也是用户添加披萨订单后转移的目标状态。它展现了订单的当前状态，并允许用户添加其他的披萨到订单中。</p><p>添加披萨订单时，会转移到createPizza状态。这是一个视图状态，允许用户对披萨进行选择。</p><p>在showOrder状态，用户可以提交订单，也可以取消。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/webflow"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Order --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"showOrder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"createPizza"</span> <span class="attr">to</span>=<span class="string">"createPizza"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"checkout"</span> <span class="attr">to</span>=<span class="string">"orderCreated"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"createPizza"</span> <span class="attr">model</span>=<span class="string">"flowScope.pizza"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">on-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"flowScope.pizza"</span> <span class="attr">value</span>=<span class="string">"new com.springinaction.pizza.domain.Pizza()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">result</span>=<span class="string">"viewScope.toppingsList"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"T(com.springinaction.pizza.domain.Topping).asList()"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">on-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"addPizza"</span> <span class="attr">to</span>=<span class="string">"showOrder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">expression</span>=<span class="string">"order.addPizza(flowScope.pizza)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"showOrder"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- End state --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"orderCreated"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个子流程实际上回操作主流程创建的Order对象，在这里我们使用<code>&lt;input&gt;</code>元素来将Order对象传递进流程。</p><p>接下来会看到showOrder状态，它是一个基本的视图状态，具有3个不同的转移，分别用于创建披萨、提交订单和取消订单。</p><p>createPizza的视图是一个表单，这个表单可以添加新的Pizza对象到订单。<code>&lt;on-entry&gt;</code>元素添加了一个新的Pizza对象到流程作用域内，当表单提交时它将填充进订单。值得注意的是，这个视图状态引用的model是流程作用域同一个Pizza对象。Pizza对象将绑定到创建披萨的表单中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"form"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Create Pizza<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form:form</span> <span class="attr">commandName</span>=<span class="string">"pizza"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_flowExecutionKey"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">"$&#123;flowExecutionKey&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>Size: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">label</span>=<span class="string">"Small (12-inch)"</span> <span class="attr">value</span>=<span class="string">"SMALL"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">label</span>=<span class="string">"Medium (14-inch)"</span> <span class="attr">value</span>=<span class="string">"MEDIUM"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">label</span>=<span class="string">"Large (16-inch)"</span> <span class="attr">value</span>=<span class="string">"LARGE"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form:radiobutton</span> <span class="attr">path</span>=<span class="string">"size"</span> <span class="attr">label</span>=<span class="string">"Ginormous (20-inch)"</span> <span class="attr">value</span>=<span class="string">"GINORMOUS"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>Toppings: <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form:checkboxes</span> <span class="attr">path</span>=<span class="string">"toppings"</span> <span class="attr">items</span>=<span class="string">"$&#123;toppingsList&#125;"</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">delimiter</span>=<span class="string">"&lt;br/&gt;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"button"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"_eventId_addPizza"</span> <span class="attr">value</span>=<span class="string">"Continue"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"button"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"_eventId_cancel"</span> <span class="attr">value</span>=<span class="string">"Cancel"</span>/&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当通过Continue按钮提交订单时，尺寸和配料选择会绑定到Pizza对象中，并且触发<code>addPizza</code>转移。与这个转移关联的<code>&lt;evaluate&gt;</code>元素表明在转移到showOrder状态之前，流程作用域内的Pizza对象会传递给订单的addPizza()方法中。</p><p>有两种方法可以结束流程，用户可以点击showOrder视图中的Cancel按钮或者Checkout按钮。这两种操作都会使流程转移到一个<code>&lt;end-state&gt;</code>。但是选择的结束状态ID决定了退出这个流程时触发事件，进而最终确定主流程的下一个行为。主流程要么基于cancel要么基于orderCreated事件进行状态转移。在前者情况下，外边的流程会结束；后者，会转移到takePayment子流程。</p><h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><p>在披萨流程要结束的时候，最后的子流程提示用户输入他们的支付信息，如下图：</p><p><img src="http://hoxis-github-io.qiniudn.com/160530-spring-in-action-8.5.png" alt="支付子流程"></p><p>支付子流程也是使用<code>&lt;input&gt;</code>元素接收一个Order对象作为输入。</p><p>可以看到，进入支付子流程的时候，用户会到达takePayment状态。这是一个视图状态，在这里用户可以选择信用卡、支票或者现金进行支付。提示支付信息后，进入verifyPayment状态，这是一个行为状态，会校验支付信息是否可以接受。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/webflow"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"takePayment"</span> <span class="attr">model</span>=<span class="string">"flowScope.paymentDetails"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">on-entry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"flowScope.paymentDetails"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"new com.springinaction.pizza.domain.PaymentDetails()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">result</span>=<span class="string">"viewScope.paymentTypeList"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">expression</span>=<span class="string">"T(com.springinaction.pizza.domain.PaymentType).asList()"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">on-entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"paymentSubmitted"</span> <span class="attr">to</span>=<span class="string">"verifyPayment"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">on</span>=<span class="string">"cancel"</span> <span class="attr">to</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">action-state</span> <span class="attr">id</span>=<span class="string">"verifyPayment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">evaluate</span> <span class="attr">result</span>=<span class="string">"order.payment"</span> <span class="attr">expression</span>=</span></span><br><span class="line"><span class="tag">            "<span class="attr">pizzaFlowActions.verifyPayment</span>(<span class="attr">flowScope.paymentDetails</span>)" /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">to</span>=<span class="string">"paymentTaken"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action-state</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">&lt;!-- End state --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"cancel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">end-state</span> <span class="attr">id</span>=<span class="string">"paymentTaken"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在流程进入takePayment视图时，<code>&lt;on-entry&gt;</code>元素将构建一个支付表单并使用SpEL表达式在流程范围内创建PaymentDetails实例，该实例实际上是表单背后的对象。它也会创建视图作用域的paymentDetails变量，这个变量是一个包含了<code>PaymentType</code> enum的值的列表。在这里，SpEL的<code>T()</code>作用于PaymentType类，这样就可以调用静态的asList()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.pizza.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.text.WordUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PaymentType &#123;</span><br><span class="line">CASH, CHECK, CREDIT_CARD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;PaymentType&gt; <span class="title">asList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">PaymentType[] all = PaymentType.values();</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(all);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> WordUtils.capitalizeFully(name().replace(<span class="string">'_'</span>, <span class="string">' '</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面对支付表单的时候，用户可能提交支付，也可能会取消。根据做出的选择，支付子流程将名为paymentTaken或cancel的<code>&lt;end-state&gt;</code>结束。就像其他的子流程一样，不论哪种<code>&lt;end-state&gt;</code>都会结束子流程并将控制交给主流程。但是所采用的id将决定主流程接下来的转移。</p><p>目前我们已经依次介绍了披萨流程及其子流程，下面快速了解下如何对流程及其状态的访问增加安全保护。</p><h1 id="保护Web流程"><a href="#保护Web流程" class="headerlink" title="保护Web流程"></a>保护Web流程</h1><p>Spring Web Flow中的状态、转移甚至整个流程都可以借助<code>&lt;secured&gt;</code>元素实现安全性，该元素会作为这些元素的子元素。例如，为了保护对一个视图状态的访问：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-state</span> <span class="attr">id</span>=<span class="string">"restricted"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">secured</span> <span class="attr">attributes</span>=<span class="string">"ROLE_ADMIN"</span> <span class="attr">match</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view-state</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>按照这里的配置，只有授权<code>ROLE_ADMIN</code>访问权限（借助attributes属性）的用户才能访问这个视图状态。attributes属性使用逗号分隔的权限列表来表明用户要访问指定状态、转移或流程所需要的权限。match属性可以设置为any或all。如果是any，那么用户至上具备一个attributes属性所列的权限。如果的all，那么用户必须具有所有权限。具体见下一章。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四版的第八章内容与第三版基本一致。&lt;/p&gt;
&lt;p&gt;本章内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建会话式web应用程序&lt;/li&gt;
&lt;li&gt;定义流程状态和行为&lt;/li&gt;
&lt;li&gt;保护web流程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第二章：装配Bean</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%85%8DBean.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第二章：装配Bean.html</id>
    <published>2019-04-08T13:46:26.520Z</published>
    <updated>2019-04-08T13:46:26.520Z</updated>
    
    <content type="html"><![CDATA[<p>创建应用对象之间协作关系的行为通常被称作<code>装配</code>（Wiring），这也是依赖注入的本质。</p><a id="more"></a><h1 id="声明Bean"><a href="#声明Bean" class="headerlink" title="声明Bean"></a>声明Bean</h1><h2 id="创建Spring配置"><a href="#创建Spring配置" class="headerlink" title="创建Spring配置"></a>创建Spring配置</h2><p>Spring容器提供了两种配置Bean的方式，其一是使用<strong>XML文件</strong>作为配置文件，其二是基于<strong>Java注解</strong>的配置方式。<br>以下是一个典型的Spring XML配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此处声明各个Bean --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<beans>标签内可以放置相关的Spring配置信息，另外，Spring的核心框架自带了10个命名空间的配置：</beans></p><table><thead><tr><th style="text-align:center">命名空间</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:center">aop</td><td>为声明切面以及将<code>＠AspectJ</code>注解的类代理为Spring切面提供了配置元素</td></tr><tr><td style="text-align:center">beans</td><td>beans支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间</td></tr><tr><td style="text-align:center">context</td><td>为配置Spring应用上下文提供了配置元素，包括自动检测和自动装配Bean、注入非Spring直接管理的对象</td></tr><tr><td style="text-align:center">jee</td><td>提供了与Java EE API 的集成，例如JNDI和EJB</td></tr><tr><td style="text-align:center">jms</td><td>为声明消息驱动的POJO提供了配置元素</td></tr><tr><td style="text-align:center">lang</td><td>支持配置由Groovy、JRuby或BeanShell等脚本实现的Bean</td></tr><tr><td style="text-align:center">mvc</td><td>启用Spring MVC的能力，例如面向注解的控制器、视图控制器和拦截器</td></tr><tr><td style="text-align:center">oxm</td><td>支持Spring 的对象到XML映射配置</td></tr><tr><td style="text-align:center">tx</td><td>提供声明式事务配置</td></tr><tr><td style="text-align:center">util</td><td>提供各种各样的工具类元素，包括把集合配置为Bean、支持属性占位符元素</td></tr></tbody></table><h2 id="声明一个简单的Bean"><a href="#声明一个简单的Bean" class="headerlink" title="声明一个简单的Bean"></a>声明一个简单的Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Juggler</span> <span class="keyword">implements</span> <span class="title">Performer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> beanBags = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Juggler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Juggler</span><span class="params">(<span class="keyword">int</span> beanBags)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beanBags = beanBags;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"JUGGLING "</span> + beanBags + <span class="string">" BEANBAGS"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"duke"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Juggler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;bean&gt;</code>元素是Spring中最基本的配置单元，通过该元素Spring将创建一个对象。当Spring容器加载该Bean时，Spring将使用默认的构造器来实例化该Bean，实际上，duke会使用如下代码来创建：<br><code>new com.springinaction.springidol.Juggler();</code></p><h2 id="通过构造器注入"><a href="#通过构造器注入" class="headerlink" title="通过构造器注入"></a>通过构造器注入</h2><p>让bean使用另外一个构造方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"duke"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Juggler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在构造Bean的时候，可以使用<code>&lt;constructor-arg&gt;</code>标签来告诉Spring额外的信息，这样Spring就不再会使用默认的构造器来实例化该Bean。<br>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDuke</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-idol.xml"</span>);</span><br><span class="line">Performer performer = (Performer) context.getBean(<span class="string">"duke"</span>);</span><br><span class="line">performer.perform();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运行结果<code>JUGGLING 15 BEANBAGS</code>可以15被注入到了构造器中。</p><h3 id="通过构造器注入对象引用"><a href="#通过构造器注入对象引用" class="headerlink" title="通过构造器注入对象引用"></a>通过构造器注入对象引用</h3><p>现在需要一个新的类<code>PoeticJuggler</code>，该类需要<code>Poem</code>类作为其参数并通过构造器注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoeticJuggler</span> <span class="keyword">extends</span> <span class="title">Juggler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Poem poem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入Poem</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PoeticJuggler</span><span class="params">(Poem poem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.poem = poem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入豆袋子数量和Poem</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PoeticJuggler</span><span class="params">(<span class="keyword">int</span> beanBags, Poem poem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(beanBags);</span><br><span class="line"><span class="keyword">this</span>.poem = poem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.perform();</span><br><span class="line">System.out.println(<span class="string">"While reciting..."</span>);</span><br><span class="line">poem.recite();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置文件中就需要声明一个 <code>Poem</code>的类，并将其注入到<code>PoeticJuggler</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sonnet29"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Sonnet29"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poeticDuke"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.PoeticJuggler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"sonnet29"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用ref属性来将Id为sonnet29的Bean引用传递给构造器，当Spring遇到sonnet29和poeticDuke的bean声明时，所执行的逻辑脚本将是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Poem sonnet29 = <span class="keyword">new</span> Sonnet29();</span><br><span class="line">Performer poeticDuke = <span class="keyword">new</span> PoeticJuggler(<span class="number">15</span>, sonnet29 );</span><br></pre></td></tr></table></figure><h3 id="通过工厂方法创建Bean"><a href="#通过工厂方法创建Bean" class="headerlink" title="通过工厂方法创建Bean"></a>通过工厂方法创建Bean</h3><p>在没有公开的构造方法时，可以通过工厂方法来创建Bean，及<bean>元素的<code>factory-method</code>属性来装配工厂创建的Bean。<br>比如Stage是一个没有公开构造方法的类，但是可以通过getInstance获取其实例，那么可以通过下面的配置方式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"theStage"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Stage"</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"getInstance"</span> /&gt;</span></span><br></pre></td></tr></table></figure></bean></p><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><table><thead><tr><th style="text-align:center">作用域</th><th>定义</th></tr></thead><tbody><tr><td style="text-align:center">singleton（默认）</td><td>在每一个Spring容器中，一个Bean定义只有一个对象实例</td></tr><tr><td style="text-align:center">prototype</td><td>允许Bean的定义可以被<code>实例化任意次</code>（每次调用都创建一个实例）</td></tr><tr><td style="text-align:center">request</td><td>在一次HTTP请求中，每个Bean定义对应一个实例。该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr><tr><td style="text-align:center">session</td><td>在一个HTTP Sesion中，每个Bean定义对应一个实例。该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr><tr><td style="text-align:center">global-session</td><td>在一个全局HTTP Sesion中，每个Bean定义对应一个实例。该作用域仅在Portlet上下文中才有效</td></tr></tbody></table><p>配置方法，设置<bean>标签的scope属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sonnet29"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Sonnet29"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></bean></p><p>Spring的单例只能保证在每个应用上下文中只有一个Bean的实例，你也可以通过定义多个<bean>的方式来实例化同一个Bean。</bean></p><h2 id="初始化和销毁Bean"><a href="#初始化和销毁Bean" class="headerlink" title="初始化和销毁Bean"></a>初始化和销毁Bean</h2><p>可以为Bean定义初始化和销毁操作，只需使用<code>init-method</code>和<code>destroy-method</code>参数来配置<bean>标签即可。</bean></p><p>比如，舞台（Auditorium）需要在表演开始前开灯（turnOnLights），在结束时关灯（turnOffLights），那么就可以做下面的声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"auditorium"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Auditorium"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"turnOnLights"</span> <span class="attr">destroy-method</span>=<span class="string">"turnOffLights"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="默认的init-method和destroy-method"><a href="#默认的init-method和destroy-method" class="headerlink" title="默认的init-method和destroy-method"></a>默认的init-method和destroy-method</h3><p>可以使用<beans>的<code>default-init-method</code>和<code>default-destroy-method</code>为上下文中所有的Bean设置共同的初始化和销毁方法。</beans></p><h1 id="注入Bean属性"><a href="#注入Bean属性" class="headerlink" title="注入Bean属性"></a>注入Bean属性</h1><p>Spring可以借助属性的set方法来配置属性的值，以实现setter方式的注入。</p><p>下面是一个音乐家（Instrumentalist）类，它演奏时需要歌曲（song）和乐器（instrument）两个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instrumentalist</span> <span class="keyword">implements</span> <span class="title">Performer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String song;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Instrument instrument;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Instrumentalist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Playing "</span> + song + <span class="string">" : "</span>);</span><br><span class="line">instrument.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSong</span><span class="params">(String song)</span> </span>&#123; <span class="comment">// 注入歌曲</span></span><br><span class="line"><span class="keyword">this</span>.song = song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSong</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">screamSong</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstrument</span><span class="params">(Instrument instrument)</span> </span>&#123; <span class="comment">// 注入乐器</span></span><br><span class="line"><span class="keyword">this</span>.instrument = instrument;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中需要为Instrumentalist 注入这两个属性的值。</p><h2 id="注入简单值"><a href="#注入简单值" class="headerlink" title="注入简单值"></a>注入简单值</h2><p>使用<code>&lt;property&gt;</code>标签可以通过调用属性的<strong>setter方法</strong>为Bean注入属性，而类似的<code>&lt;constructor-arg&gt;</code>是通过<strong>构造函数</strong>注入的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;property&gt;</code>元素会指示Spring调用setSong()方法将song属性的值设置为”Happy”。</p><p>注意value的属性值可以指定数值型（int、float、Double等）以及boolean等，Spring在调用set方法前会自动根据类型进行转换。</p><h2 id="引用其他Bean"><a href="#引用其他Bean" class="headerlink" title="引用其他Bean"></a>引用其他Bean</h2><p>在演奏家kenny中需要一个乐器，那么我们就可以为其引用一个实现了Instrument接口的乐器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saxphone"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Saxophone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instrument"</span> <span class="attr">ref</span>=<span class="string">"saxphone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过Performer接口引用一个参赛者，就可以产生任意类型的参赛者进行表演，<code>面向接口编程</code>和<code>依赖注入</code>实现了松耦合。</p><h3 id="注入内部Bean"><a href="#注入内部Bean" class="headerlink" title="注入内部Bean"></a>注入内部Bean</h3><p>前文中，演奏家使用的instrument是其他Bean都可以进行共用的，若要独用一个类，那么可以声明一个类为<strong>内部Bean</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instrument"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Saxophone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如上面的代码，通过直接声明一个<bean>元素作为<property>元素的子节点。内部Bean不限于setter注入，也可以通过构造方法注入。</property></bean></p><p>内部Bean没有Id属性，它们不能被复用，内部Bean仅适用于一次注入，而不能被其他Bean引用。</p><h2 id="装配集合"><a href="#装配集合" class="headerlink" title="装配集合"></a>装配集合</h2><table><thead><tr><th style="text-align:center">集合元素</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;list&gt;</code></td><td>装配list类型的数据，允许重复</td></tr><tr><td style="text-align:center"><code>&lt;set&gt;</code></td><td>装配set类型的数据，不允许重复</td></tr><tr><td style="text-align:center"><code>&lt;map&gt;</code></td><td>装配map类型的数据，key和value可以是任意类型</td></tr><tr><td style="text-align:center"><code>&lt;props&gt;</code></td><td>装配properties类型的数据，key和value必须是String类型</td></tr></tbody></table><p>下面一个演奏家可以演奏多种乐器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneManBand</span> <span class="keyword">implements</span> <span class="title">Performer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OneManBand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line"><span class="comment">// 遍历演奏各个乐器</span></span><br><span class="line"><span class="keyword">for</span> (Instrument instrument : instruments) &#123;</span><br><span class="line">instrument.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Collection&lt;Instrument&gt; instruments;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstruments</span><span class="params">(Collection&lt;Instrument&gt; instruments)</span> </span>&#123;<span class="comment">// 注入instruments集合</span></span><br><span class="line"><span class="keyword">this</span>.instruments = instruments;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="装配List、Set和Array"><a href="#装配List、Set和Array" class="headerlink" title="装配List、Set和Array"></a>装配List、Set和Array</h3><p>可以使用下面的方式装配List,也可以使用<set>来装配：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hank"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.OneManBand"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instruments"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"guitar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cymbal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"harmonica"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></set></p><h3 id="装配Map"><a href="#装配Map" class="headerlink" title="装配Map"></a>装配Map</h3><p>当OneManBand表演时，perform()方法可以把乐器（instrument）的音符打印出来，我们还想知道每个音符是由哪个乐器产生的，因此需要做以下改变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneManBandMap</span> <span class="keyword">implements</span> <span class="title">Performer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OneManBandMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> <span class="keyword">throws</span> PerformanceException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (String key : instruments.keySet()) &#123;</span><br><span class="line">System.out.print(key + <span class="string">" : "</span>);</span><br><span class="line">Instrument instrument = instruments.get(key);</span><br><span class="line">instrument.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Instrument&gt; instruments;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstruments</span><span class="params">(Map&lt;String, Instrument&gt; instruments)</span> </span>&#123;<span class="comment">// 以map类型注入instruments</span></span><br><span class="line"><span class="keyword">this</span>.instruments = instruments;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring配置map注入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hankk"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.OneManBandMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instruments"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"GUITAR"</span> <span class="attr">value-ref</span>=<span class="string">"guitar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"CYMBAL"</span> <span class="attr">value-ref</span>=<span class="string">"cymbal"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"HARMONICA"</span> <span class="attr">value-ref</span>=<span class="string">"harmonica"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><map>中的<entry>元素由一个键和一个值组成，键和值可以是简单类型，也可以是其他Bean的引用：</entry></map></p><table><thead><tr><th style="text-align:center">属性</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td>指定map中entry的<code>键</code>为String</td></tr><tr><td style="text-align:center">key-ref</td><td>指定map中entry的<code>键</code>为Spring山下文中其他Bean的引用</td></tr><tr><td style="text-align:center">value</td><td>指定map中entry的<code>值</code>为String</td></tr><tr><td style="text-align:center">value-ref</td><td>指定map中entry的<code>值</code>为Spring山下文中其他Bean的引用</td></tr></tbody></table><h3 id="装配Properties集合"><a href="#装配Properties集合" class="headerlink" title="装配Properties集合"></a>装配Properties集合</h3><p>若OneManBandMap中的Instrument属性所配置的Map的每一个entry的键和值都是String类型，可以使用<code>java.util.Properties</code>来代替Map：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hank"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.OneManBand"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instruments"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"GUITAR"</span>&gt;</span>Strum Strum Strum<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"CYMBAL"</span>&gt;</span>Crush Crush Crush<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"HARMONICA"</span>&gt;</span>Hum Hum Hum<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><property>元素用于把值或者Bean引用注入到Bean的属性中；</property></li><li><props>用于定义一个<code>java.util.Properties</code>类型的集合值；</props></li><li><prop>用于定义<props>集合的一个成员</props></prop></li></ul><h3 id="装配空值"><a href="#装配空值" class="headerlink" title="装配空值"></a>装配空值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someNonNullProperty"</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用表达式装配"><a href="#使用表达式装配" class="headerlink" title="使用表达式装配"></a>使用表达式装配</h1><p>如果为属性装配的值只有在<code>运行期间</code>才能获取，那该如何实现？<br>Spring表达式语言（ Spring Expression Language , SpEL），可以通过运行期执行的表达式将值装配到Bean的属性或者构造器参数中，其特性有：</p><ul><li>使用Bean的id来引用Bean；</li><li>调用方法和访问对象的属性；</li><li>对值进行算术、关系和逻辑运算；</li><li>正则表达式匹配；</li><li>集合操作。</li></ul><h2 id="SpEL基本用法"><a href="#SpEL基本用法" class="headerlink" title="SpEL基本用法"></a>SpEL基本用法</h2><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><p>比如<code>&lt;property name=&quot;count&quot; value=&quot;#{5}&quot;/&gt;</code>，<code>#{ }</code>标记会提示Spring这是个SpEL表达式。</p><p>可以与非SpEL表达式混用：<code>&lt;property name=&quot;message&quot; value=&quot;The value is #{5}&quot;/&gt;</code>。</p><p>另外，浮点型、科学计数法、布尔型（true和false）也可以直接使用。</p><p>字符串使用时，需要用单引号或者双引号括起。</p><h3 id="引用Bean、Properties和方法（避免空指针）"><a href="#引用Bean、Properties和方法（避免空指针）" class="headerlink" title="引用Bean、Properties和方法（避免空指针）"></a>引用Bean、Properties和方法（避免空指针）</h3><p>新声明一个id为carl的模仿者，Kenny唱什么他就唱什么：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carl"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"#&#123;kenny.song&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注入到Carl的song属性的表达式是由两部分组成的，第一部分（<code>kenny</code>）指向了kenny的Bean，第二部分（<code>song</code>）指向了kenny Bean的song属性，其实等价于下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instrumentalist carl = <span class="keyword">new</span> Instrumentalist();</span><br><span class="line">carl.setSong(kenny.getSong());</span><br></pre></td></tr></table></figure></p><p>还可以调用其他Bean的方法：<br><code>&lt;property name=&quot;song&quot; value=&quot;#{songSelector.selectSong()}&quot;/&gt;</code><br><code>&lt;property name=&quot;song&quot; value=&quot;#{songSelector.selectSong().toUpperCase()}&quot;/&gt;</code></p><p>如果selectSong()返回一个null，那么SpEL会抛出空指针异常，可以采用下面的方法避免：<br><code>&lt;property name=&quot;song&quot; value=&quot;#{songSelector.selectSong()?.toUpperCase()}&quot;/&gt;</code><br>使用<code>?.</code>来代替<code>.</code>来访问toUpperCase()方法，访问之前会确保左边项不为null，若为null就不会再继续调用。</p><h3 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h3><p>可以使用<code>T()</code>运算符调用类作用域的方法和常量。比如：<br><code>&lt;property name=&quot;multiplier&quot; value=&quot;#{T(java.lang.Math).PI}&quot;/&gt;</code><br><code>&lt;property name=&quot;randomNumber&quot; value=&quot;#{T(java.lang.Math).random()}&quot;/&gt;</code></p><h2 id="在SpEL值上进行操作"><a href="#在SpEL值上进行操作" class="headerlink" title="在SpEL值上进行操作"></a>在SpEL值上进行操作</h2><table><thead><tr><th style="text-align:center">运算符类型</th><th style="text-align:center">运算符</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:center">算术运算</td><td style="text-align:center">+, -, *, /, %, ^</td><td>#{T(java.lang.Math).PI * circle.radius ^ 2}</td></tr><tr><td style="text-align:center">关系运算</td><td style="text-align:center">&lt;, &gt;, ==, &lt;=, &gt;=, lt,gt, eq, le, ge</td><td>#{counter.total == 100}</td></tr><tr><td style="text-align:center">逻辑运算</td><td style="text-align:center">and, or, not（或!）</td><td>#{!product.available}</td></tr><tr><td style="text-align:center">条件运算</td><td style="text-align:center">?: (ternary), ?: (Elvis)</td><td>#{m&gt;=n?m:n}</td></tr><tr><td style="text-align:center">正则表达式</td><td style="text-align:center">matches</td><td>#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.com’}</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建应用对象之间协作关系的行为通常被称作&lt;code&gt;装配&lt;/code&gt;（Wiring），这也是依赖注入的本质。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第五章：构建Spring web应用</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%9E%84%E5%BB%BASpring%20web%E5%BA%94%E7%94%A8.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第五章：构建Spring web应用.html</id>
    <published>2019-04-08T13:46:26.520Z</published>
    <updated>2019-04-08T13:46:26.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前一直在看《Spring实战》第三版，看到第五章时发现很多东西已经过时被废弃了，于是现在开始读《Spring实战》第四版了，章节安排与之前不同了，里面应用的应该是最新的技术。</p></blockquote><p>本章中，将会接触到Spring MVC基础，以及如何编写控制器来处理web请求，如何通明地绑定请求参数到业务对象上，同时还可以提供数据校验和错误处理的功能。</p><a id="more"></a><h1 id="Spring-MVC初探"><a href="#Spring-MVC初探" class="headerlink" title="Spring MVC初探"></a>Spring MVC初探</h1><h2 id="跟踪Spring-MVC请求"><a href="#跟踪Spring-MVC请求" class="headerlink" title="跟踪Spring MVC请求"></a>跟踪Spring MVC请求</h2><p><img src="http://hoxis-github-io.qiniudn.com/160118-spring-in-action-5.1.png" alt="请求会由DispatcherServlet分配给控制器（根据处理器映射来确定），在控制器完成处理后，接着请求会被发送给一个视图来呈现结果"></p><p>在请求离开浏览器时，会带有用户所请求内容的信息，例如请求的URL、用户提交的表单信息。</p><p>请求旅程的第一站是Spring的DispatcherServlet。Spring MVC所有的请求都会通过一个前端控制器Servlet。前端控制器是常用的Web应用程序模式，在这里一个单实例的Servlet将请求委托给应用程序的其他组件来执行实际的处理。在Spring MVC中，DispatcherServlet 就是前端控制器。</p><p>DispatcherServlet的任务是将请求发送给Spring MVC<strong>控制器</strong>。控制器是一个用于处理请求的Spring组件。在典型的应用程序中可能会有多个控制器， Dispatcher Servlet需要知道应该将请求发送给哪个控制器。所以DispatcherServlet会查询一个或多个处理器映射来确定请求的下一站在哪里。<strong>处理器映射</strong>会根据请求所携带的URL信息来进行决策。</p><p>一旦选择了合适的控制器，DispatcherServlet会将请求发送给选中的控制器。到达了控制器，请求会卸下其负载（用户提交的信息）并等待控制器处理这些信息（实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给个或多个服务对象）。</p><p>控制器在完成逻辑处理后通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为<strong>模型</strong>（Model）。不过仅仅给用户返回原始的信息是不够的–这些信息需要以用户友好的方式进行格式化，一般是HTML。所以，信息需要发送给—个<strong>视图</strong>（View），通常会是JSP。</p><p>控制器所做的最后一件事是<strong>将模型数据打包</strong>，并且标示出用于渲染输出的视图名称。它接下来会将请求连同模型和视图名称发送回DispatcherServlet。</p><p>这样，控制器就不会与特定的视图相耦合，传递给DispatcherServlet的视图名称并不直接表示某个特定的JSP。它仅仅传递了一个逻辑名，这个名字将会用来查找用来产生结果的真正视图。DispatcherServlet将会使用<strong>视图解析器</strong>来将逻辑视图名匹配为一个特定的视图实现。</p><p>既然DispatcherServlet已经知道由哪个视图渲染结果，那么请求的任务基本上也就完成了。它的最后一站是视图的实现（可能是JSP），在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，并通过这个输出将响应对象传递给客户端。</p><h2 id="搭建Spring-MVC"><a href="#搭建Spring-MVC" class="headerlink" title="搭建Spring MVC"></a>搭建Spring MVC</h2><h3 id="配置DispatcherServlet"><a href="#配置DispatcherServlet" class="headerlink" title="配置DispatcherServlet"></a>配置DispatcherServlet</h3><p>DispatcherServlet是Spring MVC的核心，它负责将请求分发到其他各个组件。</p><p>在旧版本中，DispatcherServlet之类的servlet一般在<code>web.xml</code>文件中配置，该文件一般会打包进最后的war包种；但是Spring3引入了注解，我们在这一章将展示如何基于注解配置Spring MVC。</p><p><strong>注意：</strong><br>在使用maven构建web工程时，由于缺少web.xml文件，可能会出现<code>web.xml is missing and &lt;failOnMissingWebXml&gt; is set to true</code>这样的错误，那么可以通过在pom.xml文件中添加如下配置来避免这种错误：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>既然不适用<code>web.xml</code>文件，你需要在servlet容器中使用Java配置DispatcherServlet，具体的代码列举如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittrWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig.class &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>任意继承自<code>AbstractAnnotationConfigDispatcherServletInitializer</code>的类都会被自动用来配置DispatcherServlet，这个类负责<strong>配置DispatcherServlet</strong>、<strong>初始化Spring MVC容器和Spring容器</strong>。</p><p>SpittrWebAppInitializer重写了三个方法，<code>getRootConfigClasses()</code>方法用于获取Spring应用容器的配置文件，这里我们给定预先定义的RootConfig.class；<code>getServletConfigClasses()</code>负责获取SpringMVC应用容器，这里传入预先定义好的WebConfig.class；<code>getServletMappings()</code>方法负责指定需要由DispatcherServlet映射的路径，这里给定的是”/“，意思是由DispatcherServlet处理所有向该应用发起的请求。</p><h3 id="两种应用上下文"><a href="#两种应用上下文" class="headerlink" title="两种应用上下文"></a>两种应用上下文</h3><p>当DispatcherServlet启动时，会创建一个Spring应用上下文并且会加载配置文件中声明的bean，通过<code>getServletConfigClasses()</code>方法，DispatcherServlet会加载<code>WebConfig</code>配置类中所配置的bean。</p><p>在Spring web应用中，通常还有另外一种应用上下文：<code>ContextLoaderListener</code>。</p><p>DispatcherServlet用来加载web组件bean，如控制器（controllers）、视图解析器（view resolvers）以及处理器映射（handler mappings）等。而ContextLoaderListener则用来加载应用中的其他bean，如运行在应用后台的中间层和数据层组件。</p><p>AbstractAnnotationConfigDispatcherServletInitializer会同时创建DispatcherServlet和ContextLoaderListener。<code>getServletConfigClasses()</code>方法返回的<code>@Configuration</code>类会定义DispatcherServlet应用上下文的bean。同时，<code>getRootConfigClasses()</code>返回的<code>@Configuration</code>类用来配置ContextLoaderListener上下文创建的bean。</p><p>相对于传统的<code>web.xml</code>文件配置的方式，通过AbstractAnnotationConfigDispatcherServletInitializer来配置DispatcherServlet是一种替代方案。需要注意的是，这种配置只适用于<strong>Servlet 3.0</strong>，例如Apache Tomcat 7或者更高。</p><h3 id="激活Spring-MVC"><a href="#激活Spring-MVC" class="headerlink" title="激活Spring MVC"></a>激活Spring MVC</h3><p>正如有多种方式可以配置DispatcherServlet，激活Spring MVC组件也有不止一种方法。一般的，都会通过XML配置文件的方式来配置Spring，例如可以通过<code>&lt;mvc:annotation-driven&gt;</code>来激活基于注解的Spring MVC。  </p><p>最简单的配置Spring MVC的一种方式是通过<code>@EnableWebMvc</code>注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@Configuration</code>表示这是Java配置类；<code>@EnableWebMvc</code>注解用于启动Spring MVC特性。</p><p>这样就可以激活Spring MVC了，但是还有其他一些问题：</p><ul><li>没有配置视图解析器（view resolvers），这种情况下，Spring会默认使用<code>BeanNameViewResolver</code>，它会通过寻找那些与视图id匹配的bean以及实现了View接口的类进行视图解析；</li><li>没有激活组件扫描：这样Spring会寻找配置中明确声明的任意控制器；</li><li>DispatcherServlet会处理所有的请求，包括静态资源请求，如图片和样式（这些往往不是我们想要的）。</li></ul><p>因此，需要为WebConfig增加一些配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"spitter.web"</span>) <span class="comment">// 激活Spring MVC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置一个JSP视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="string">"/WEB_INF/views/"</span>);</span><br><span class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">configurer.enable();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先需要注意的是，<code>WebConfig</code>使用了<code>@ComponentScan</code>注解，因此会在<code>spitter.web</code>包下扫描寻找组件，这些组件包括使用<code>@Controller</code>进行注解的控制器。这样就不再需要在配置类中显式地声明其他控制器。</p><p>接下来，添加了一个<code>ViewResolver</code>bean，即<code>InternalResourceViewResolver</code>。它通过匹配符合设置的前缀和后缀的视图来用来寻找对应的JSP文件，比如视图home会被解析为/WEB-INF/views/home.jsp。这里的三个函数的含义依次是：<code>setPrefix()</code>方法用于设置视图路径的前缀；<code>setSuffix()</code>用于设置视图路径的后缀，即如果给定一个逻辑视图名称——“home”，则会被解析成”/WEB-INF/views/home.jsp”； <code>setExposeContextBeansAsAttributes(true)</code>使得可以在JSP页面中通过${}访问容器中的bean。</p><p>然后，<code>WebConfig</code>继承自<code>WebMvcConfigurerAdapter</code>，并且重写了<code>configureDefaultServletHandling()</code>方法，通过调用<code>enable()</code>方法从而可以让DispatcherServlet将静态资源的请求转发给默认的servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123; <span class="string">"spitter"</span> &#125;, excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.ANNOTATION, value = EnableWebMvc.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一点是，RootConfig 使用了<code>@ComponentScan</code>注解。</p><h2 id="Spittr应用介绍"><a href="#Spittr应用介绍" class="headerlink" title="Spittr应用介绍"></a>Spittr应用介绍</h2><p>这一章要用的例子应用，从Twitter获取了一些灵感，因此最开始叫Spitter；然后又借鉴了最近比较流行的网站Flickr，因此我们也把e去掉，最终形成Spittr这个名字。这也有利于区分领域名称（类似于twitter，这里用spring实现，因此叫spitter）和应用名称。</p><p>Spittr类似于Twitter，用户可以通过它添加一些推文。Spittr有两个重要的概念：<em>spitter</em>（应用的用户）和<em>spittle</em>（用户发布简单状态）。本章将会构建该应用的web层、创建用于展示spittle的控制器以及用户注册流程。</p><h1 id="编写简单的控制器"><a href="#编写简单的控制器" class="headerlink" title="编写简单的控制器"></a>编写简单的控制器</h1><p>Spring MVC中，控制器仅仅是拥有<code>@RequestMapping</code>注解方法的类，从而可以声明它们可以处理何种请求。</p><p>在开始之前，我们先假设一个控制器，它可以处理匹配<code>/</code>的请求并会跳转到主页面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 声明一个控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET) <span class="comment">// 处理GET请求</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@Controller</code>是一个构造型注解，它基于<code>@Component</code>，组件扫描器会自动地将HomeController声明为Spring上下文的一个bean。</p><p>home()方法采用了<code>@RequestMapping</code>注解，属性<code>value</code>指定了该方法处理的请求路径，<code>method</code>方法指定了可以处理的HTTP方法。这种情况下，当一个来自<code>/</code>的GET方法请求时，就会调用home()方法。</p><p>home()方法仅仅返回了一个”home”的String值，Spring MVC会对这个String值进行解析并跳转到指定的视图上。<code>DispatcherServlet</code>则会请求视图解析器将这个逻辑视图解析到真实视图上。</p><p>我们已经配置了InternalResourceViewResolver，“home”视图会被解析到<code>/WEB-INF/views/home.jsp</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"spring"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spittr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">resources</span>/<span class="attr">style.css</span>" /&gt;</span>"&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Spittr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">spittles</span>" /&gt;</span>"&gt;Spittles<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">spitter</span>/<span class="attr">register</span>" /&gt;</span>"&gt;Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面对HomeController进行测试。</p><h2 id="测试控制器"><a href="#测试控制器" class="headerlink" title="测试控制器"></a>测试控制器</h2><p>一般的web测试需要将工程发布到一个web容器中，启动后才能观察运行结果。<br>如：<br><img src="http://hoxis-github-io.qiniudn.com/160118-spring-in-action-homepage.png" alt="主页"></p><p>从另外的角度来看，HomeController其实是一个简单的POJO对象，那么可以使用下面的方法对其进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHomePage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HomeController controller = <span class="keyword">new</span> HomeController();</span><br><span class="line"><span class="comment">// 设置MockMvc</span></span><br><span class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(controller).build();</span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>)).andExpect(MockMvcResultMatchers.view().name(<span class="string">"home"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相对于直接调用home()方法测试它的返回值，上面的测试中发起了一个来自<code>/</code>的 GET 请求，并且对其结果视图进行断言。将HomeController的实例传送给<code>MockMvcBuilders.standaloneSetup</code>，并且调用<code>build()</code>方法来创建一个<code>MockMvc</code>实例。然后，使用<code>MockMvc</code>实例产生了一个GET请求，并且设置了视图的期望。</p><h2 id="定义类层级的请求处理"><a href="#定义类层级的请求处理" class="headerlink" title="定义类层级的请求处理"></a>定义类层级的请求处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 声明一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">// 控制器匹配路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET) <span class="comment">// 处理GET请求</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"home"</span>;<span class="comment">// 视图名称</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个新版的HomeController中，将请求匹配路径移到了类层级，HTTP方法的匹配仍处在方法层级。当有控制类中有一个类层级的<code>@RequestMapping</code>，该类中所有的用<code>@RequestMapping</code>注解的处理方法共同组成了类层级的<code>@RequestMapping</code>。</p><p><code>@RequestMapping</code>的value属性接受String数组，那么就可以使用如下配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 声明一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>, <span class="string">"/homepage"</span>) <span class="comment">// 控制器匹配路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种情况下，home()方法就可以处理来自<code>/</code>和<code>/homepage</code>的GET请求。</p><h2 id="将model数据传送给视图"><a href="#将model数据传送给视图" class="headerlink" title="将model数据传送给视图"></a>将model数据传送给视图</h2><p>在Spittr应用中，需要一个页面，用来显示最近提交的spittle清单。首先需要定义一个数据访问的仓库，用来抓取spittle：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> spittr.Spittle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpittleRepository</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment"> *            待返回的最大的Spittle ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment"> *            返回Spittle对象的个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Spittle&gt; <span class="title">findSpittles</span><span class="params">(<span class="keyword">long</span> max, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要获取最近的20个Spittle对象，那么只需调用这样调用：<br><code>List&lt;Spittle&gt; recent = spittleRepository.findSpittles(Long.MAX_VALUE, 20);</code></p><p>下面对Spittle进行定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.EqualsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.HashCodeBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spittle</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Long id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String message;<span class="comment">// 消息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Date time;<span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">private</span> Double latitude;</span><br><span class="line"><span class="keyword">private</span> Double longitude;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Spittle</span><span class="params">(String message, Date time)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(message, time, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Spittle</span><span class="params">(String message, Date time, Double latitude, Double longitude)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line"><span class="keyword">this</span>.time = time;</span><br><span class="line"><span class="keyword">this</span>.latitude = latitude;</span><br><span class="line"><span class="keyword">this</span>.longitude = longitude;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object that)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> EqualsBuilder.reflectionEquals(<span class="keyword">this</span>, that, <span class="string">"id"</span>, <span class="string">"time"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HashCodeBuilder.reflectionHashCode(<span class="keyword">this</span>, <span class="string">"id"</span>, <span class="string">"time"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spittle对象中现在包含信息、时间戳、位置这几个属性。</p><p>下面利用Spring的<code>MockMvc</code>来断言新的控制器的行为是否正确：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>上面的测试通过创建一个SpittleRepository接口的mock实现，该实现会通过findSpittles()方法返回一个包含20个Spittle对象的集合。然后将这个bean注入到SpittleController实例中，并设置MockMvc使用该实例。</p><p>不同于HomeControllerTest，该测试使用了<code>setSingleView()</code>，发起一个<code>/spittles</code>的GET请求，并断言视图是否为spittles以及model是否含有一个spittleList的属性值。</p><p>当然，现在运行这个测试代码肯定是会出错的，因为还没有SpittleController。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hamcrest.core.IsCollectionContaining;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spittr.Spittle;</span><br><span class="line"><span class="keyword">import</span> spittr.data.SpittleRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowRecentSpittles</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Spittle&gt; expectedSpittles = createSpittleList(<span class="number">20</span>);</span><br><span class="line">SpittleRepository mockRepository = Mockito.mock(SpittleRepository.class);</span><br><span class="line">Mockito.when(mockRepository.findSpittles(Long.MAX_VALUE, <span class="number">20</span>)).thenReturn(expectedSpittles);</span><br><span class="line"></span><br><span class="line">SpittleController controller = <span class="keyword">new</span> SpittleController(mockRepository);</span><br><span class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(controller)</span><br><span class="line">.setSingleView(<span class="keyword">new</span> InternalResourceView(<span class="string">"/WEB_INF/views/spittles.jsp"</span>)).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用MockMvc.perform(RequestBuilder requestBuilder)发起一个http请求，然后将得到ResultActions</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/spittles"</span>))<span class="comment">// 添加验证断言来判断执行请求后的结果是否是预期的；</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.view().name(<span class="string">"spittles"</span>))<span class="comment">// view()：得到视图验证器；</span></span><br><span class="line"><span class="comment">// 得到相应的***ResultMatchers后，接着再调用其相应的API得到ResultMatcher，</span></span><br><span class="line"><span class="comment">// 如ModelResultMatchers.attributeExists(final String... names)判断Model属性是否存在。</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attributeExists(<span class="string">"spittleList"</span>))<span class="comment">// model()：得到模型验证器；</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attribute(<span class="string">"spittleList"</span>, IsCollectionContaining.hasItems(expectedSpittles.toArray())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Spittle&gt; <span class="title">createSpittleList</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">List&lt;Spittle&gt; spittles = <span class="keyword">new</span> ArrayList&lt;Spittle&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">spittles.add(<span class="keyword">new</span> Spittle(<span class="string">"Spittle "</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> spittles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SpittleController中，使用@Autowired注解注入了spittleRepository属性。</p><p>需要注意的是<code>spittles()</code>方法使用了Model（<em>控制器和视图之间传递的数据</em>）作为入参，Model本质上是一个map，它会被传送至view，因此数据可以提供给客户端。如果在调用<code>addAttribute()</code>方法时没有指定key，那么就会从传入的对象中获取，比如代码中传入的参数属性是List<spittle>，那么key就是spittleList。最后，该方法返回spittles作为传动给model的视图名称。</spittle></p><p>也可以显示的指定key：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(spittleRepository.findSpittles(Long.MAX_VALUE, <span class="number">20</span>));</span><br></pre></td></tr></table></figure></p><p>也可以直接采用map的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittles</span><span class="params">(Map model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将spittles添加到model中</span></span><br><span class="line">model.put(<span class="string">"spittles"</span>, spittleRepository.findSpittles(Long.MAX_VALUE, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回视图名称</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"spittles"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不管采用何种方式实现spittles()方法，结果都是一样的。一个Spittle对象集合会存储在model中，并分配到名为spittles的view中，根据测试方法中的配置，该视图就是/WEB-INF/views/spittles.jsp。</p><p>现在model已经有数据了，那么JSP页面中如何获取数据呢？当视图是一个JSP页面时，model数据会作为请求属性被拷贝到请求中，因此可以通过JSTL（JavaServer Pages Standard Tag Library）<code>&lt;c:forEach&gt;</code>来获取：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;spittleList&#125;"</span> <span class="attr">var</span>=<span class="string">"spittle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"spittle_&lt;c:out value="</span><span class="attr">spittle.id</span>"/&gt;</span>"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spittleMessage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;spittle.message&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spittleTime"</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;spittle.time&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spittleLocation"</span>&gt;</span> (<span class="tag">&lt;<span class="name">c:out</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;spittle.latitude&#125;"</span> /&gt;</span>, <span class="tag">&lt;<span class="name">c:out</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;spittle.longitude&#125;"</span> /&gt;</span>)</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面对SpittleController进行扩展，让它可以处理一些输入。</p><h1 id="接受输入请求"><a href="#接受输入请求" class="headerlink" title="接受输入请求"></a>接受输入请求</h1><p>Spring MVC提供了如下方式供客户端传递数据到控制器处理方法：</p><ul><li>Query parameters</li><li>Form parameters</li><li>Path variables</li></ul><h2 id="处理查询参数：-RequestParam"><a href="#处理查询参数：-RequestParam" class="headerlink" title="处理查询参数：@RequestParam"></a>处理查询参数：@RequestParam</h2><p>Spittr应用的一个需求就是要对spittle列表分页展示，但是SpittleController仅仅展示最近的spittle。如果要让用户可以每次得到一页的spittle记录，那么就需要让用户可以通过某种方式将他们想看的spittle记录的参数传递到后台。</p><p>在浏览spittle时，如果想要查看下一页的spittle，那么就需要传递比当前页的最后一个spittle的id小一位的id，也可以传递想要展示的spittle的数量。</p><p>为了实现分页，需要编写一个控制器满足：</p><ul><li><code>before</code>参数，结果中的spittle的id都要在这个参数之前；</li><li><code>count</code>参数，结果中要包含的spittle的个数</li></ul><p>下面我们对上面的<code>spittles()</code>方法进行小小的改动，让它可以使用before和count参数。首先对测试方法进行改动：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowRecentSpittles</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Spittle&gt; expectedSpittles = createSpittleList(<span class="number">20</span>);</span><br><span class="line">SpittleRepository mockRepository = Mockito.mock(SpittleRepository.class);</span><br><span class="line">Mockito.when(mockRepository.findSpittles(<span class="number">238900</span>, <span class="number">50</span>)).thenReturn(expectedSpittles);</span><br><span class="line"></span><br><span class="line">SpittleController controller = <span class="keyword">new</span> SpittleController(mockRepository);</span><br><span class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(controller)</span><br><span class="line">.setSingleView(<span class="keyword">new</span> InternalResourceView(<span class="string">"/WEB_INF/views/spittles.jsp"</span>)).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用MockMvc.perform(RequestBuilder requestBuilder)发起一个http请求，然后将得到ResultActions</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/spittles?max=238900&amp;count=50"</span>))<span class="comment">// 添加验证断言来判断执行请求后的结果是否是预期的；</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.view().name(<span class="string">"spittles"</span>))<span class="comment">// view()：得到视图验证器；</span></span><br><span class="line"><span class="comment">// 得到相应的***ResultMatchers后，接着再调用其相应的API得到ResultMatcher，</span></span><br><span class="line"><span class="comment">// 如ModelResultMatchers.attributeExists(final String... names)判断Model属性是否存在。</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attributeExists(<span class="string">"spittleList"</span>))<span class="comment">// model()：得到模型验证器；</span></span><br><span class="line">.andExpect(MockMvcResultMatchers.model().attribute(<span class="string">"spittleList"</span>, IsCollectionContaining.hasItems(expectedSpittles.toArray())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个测试方法的主要改动就是它发起的GET请求传递了两个参数：max和count。对<code>spittles()</code>进行修改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Spittle&gt; <span class="title">spittles</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(value=<span class="string">"max"</span>, defaultValue=MAX_LONG_AS_STRING)</span> <span class="keyword">long</span> max, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"count"</span>, defaultValue=<span class="string">"20"</span>)</span> <span class="keyword">int</span> count) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> spittleRepository.findSpittles(max, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种情况下，如果没有max参数没有指定，那么就会使用默认的设置。由于查询参数是String类型的，因此<code>defaultValue</code>属性值也需要设置为String类型，需要对Long.MAX_VALUE进行设置：<br><code>private static final String MAX_LONG_AS_STRING = &quot;9223372036854775807&quot;;</code></p><p>虽然，这里defaultValue的属性为String类型，当运行到函数时，将会根据函数的参数类型进行转换。</p><p>查询参数是请求中传送信息给控制器的最常用方式，另外一种流行的方式就是将参数作为请求路径的一部分。</p><h2 id="通过路径参数传递数据：-PathVariable"><a href="#通过路径参数传递数据：-PathVariable" class="headerlink" title="通过路径参数传递数据：@PathVariable"></a>通过路径参数传递数据：@PathVariable</h2><p>假设现在应用需要展示单独的一篇Spittle，那么就需要一个id作为查询参数，对应的处理方法可以是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"show"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showSpittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(<span class="string">"spittle_id"</span>)</span> <span class="keyword">long</span> spittleId,</span></span><br><span class="line"><span class="function">Model model</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个handler方法将会处理形如<code>/spittles/show?spittle_id=12345</code>的请求，但是这并不符合资源导向的观点。理想情况下，应该使用URL路径对资源进行区分，而不是查询参数，即应该使用<code>/spittles/12345</code>这种形式。</p><p>为了实现资源导向的控制器，我们先在测试中获得这个需求（使用了静态引入）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpittle</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Spittle expectedSpittle = <span class="keyword">new</span> Spittle(<span class="string">"Hello"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">SpittleRepository mockRepository = Mockito.mock(SpittleRepository.class);</span><br><span class="line">when(mockRepository.findOne(<span class="number">12345</span>)).thenReturn(expectedSpittle);</span><br><span class="line"></span><br><span class="line">SpittleController controller = <span class="keyword">new</span> SpittleController(mockRepository);</span><br><span class="line">MockMvc mockMvc = standaloneSetup(controller).build();</span><br><span class="line"></span><br><span class="line">mockMvc.perform(get(<span class="string">"/spittles/12345"</span>))</span><br><span class="line">.andExpect(view().name(<span class="string">"spittle"</span>))</span><br><span class="line">.andExpect(model().attributeExists(<span class="string">"spittle"</span>))</span><br><span class="line">.andExpect(model().attribute(<span class="string">"spittle"</span>, expectedSpittle));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该测试中发起了一个<code>/spittles/12345</code>的GET请求，并且对其返回结果视图进行断言。</p><p>为了满足路径参数，Spring MVC允许在<code>@RequestMapping</code>路径中使用占位符（需要用大括号包围），下面是使用占位符来接受一个id作为路径的一部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable(<span class="string">"spittleId"</span>)</span> <span class="keyword">long</span> spittleId,</span></span><br><span class="line"><span class="function">Model model</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spittle()方法的spittleId入参使用了<code>@PathVariable(&quot;spittleId&quot;)</code>注解，表明请求中占位符位置的值都会被传送到handler的spittleId参数。<em>@RequestMapping中value属性的占位符必须和@PathVariable包裹的参数一致</em>。如果@PathVariable中没有给定参数，那么将默认使用入参的册数参数名。即可以使用下面的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable <span class="keyword">long</span> spittleId,</span></span></span><br><span class="line"><span class="function"><span class="params">Model model</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spittle()方法会将接收的参数值传递给spittleRepository的findOne()方法并查找到一个Spittle，并将其放置到model中，model的key值会是spittle，接下来就可以在视图中引用这个Spittle：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spittleView"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spittleMessage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;spittle.message&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"spittleTime"</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;spittle.time&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>查询参数和路径参数可以处理一些少量的请求数据，但是当请求数据过大时，它们就不再适用，下面就来讲解一下如何处理表单数据。</p><h1 id="处理表单"><a href="#处理表单" class="headerlink" title="处理表单"></a>处理表单</h1><p>Web应用不仅仅是将内容推送给用户，它同时也会让用户填写表单并将数据提交给应用。</p><p>对于表单有两种处理方式：展示表单以及处理用户提交的表单数据。在Spittr中，需要提供一个供新用户进行注册的表单。</p><p><code>SpitterController</code>：展示用户注册表单<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spitter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理来自/spitter/register的get请求</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showRegistrationForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>showRegistrationForm</code>方法的<code>@RequestMapping</code>注解，以及类级别的注解<code>@RequestMapping</code>，表明了这个方法会处理来自/spitter/register的get请求，该方法仅仅返回了一个名为registerForm的逻辑视图。根据之前在<code>InternalResourceViewResolver</code>中的配置，这个逻辑视图会导向到<code>/WEB-INF/views/registerForm.jsp</code>该界面。</p><p>对应的测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.setup.MockMvcBuilders.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitterControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowRegistration</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpitterController controller = <span class="keyword">new</span> SpitterController();</span><br><span class="line">MockMvc mockMvc = standaloneSetup(controller).build();</span><br><span class="line">mockMvc.perform(get(<span class="string">"/spitter/register"</span>)).andExpect(view().name(<span class="string">"registerForm"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过启动项目访问界面的方式验证：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">session</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spitter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">resources</span>/<span class="attr">style.css</span>" /&gt;</span>" &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Register"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://hoxis-github-io.qiniudn.com/160215-spring-in-action-rigister.png" alt="该界面提供了用户注册的功能"></p><p>接下来需要对提交的表单进行处理。</p><h2 id="编写表单处理控制器"><a href="#编写表单处理控制器" class="headerlink" title="编写表单处理控制器"></a>编写表单处理控制器</h2><p>在处理POST请求时，控制器需要接受表单数据并且将这些数据存储为一个Spitter对象。为了避免重复提交，应该重定向到一个新的界面：用户信息页。在处理post请求时，一个聪明的做法就是在处理完成后发送一个重定向的请求，从而可以避免重复提交。</p><p>下面来实现控制器方法，从而可以处理注册请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SpitterRepository spitterRepository;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpitterController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入SpitterRepository</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpitterController</span><span class="params">(SpitterRepository spitterRepository)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.spitterRepository = spitterRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(Spitter spitter)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 保存Spitter</span></span><br><span class="line">spitterRepository.save(spitter);</span><br><span class="line"><span class="comment">// 重定向到新的页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/spitter/"</span> + spitter.getUsername();</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>processRegistration方法使用Spitter对象作为入参，该对象的属性会从请求中填充。该方法中调用了spitterRepository的save方法对Spitter对象进行存储。最后返回了一个带有<code>redirect:</code>的字符串。</p><p>当InternalResourceViewResolver遇到<code>redirect:</code>时，它会自动地将其当做一个重定向请求，从而可以重定向到用户详情页面，如/spitter/xiaoming。</p><p>同时，InternalResourceViewResolver也可以识别前缀<code>forward:</code>，这种情况下，请求会被转向到给定的URL地址。</p><p>下面需要编写处理处理用户详情页面的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;username&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showSpitterProfile</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username, Model model) </span>&#123;</span><br><span class="line">Spitter spitter = spitterRepository.findByUsername(username);</span><br><span class="line">model.addAttribute(spitter);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"profile"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>从Spring3.0开始，Spring支持Java校验api，从而可以从而可以不需要添加其他配置，仅仅需要有一个Java API 的实现，如Hibernate Validator。</p><p>Java Validation API定义了许多注解，可以使用这些注解来约束参数的值，所有的注解都在包<code>javax.validation.constraints</code>中。</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@AssertFalse（@AssertTrue）</td><td>对象必须是布尔类型，并且必须为false（true）</td></tr><tr><td>@DecimalMax(value)、@DecimalMin(value)</td><td>限制对象必须是一个数字，其值不大于（不小于）指定的BigDecimalString值</td></tr><tr><td>@Digits(integer,fraction)</td><td>对象必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td>@Future</td><td>必须是一个将来的日期</td></tr><tr><td>@Max(value)、@Min(value)</td><td>必须为一个不大于（不小于）指定值的数字</td></tr><tr><td>@NotNull</td><td>限制对象不能为空</td></tr><tr><td>@Null</td><td>限制对象必须为空</td></tr><tr><td>@Past</td><td>必须是一个过去的日期</td></tr><tr><td>@Pattern(value)</td><td>必须符合指定的正则表达式</td></tr><tr><td>@Size(min,max)</td><td>限制字符长度必须在min到max之间</td></tr></tbody></table><p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spitter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">5</span>, max = <span class="number">16</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">5</span>, max = <span class="number">25</span>)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">30</span>)</span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>既然已经对Spitter的参数添加了约束，那么就需要改动processRegistration方法来应用校验：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(@Valid Spitter spitter, Errors errors)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 若校验中出现错误，那么就返回到注册界面</span></span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保存Spitter</span></span><br><span class="line">spitterRepository.save(spitter);</span><br><span class="line"><span class="comment">// 重定向到新的页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/spitter/"</span> + spitter.getUsername();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一章比较适合Spring MVC的入门学习资料。主要涵盖了Spring MVC处理web请求的处理过程、如何写简单的控制器和控制器方法来处理Http请求、如何使用mockito框架测试控制器方法。</p><p>基于Spring MVC的应用有三种方式读取数据：查询参数、路径参数和表单输入。本章用两节介绍了这些内容，并给出了类似错误处理和参数验证等关键知识点。</p><p>由于缺少真正的入库操作，因此本章节的一些方法不能真正的运作。</p><p>在接下来的章节中，我们会对Spring视图进行深入了解，对如何在JSP页面中使用Spring标签库进行展开。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前一直在看《Spring实战》第三版，看到第五章时发现很多东西已经过时被废弃了，于是现在开始读《Spring实战》第四版了，章节安排与之前不同了，里面应用的应该是最新的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章中，将会接触到Spring MVC基础，以及如何编写控制器来处理web请求，如何通明地绑定请求参数到业务对象上，同时还可以提供数据校验和错误处理的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第三章：最小化SpringXML配置</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%8C%96SpringXML%E9%85%8D%E7%BD%AE.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第三章：最小化SpringXML配置.html</id>
    <published>2019-04-08T13:46:26.519Z</published>
    <updated>2019-04-08T13:46:26.519Z</updated>
    
    <content type="html"><![CDATA[<p>Spring提供了几种技巧，可以减少XML的配置数量：</p><ul><li>自动装配（autowiring）：可以减少<code>&lt;property&gt;</code>和<code>&lt;constructor-arg&gt;</code>元素，让Spring自动识别如何装配Bean的依赖关系；</li><li>自动检测（autodiscovery）：Spring能够自动识别哪些类需要被装配成Spring Bean，从而减少对<code>&lt;bean&gt;</code>的使用。</li></ul><a id="more"></a><h1 id="自动装配Bean属性"><a href="#自动装配Bean属性" class="headerlink" title="自动装配Bean属性"></a>自动装配Bean属性</h1><h2 id="4种自动装配"><a href="#4种自动装配" class="headerlink" title="4种自动装配"></a>4种自动装配</h2><ul><li>byName：把与Bean属性具有<strong>相同名字（或id）</strong>的其他Bean自动装配到Bean的对应属性中；</li><li>byType：把与Bean属性具有<strong>相同类型</strong>的其他Bean自动装配到Bean的对应属性中；</li><li>constructor：把与Bean的构造函数的入参具有<strong>相同类型</strong>的其他Bean自动装配到Bean的构造函数对应的入参中；</li><li>autodetect：先尝试使用constructor，失败后再使用byType。</li></ul><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><p>为属性自动装配id与该属性的名字相同的Bean。使用方法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过配置Bean Kenny的<code>autowire=&quot;byName&quot;</code>属性，Spring就可以利用此信息自动装配Kenny的instrument属性了。</p><p>缺点：需要假设Bean的名字（如instrument）与其他Bean的属性的名字一样，若其他多个Bean的属性都是instrument，那么让他们将使用同一个instrument。</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><p>当Spring根据类型匹配到多个Bean时，会<em>抛出异常</em>，形如：</p><blockquote><p>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘kenny’ defined in class path resource [spring-idol.xml]: Unsatisfied dependency expressed through bean property ‘instrument’: : No qualifying bean of type [com.springinaction.springidol.Instrument] is defined: expected single matching bean but found 2: saxphone,guitar;</p></blockquote><p>为了避免这种异常（<strong>expected single matching bean but found 2</strong>）的出现，Spring提供了两种方案：可以自动装配标识一个首选Bean，或者可以取消某个Bean的自动装配的候选资格。</p><h4 id="标识首选Bean：primary-”true”"><a href="#标识首选Bean：primary-”true”" class="headerlink" title="标识首选Bean：primary=”true”"></a>标识首选Bean：primary=”true”</h4><p>可以使用primary属性将Bean设置为首选Bean，那么它将会得到优选被选择权：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saxphone"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Saxophone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guitar"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Guitar"</span> <span class="attr">primary</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span></span></span><br><span class="line"><span class="tag"><span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>有两个Bean类型满足kenny的instrument属性，但是guitar设置了<code>primary=&quot;true&quot;</code>，因此会注入guitar。</p><h4 id="排除其他Bean：-autowire-candidate-”false”"><a href="#排除其他Bean：-autowire-candidate-”false”" class="headerlink" title="排除其他Bean： autowire-candidate=”false”"></a>排除其他Bean： autowire-candidate=”false”</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saxphone"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Saxophone"</span> <span class="attr">autowire-candidate</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guitar"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Guitar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span></span></span><br><span class="line"><span class="tag"><span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过排除其他Bean的候选资格来达到和上面设置primary同样的效果。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>当有多个Bean匹配某个构造函数的入参时，Spring同样会抛出异常。</p><h2 id="默认自动装配方式"><a href="#默认自动装配方式" class="headerlink" title="默认自动装配方式"></a>默认自动装配方式</h2><p>可以在根元素<code>&lt;beans&gt;</code>上添加<code>default-autowire</code>属性来设置<strong>该配置文件中</strong>的<bean>的自动装配方式。</bean></p><h3 id="混用自动装配和显示装配"><a href="#混用自动装配和显示装配" class="headerlink" title="混用自动装配和显示装配"></a>混用自动装配和显示装配</h3><p><em>显示装配会覆盖掉自动装配</em>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saxphone"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Saxophone"</span> <span class="attr">autowire-candidate</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guitar"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Guitar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kenny"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.springidol.Instrumentalist"</span></span></span><br><span class="line"><span class="tag"><span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"Happy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"instrument"</span> <span class="attr">ref</span>=<span class="string">"saxphone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>虽然取消了saxphone的候选资格，但最终仍是saxphone注入到了kenny的属性中。</p><p><em>注意</em><br>当使用constructor自动装配时，就不能混合使用constructor自动装配和<constructor-arg>标签了。</constructor-arg></p><h1 id="使用注解装配"><a href="#使用注解装配" class="headerlink" title="使用注解装配"></a>使用注解装配</h1><p>启用注解装配：<code>&lt;context:annotation-config /&gt;</code>。</p><ul><li>Spring自带的@Autowired注解</li><li>JSR-330的@Inject注解</li><li>JSR-250的@Resource注解</li></ul><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>使用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、可以标注setter</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstrument</span><span class="params">(Instrument instrument)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.instrument = instrument;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、标注其他方法</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heresYourInstrument</span><span class="params">(Instrument instrument)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.instrument = instrument;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、标注构造器</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Instrumentalist</span><span class="params">(Instrument instrument)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.instrument = instrument;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、直接标注属性</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Instrument instrument;</span><br></pre></td></tr></table></figure></p><p>使用@Autowired进行自动装配时，在遇到多个匹配的Bean或者没有匹配的Bean也会出现问题。</p><h3 id="可选的自动装配"><a href="#可选的自动装配" class="headerlink" title="可选的自动装配"></a>可选的自动装配</h3><p>通过设置@Autowired的required属性为false来配置可选。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Instrument instrument;</span><br></pre></td></tr></table></figure></p><p>这时，若没有找到匹配到的instrument Bean，应用也不会出现异常，instrument会被设置为null。</p><p><em>注意</em>：<br>当使用构造器装配时，只有一个构造器可以将@Autowired的required属性设置为true，其他使用@Autowired注解的required属性必须设置为false。此外，当使用@Autowired标注多个构造器时，Spring会从所有满足装配条件的构造器中选择<strong>入参最多的</strong>那个。</p><h3 id="限制歧义性的依赖"><a href="#限制歧义性的依赖" class="headerlink" title="限制歧义性的依赖"></a>限制歧义性的依赖</h3><p>当有多个Bean满足装配条件时，可以配合使用<code>@Qualifier</code>注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"guitar"</span>)</span><br><span class="line"><span class="keyword">private</span> Instrument instrument;</span><br></pre></td></tr></table></figure></p><p><code>@Qualifier</code>注解缩小了自动装配候选Bean的范围。</p><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p>和@Autowired一样，@Inject可以装配 属性、方法和构造器；但是@Inject没有required属性，因此@Inject注解所依赖的bean是必须存在的，如果不存在就会抛出异常。</p><p>使用@Inject注入一个Provider，从而可以实现Bean引用的<strong>延迟注入</strong>以及注入多个Bean实例的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;Knife&gt; knives;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KnifeJuggler</span><span class="params">(Provider&lt;Knife&gt; knifeProvider)</span> </span>&#123;</span><br><span class="line">knives = <span class="keyword">new</span> HashSet&lt;Knife&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">knives.add(knifeProvider.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KnifeJuggler类需要注入多个Knife实例，假设Knife Bean的作用域是prototype的，那么KnifeJuggler将获得一个Provider<knife>，这时只有provider被注入；在调用provider的get()方法之前，实际的Knife对象没有被注入。</knife></p><h3 id="限定-Inject所注入的属性：-Named"><a href="#限定-Inject所注入的属性：-Named" class="headerlink" title="限定@Inject所注入的属性：@Named"></a>限定@Inject所注入的属性：@Named</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"guitar"</span>)</span><br><span class="line"><span class="keyword">private</span> Instrument instrument;</span><br></pre></td></tr></table></figure><h3 id="在注解中使用表达式：-Value"><a href="#在注解中使用表达式：-Value" class="headerlink" title="在注解中使用表达式：@Value"></a>在注解中使用表达式：@Value</h3><p>可以使用@Value装配简单值：String类型和基本类型，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"Happy"</span>)</span><br><span class="line"><span class="keyword">private</span> String song;</span><br></pre></td></tr></table></figure></p><p>@Value可以配合SpEL使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties.myFavoriteSong&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String song;</span><br></pre></td></tr></table></figure></p><p>#自动检测Bean：<context:component-scan><br> <context:annotation-config> 可以减少<property>和<constructor-arg> 的使用，但仍需配置<bean>。<br>使用<context:component-scan> 除了可以完成上述工作，还可以自动检测Bean和定义Bean，它会扫描指定的包及其所有子包，并查找出能够自动注册为Spring Bean的类，base-package标识了所要扫描的包：<br><code>&lt;context:component-scan base-package=&quot;com.springinaction.springidol&quot;/&gt;</code></context:component-scan></bean></constructor-arg></property></context:annotation-config></context:component-scan></p><h2 id="标注Bean"><a href="#标注Bean" class="headerlink" title="标注Bean"></a>标注Bean</h2><ul><li>@Component：通用的构造型注解，标识该类为<strong>Spring组件</strong>；</li><li>@Controller：标识该类为<strong>Spring MVC controller</strong>；</li><li>@Repository：标识为<strong>数据仓库</strong>；</li><li>@Service：标识为<strong>服务</strong>；</li><li>@Component：标注为自定义注解。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.springidol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guitar</span> <span class="keyword">implements</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Strum strum strum"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring扫描com.springinaction.springidol包时，会发现使用@Component注解所标注的Guitar，会自动将它注册为Spring Bean，其id会是guitar。</p><h2 id="定义组件扫描策略"><a href="#定义组件扫描策略" class="headerlink" title="定义组件扫描策略"></a>定义组件扫描策略</h2><table><thead><tr><th style="text-align:center">过滤器类型</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">annotation</td><td>扫描使用指定注解所标注的类，通过expression属性指定要扫描的注解</td></tr><tr><td style="text-align:center">assignable</td><td>扫描派生于expression属性所指定类型的那些类</td></tr><tr><td style="text-align:center">aspectj</td><td>扫描与expression属性所指定的AspectJ表达式多匹配的那些类</td></tr><tr><td style="text-align:center">custom</td><td>使用自定义的org.springframework.core.type.TypeFilter实现类，该类由expression属性指定</td></tr><tr><td style="text-align:center">regex</td><td>扫描类名称与expression属性所指定的正则表达式所匹配的类</td></tr></tbody></table><p>以下配置实现了：自动注册所有实现了Instrument接口的类，并且排除使用自定义@SkipIt注解的类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springinaction.springidol"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"assignable"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"com.springinaction.springidol.Instrument"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"com.springinaction.springidol.SkipIt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring提供了几种技巧，可以减少XML的配置数量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动装配（autowiring）：可以减少&lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;元素，让Spring自动识别如何装配Bean的依赖关系；&lt;/li&gt;
&lt;li&gt;自动检测（autodiscovery）：Spring能够自动识别哪些类需要被装配成Spring Bean，从而减少对&lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;的使用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第七章：Spring MVC进阶</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9ASpring%20MVC%E8%BF%9B%E9%98%B6.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第七章：Spring MVC进阶.html</id>
    <published>2019-04-08T13:46:26.519Z</published>
    <updated>2019-04-08T13:46:26.519Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要内容：</p><ul><li>备用的Spring MVC配置项</li><li>处理文件上传</li><li>控制器中的异常处理</li><li>使用flash属性</li></ul><a id="more"></a><p>“等等，客官！不止这些”</p><p>也许大家在看电视广告时对上面这句话比较熟悉，广告里通常在已经对商品做了完整的介绍，这时，电视里就会冒出这句：等等，客官，还不止这些。。。接着，就会继续吹嘘他们的商品还有更多让你意想不到的功能。</p><p>其实，Spring MVC（或者说Spring的每一个模块）就给人一种“不止这些”的感觉，就在你以为已经对Spring MVC的功能有了完备的了解时，又会发现可以利用它做的更多。</p><p>在第五章中，我们使用Spring MVC的基本功能以及如何编写控制器来处理各种各样的请求。接着在第六章中创建了JSP和Thymeleaf视图来将model数据对用户进行了展示。也许你会觉得Spring MVC不过如此。但是等等，还不止这些！</p><p>本章中会继续讨论Spring MVC，比如编写控制器来处理文件上传，如何处理控制器中的异常，以及如何在model上传递数据从而可以在重定向时使用。</p><p>首先，在第五章中使用了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>来设置Spring MVC，并且说了可以使用其他备用设置选择。因此在文件上传和异常处理之前，先来探索一下如何使用其他方式来设置<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>。</p><h1 id="Spring-MVC备用配置"><a href="#Spring-MVC备用配置" class="headerlink" title="Spring MVC备用配置"></a>Spring MVC备用配置</h1><p>第五章中，通过继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>来快速地对Spring MVC进行了设置。该类假设你想要一个基础的<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>设置，并且通过Java而不是XML文件来配置Spring。</p><p>尽管这样配置对大多数Spring应用都是适用的，但是总有意外，比如你想要除了DispatcherServlet之外的servlet和filter，或者你想对DispatcherServlet做一些进一步的配置，再或者，你想在Servlet3.0之前的版本上部署应用，那么你就要使用传统的web.xml文件对DispatcherServlet进行配置了。</p><p>幸运的是，在（garden-variety）普通的AbstractAnnotationConfigDispatcherServletInitializer不适用于你的需求时，还有其他的一些方式供你使用。下面，我们就开始如何定制化的配置DispatcherServlet吧。</p><h2 id="DispatcherServlet个性化配置"><a href="#DispatcherServlet个性化配置" class="headerlink" title="DispatcherServlet个性化配置"></a>DispatcherServlet个性化配置</h2><p>SpittrWebAppInitializer中所包含的三个方法仅仅是必须重写的三个抽象方法，同时还有许多其他方法可以重写从而可以实现更多的配置。</p><p>其中一个就是<code>customizeRegistration()</code>，在AbstractAnnotationConfigDispatcherServletInitializer注册了DispatcherServlet之后，就会调用customizeRegistration()方法，并根据servlet的注册返回值传送<code>ServletRegistration.Dynamic</code>，通过对<code>customizeRegistration()</code>的重写，就可以对DispatcherServlet进行额外的配置。</p><p>比如，在稍后的章节中（7.2），你会看到Spring MVC如何处理多个请求和文件上传。如果打算使用Servlet3.0来实现多部分配置，那么就需要激活DispatcherServlet配置来实现多路请求。可以使用下面的方式重写customizeRegistration()方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">    registration.setMultipartConfig(</span><br><span class="line">        <span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp/spittr/uploads"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中ServletRegistration.Dynamic作为入参，你可以做很多事情，比如调用<code>setLoadOnStartup()</code>来设置加载时优先级，调用<code>setInitParameter()</code>来设置初始化参数，调用<code>setMultipartConfig()</code>来设置Servlet3.0的多路支持。在上述示例中，设置了多路支持的上传文件临时存储路径为：/tmp/spittr/uploads。</p><h2 id="添加额外的servlet和filter"><a href="#添加额外的servlet和filter" class="headerlink" title="添加额外的servlet和filter"></a>添加额外的servlet和filter</h2><p>根据之前的配置，可以生成DispatcherServlet和ContextLoaderListener，但是你需要注册额外的servlet、filter或者listener时怎么办呢？</p><p>使用基于Java配置的一个好处就是你可以尽量多的定义初始化类。因此，如果需要定义额外的组件，只需新建相应的初始化类即可。最简单的方法就是实现Spring的<code>WebApplicationInitializer</code>接口。</p><p>例如，下面的代码展示了如何通过实现<code>WebApplicationInitializer</code>接口的方式来注册一个servlet：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration.Dynamic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.WebApplicationInitializer;</span><br><span class="line"><span class="keyword">import</span> com.myapp.MyServlet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义servlet</span></span><br><span class="line">        Dynamic myServlet = servletContext.addServlet(<span class="string">"myServlet"</span>, MyServlet.class);</span><br><span class="line">        <span class="comment">// 映射servlet</span></span><br><span class="line">        myServlet.addMapping(<span class="string">"/custom/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码仅仅是一个基本的servlet注册初始化类，实现了对servlet的注册并映射到一个路径。你也可以使用这种方式来手动地注册DispatcherServlet（不过这好像没有必要，因为AbstractAnnotationConfigDispatcherServletInitializer在这方面已经做得很不错了）。</p><p>同样的，你也可以通过上述方式来注册listener和filter。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 注册一个filter</span></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic filter = servletContext.addFilter(<span class="string">"myFilter"</span>, MyFilter.class);</span><br><span class="line">    <span class="comment">// 添加映射</span></span><br><span class="line">    filter.addMappingForUrlPatterns(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="string">"/custom/*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>WebApplicationInitializer</code>是一个在注册servlet、filter、listener时比较推荐的方式，当然你是使用基于Java的配置方式并将应用部署在Servlet3.0容器上的。如果你仅仅需要注册一个filter并将其映射到<code>DispatcherServlet</code>，那么使用<code>AbstractAnnotationConfigDispatcherServletInitializer</code>将是一个捷径。</p><p>要注册多个filter并将它们映射到DispatcherServlet，你所要做的仅仅是重写<code>getServletFilters()</code>方法。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Filter[] &#123; <span class="keyword">new</span> MyFilter() &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，该方法返回了一个<code>javax.servlet.Filter</code>的数组，这里仅仅返回了一个filter，但是它可以返回很多个。同时这里不再需要为这些filter去声明映射，因为通过getServletFilters()返回的filter会自动地映射到DispatcherServlet。</p><p>当部署到Servlet3.0的容器时，Spring提供了很多方法来注册servlet、filter和listener，而不再需要web.xml。如果你使用的不是Servlet3.0版本的容器，或者你就喜欢使用基于web.xml的配置方式，那么该如何对Spring MVC进行配置呢？</p><h2 id="使用web-xml声明DispatcherServlet"><a href="#使用web-xml声明DispatcherServlet" class="headerlink" title="使用web.xml声明DispatcherServlet"></a>使用web.xml声明DispatcherServlet</h2><p>下面是一个典型的web.xml文件，其中对DispatcherServlet和ContextLoaderListener进行了声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册ContextLoaderListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DispatcherServlet映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>正如在第五章中所说的，DispatcherServlet和ContextLoaderListener可以加载Spring应用上下文。contextConfigLocation上下文参数指定了用来定义由ContextLoaderListener加载的根应用上下文的XML文件的位置。DispatcherServlet用来通过文件中定义的bean（名称基于指定的servlet名称：appServlet）来加载应用上下文。因此，DispatcherServlet会从/WEB-INF/appServlet-context.xml文件中加载应用上下文。</p><p>如果你想指定DispatcherServlet配置文件的位置，那么可以通过设置contextConfigLocation初始化参数的方式实现。例如，下面的DispatcherServlet配置就会从/WEB-INF/spring/appServlet/servlet-context.xml文件中加载：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">/WEB-INF/spring/appServlet/servlet-context.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">```</span><br><span class="line">本书中采用的都是基于Java的配置方式，所以你需要对Spring MVC进行设置从而可以从`@Configuration`注解的类中加载配置。为了使用基于Java的配置，需要通知DispatcherServlet和ContextLoaderListener去使用AnnotationConfigWebApplicationContext，该类是`WebApplicationContext`接口的实现类，它可以对Java配置类进行加载。可以通过设置DispatcherServlet的`contextClass`参数和初始化参数来实现。下面对web.xml进行配置从而可以使用Java配置：</span><br><span class="line">```xml</span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用Java配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定所使用的Java配置类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>spittr.config.RootConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">org.springframework.web.context.ContextLoaderListener</span><br><span class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用Java配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定DispatcherServlet的配置类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">spittr.config.WebConfigConfig</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上就是配置Spring MVC的一些方法，下面来看如何使用Spring MVC处理文件上传。</p><h1 id="处理multipart表单数据"><a href="#处理multipart表单数据" class="headerlink" title="处理multipart表单数据"></a>处理multipart表单数据</h1><p>一个web应用通常都会允许用户上传内容，比如像Facebook、Flickr这样的站点，都会允许用户上传小片的。我们的Spittr应用中在两处会用到文件上传：一是新用户注册的时候，这时需要选择一个头像之类的；还有就是当用户新建一个Spittle（推文？）时，也许需要在文中插入一张图片。</p><p>来自传统的表单提交的请求结果一般比较简单并且采用多个键值对的方式。例如，当提交一个注册信息的表单时，请求会是这样的：<br><code>firstName=Charles&amp;lastName=Xavier&amp;email=professorx%40xmen.org&amp;username=professorx&amp;password=letmein01</code></p><p>虽然这种编码方式对于传统的基于文本的提交是最够的，但是它却没有强大到可以携带二进制数据，比如上传一个图像。相反的，Multipart/form-data将表单分割成独立的部分，每个部分都有各自的类型。传统的表单域都有文本数据，但是当要上传一些东西时，该部分可以是二进制的，如下面的multipart请求体：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="firstName"</span></span><br><span class="line"><span class="type">Charles</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="lastName"</span></span><br><span class="line"><span class="type">Xavier</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="email"</span></span><br><span class="line"><span class="title">charles</span>@xmen.com</span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="username"</span></span><br><span class="line"><span class="title">professorx</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="password"</span></span><br><span class="line"><span class="title">letmein01</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="profilePicture"; filename="me.jpg"</span></span><br><span class="line"><span class="type">Content</span>-<span class="type">Type</span>: image/jpeg</span><br><span class="line">[[ <span class="type">Binary</span> image <span class="class"><span class="keyword">data</span> goes here ]]</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryqgkaBn8IHJCuNmiW--</span></span><br></pre></td></tr></table></figure></p><p>在这个multipart请求中，值得注意的，<code>profilePicture</code>部分是与其他部分不同的，它有一个<code>Content-Type</code>头部用来表示这是一个JPEG图像。虽然不是很明显，profilePicture的内容是一个二进制数据而不是简单文本。</p><p>虽然multipart请求看起来比较复杂，但是在Spring MVC中处理起来还是比较简单的。在编写控制器方法来处理文件上传之前，还需要配置一个multipart解析器来告知DispatcherServlet如何读取multipart请求。</p><h2 id="配置multipart解析器"><a href="#配置multipart解析器" class="headerlink" title="配置multipart解析器"></a>配置multipart解析器</h2><p><code>DispatcherServlet</code>并没有实现任何逻辑用来将数据转换成multipart请求。它使用了Spring的<code>MultipartResolver</code>接口的实现类来解析multipart请求中的内容。从Spring3.1开始，Spring提供了两种MultipartResolver实现类供选择：</p><ul><li>CommonsMultipartResolver：使用Jakarta Commons FileUpload来解析multipart请求；</li><li>StandardServletMultipartResolver：依靠Servlet 3.0支持来解析（Spring 3.1及以上）；</li></ul><p>一般来讲，<code>StandardServletMultipartResolver</code>应该是第一选择。它使用servlet容器中现有的支持，并且不需要其他附加的项目依赖。但是，如果你将应用部署在Servlet 3.0之前的版本，或者你没有使用Spring3.1及以上版本，那么就要使用<code>CommonsMultipartResolver</code>。</p><h3 id="使用Servlet-3-0解析multipart请求"><a href="#使用Servlet-3-0解析multipart请求" class="headerlink" title="使用Servlet 3.0解析multipart请求"></a>使用Servlet 3.0解析multipart请求</h3><p>StandardServletMultipartResolver没有构造器参数和属性需要设置，这样它的设置就比较简单，就像在Spring配置文件中声明一个bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardServletMultipartResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也许你想这么简单的方法，我该如何加一下限制呢？比如，如何限制一个用户可以上传的文件大小，或者如何设置上传过程中文件的临时存放位置。因为没有构造器和属性可以设置，StandardServletMultipartResolver好像是有限制的。</p><p>其实是有办法来设置StandardServletMultipartResolver的，但是它的设置不是在Spring配置中进行的，而是在Servlet配置中。起码要配置一下存放临时文件的位置，进一步来讲，还要将multipart配置为DispatcherServlet的一部分。</p><p>如果你是在继承自WebMvcConfigurerAdapter的servlet初始化类中配置的DispatcherServlet，那么就可以在servlet注册时通过调用<code>setMultipartConfig()</code>方法来配置multipart详情。比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet ds = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line">Dynamic registration = context.addServlet(<span class="string">"appServlet"</span>, ds);</span><br><span class="line">registration.addMapping(<span class="string">"/"</span>);</span><br><span class="line">registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp/spittr/uploads"</span>));</span><br></pre></td></tr></table></figure></p><p>如果你是在继承自<code>AbstractAnnotationConfigDispatcherServletInitializer</code>或者<code>AbstractDispatcherServletInitializer</code>的servlet初始化类进行的配置，没有创建DispatcherServlet的实例或者使用servlet上下文对其进行注册。因此就没有直接的引用供<code>Dynamic</code>servlet注册来使用。但是你可以重写<code>customizeRegistration()</code>方法来进行配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp/spittr/uploads"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MultipartConfigElement</code>的唯一参数设置了上传文件时临时文件的存放位置。也可以进行其他一些设置：</p><ul><li>文件上传的最大值（byte），默认没有限制；</li><li>所有multipart请求的文件最大值（byte），不管有多少个请求，默认无限制；</li><li>直接上传文件（不需存储到临时目录）的最大值（byte），默认是0，也就是所有的文件都要写入硬盘；</li></ul><p>例如，你想设置文件大小不超过2MB，所有请求的总和不超过4MB，并且所有文件都要写入硬盘，那么就可以这样设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp/spittr/uploads"</span>, <span class="number">2097152</span>, <span class="number">4194304</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你是使用的传统的web.xml的方式来设置的DispatcherServlet，那么就需要使用多个<code>&lt;multipart-config&gt;</code>元素，其默认值和MultipartConfigElement相同，并且<code>&lt;location&gt;</code>是必填项：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/tmp/spittr/uploads<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置Jakarta-Commons-FileUpload解析器"><a href="#配置Jakarta-Commons-FileUpload解析器" class="headerlink" title="配置Jakarta Commons FileUpload解析器"></a>配置Jakarta Commons FileUpload解析器</h3><p>最简单的<code>CommonsMultipartResolver</code>声明方式是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与StandardServletMultipartResolver不同的是，它不需要配置一个临时目录。默认情况下会使用servlet容器的临时目录。但是，你也可以通过<code>uploadTempDir</code>属性进行设置，同时还可以对其他参数进行设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">multipartResolver.setUploadTempDir(<span class="keyword">new</span> FileSystemResource(<span class="string">"/tmp/spittr/uploads"</span>));</span><br><span class="line">multipartResolver.setMaxUploadSize(<span class="number">2097152</span>);</span><br><span class="line">multipartResolver.setMaxInMemorySize(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> multipartResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里设置了文件的最大大小为2MB，最大的内存中大小为0，即每个上传文件都会直接写入磁盘的。但是它是无法设置multipart请求总的文件大小的。</p><h2 id="处理multipart请求"><a href="#处理multipart请求" class="headerlink" title="处理multipart请求"></a>处理multipart请求</h2><p>通过上面的配置，Spring已经支持multipart请求，那么就可以开始编写控制器来处理文件上传了。最普遍的做法就是使用<code>@RequestPart</code>注解一个控制器参数。</p><p>假设你想让用户可以在注册时上传图像，那么就需要对注册表单进行更改从而用户可以选择一个图片，同时还需要更改SpitterController中的<code>processRegistration()</code>方法以获取上传的文件。下面的代码是使用Thymeleaf的注册页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;spitter&#125;"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Profile Picture<span class="tag">&lt;/<span class="name">label</span>&gt;</span>:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"profilePicture"</span> <span class="attr">accept</span>=<span class="string">"image/jpeg,image/png,image/gif"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Register"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line">```</span><br><span class="line">可以发现`<span class="tag">&lt;<span class="name">form</span>&gt;</span>`标签多了`enctype="multipart/form-data"`属性，该属性会告知浏览器要将当前form作为multipart数据处理。</span><br><span class="line"></span><br><span class="line">除此之外，还添加了一个新的file类型的`<span class="tag">&lt;<span class="name">input</span>&gt;</span>`标签，该标签允许用户选择一个图片进行上传。`accept`属性设置了允许选择的图片类型。根据它的`name`属性，图片数据会放在`profilePicture`部分进行发送。</span><br><span class="line"></span><br><span class="line">现在所需做的就是更新`processRegistration()`方法，来获取上传的图片，其中一种方法就是添加一个用`@RequestPart`注解的byte数组：</span><br><span class="line">```java</span><br><span class="line">@RequestMapping(value = "/register", method = RequestMethod.POST)</span><br><span class="line">public String processRegistration(@RequestPart("profilePicture") byte[] profilePicture, @Valid Spitter spitter,</span><br><span class="line">Errors errors) &#123;</span><br></pre></td></tr></table></figure></p><p>当注册表单提交时，请求部分的数据就会赋予到<code>profilePicture</code>属性中，如果用户没有选中一个文件，那么该数组就会是一个空值（不是null）。既然已经获取到上传的文件，下面所需要的就是将文件保存。</p><h3 id="接收multipart文件"><a href="#接收multipart文件" class="headerlink" title="接收multipart文件"></a>接收multipart文件</h3><p>处理上传文件的原始数据比较简单但是是有局限的，因此，Spring提供了<code>MultipartFile</code>，使用它可以获取到富对象从而更好地处理multipart数据，下面就是<code>MultipartFile</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.multipart;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartFile</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getOriginalFilename</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">byte</span>[] getBytes() <span class="keyword">throws</span> IOException;</span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(File dest)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MultipartFile</code>提供获取上传文件的方法，同时提供了很多其他方法，比如原始文件名称、大小和内容类型等。另外还提供了一个InputStream可以将文件数据作为数据流读取。</p><p>另外，<code>MultipartFile</code>还提供了一个方便的<code>transferTo()</code>方法帮助你将上传文件写入到文件系统。例如，你可以将如下代码加入到<code>processRegistration()</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profilePicture.transferTo(<span class="keyword">new</span> File(<span class="string">"/data/spittr/"</span> + profilePicture.getOriginalFilename()));</span><br></pre></td></tr></table></figure></p><p>像这样将文件保存到本地文件系统非常简单，但是将文件管理的工作留给了你。你需要保证有足够的空间，保证对文件进行了备份以防硬件问题。同事还需要进行多服务器之间的文件同步。</p><h3 id="将文件保存到Amazon-S3"><a href="#将文件保存到Amazon-S3" class="headerlink" title="将文件保存到Amazon S3"></a>将文件保存到Amazon S3</h3><p>另外的办法就是将上面这些都托管给其他人，可以存放在云端，下面的代码可以将上传的图像保存到Amazon S3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveImage</span><span class="params">(MultipartFile image)</span> <span class="keyword">throws</span> ImageUploadException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AWSCredentials awsCredentials = <span class="keyword">new</span> AWSCredentials(s3AccessKey, s2SecretKey);</span><br><span class="line"><span class="comment">// 配置S3服务</span></span><br><span class="line">S3Service s3 = <span class="keyword">new</span> RestS3Service(awsCredentials);</span><br><span class="line"><span class="comment">// 创建S3 bucket对象</span></span><br><span class="line">S3Bucket bucket = s3.getBucket(<span class="string">"spittrImages"</span>);</span><br><span class="line">S3Object imageObject = <span class="keyword">new</span> S3Object(image.getOriginalFilename());</span><br><span class="line"><span class="comment">// 设置图像数据</span></span><br><span class="line">imageObject.setDataInputStream(image.getInputStream());</span><br><span class="line">imageObject.setContentLength(image.getSize());</span><br><span class="line">imageObject.setContentType(image.getContentType());</span><br><span class="line">AccessControlList acl = <span class="keyword">new</span> AccessControlList();</span><br><span class="line"><span class="comment">// 设置权限</span></span><br><span class="line">acl.setOwner(bucket.getOwner());</span><br><span class="line">acl.grantPermission(GroupGrantee.ALL_USERS, Permission.PERMISSION_READ);</span><br><span class="line">imageObject.setAcl(acl);</span><br><span class="line"><span class="comment">// 保存图片</span></span><br><span class="line">s3.putObject(bucket, imageObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ImageUploadException(<span class="string">"Unable to save image"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>saveImage()的第一步就是设置Amazon Web Service (AWS)认证，你需要提供S3的密钥和私钥，这些在注册S3服务时Amazon都会给你的。</p><p>认证过AWS之后，saveImage()创建了一个JetS3t的<code>RestS3Service</code>实例，可以通过它操作S3文件系统。它会获取一个<code>spittrImages</code>的bucket引用，并创建用于包含图标的S3Object对象，然后将突破数据填充到S3Object中。</p><p>在调用<code>putObject()</code>方法将图片数据写入S3之前，saveImage()方法设置了S3Object的权限，允许有所有用户查看。这很重要，因为如果没有设置的话，那么这些图片对于应用程序的用户来说都是不可见得了。如果出现什么问题的话，会抛出<code>ImageUploadException</code>异常。</p><h3 id="接收上传文件为Part"><a href="#接收上传文件为Part" class="headerlink" title="接收上传文件为Part"></a>接收上传文件为Part</h3><p>如果你将应用部署在Servlet 3.0的容器上，那么你可以选择不使用MultipartFile，Spring MVC也可以将<code>javax.servlet.http.Part</code>作为控制器的入参，使用<code>Part</code>后processRegistration()方法就是这样的了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(@RequestPart(<span class="string">"profilePicture"</span>)</span> Part profilePicture, @Valid Spitter spitter,</span></span><br><span class="line"><span class="function">Errors errors) </span>&#123;</span><br></pre></td></tr></table></figure></p><p>大多数情况下<code>Part</code>接口和<code>MultipartFile</code>没什么区别，如下面的代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Part</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubmittedFileName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一些方法就是名称上的不同，比如<code>getSubmittedFileName()</code>和<code>getOriginalFilename()</code>是对应的。<code>write()</code>和<code>transferTo()</code>是对应的，可以这样使用：<br><code>profilePicture.write(&quot;/data/spittr/&quot; + profilePicture.getOriginalFilename());</code></p><p>值得注意的是，如果你使用<code>Part</code>作为参数，那么就不再需要配置<code>StandardServletMultipartResolver</code>bean，它只需在使用MultipartFile时进行配置。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>一直以来我们都是假设Spittr应用中的一切都是正常运行的，但是如果哪里出现错误了呢？或者在处理请求时出现了异常？这时该向客户端发送什么响应呢？</p><p>不论发生什么，好的或者坏的，一个servlet请求的输出只能是一个servlet响应。如果在处理请求的过程中出现异常，输出结果仍然是一个servlet响应，需要将异常转换为一个响应。</p><p>Spring提供了一些将异常转化为响应的方法：</p><ul><li>某些Spring异常会自动的映射为特定的HTTP状态码；</li><li>使用<code>@ResponseStatus</code>注解将一个异常映射为HTTP状态码；</li><li>使用<code>ExceptionHandler</code>注解的方法可以用来处理异常</li></ul><h2 id="映射异常为HTTP状态码"><a href="#映射异常为HTTP状态码" class="headerlink" title="映射异常为HTTP状态码"></a>映射异常为HTTP状态码</h2><p>Spring可以自动地将其异常映射为状态码，如下表：</p><table><thead><tr><th>Spring异常</th><th>HTTP状态码</th></tr></thead><tbody><tr><td>BindException</td><td>400 - Bad Request</td></tr><tr><td>ConversionNotSupportedException</td><td>500 - Internal Server Error</td></tr><tr><td>HttpMediaTypeNotAcceptableException</td><td>406 - Not Acceptable</td></tr><tr><td>HttpMediaTypeNotSupportedException</td><td>415 - Unsupported Media Type</td></tr><tr><td>HttpMessageNotReadableException</td><td>400 - Bad Request</td></tr><tr><td>HttpMessageNotWritableException</td><td>500 - Internal Server Error</td></tr><tr><td>HttpRequestMethodNotSupportedException</td><td>405 - Method Not Allowed</td></tr><tr><td>MethodArgumentNotValidException</td><td>400 - Bad Request</td></tr><tr><td>MissingServletRequestParameterException</td><td>400 - Bad Request</td></tr><tr><td>MissingServletRequestPartException</td><td>400 - Bad Request</td></tr><tr><td>NoSuchRequestHandlingMethodException</td><td>404 - Not Found</td></tr><tr><td>TypeMismatchException</td><td>400 - Bad Request</td></tr></tbody></table><p>表格里的异常通常是在DispatcherServlet中出错由Spring自身抛出的。例如，如果DispatcherServlet无法找到合适的控制器来处理请求，那么就会抛出<code>NoSuchRequestHandlingMethodException</code>，对应的状态码就是404。</p><p>虽然这些内置的映射有点用，但是不一定适用于其他的应用异常。还好，Spring提供了<code>@ResponseStatus</code>注解将一个异常映射为HTTP状态码。</p><p>比如下面SpittleController中的请求处理方法就可以返回HTTP 404状态：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;spittleId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(@PathVariable(<span class="string">"spittleId"</span>)</span> <span class="keyword">long</span> spittleId, Model model) </span>&#123;</span><br><span class="line">Spittle spittle = spittleRepository.findOne(spittleId);</span><br><span class="line"><span class="keyword">if</span> (spittle == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SpittleNotFoundException();</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(spittle);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>findOne()</code>方法返回了一个null，那么就会抛出SpittleNotFoundException。这里，<code>SpittleNotFoundException</code>就是一个未经检查的异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleNotFoundException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果在处理请求时调用了spittle()方法，并且传入的ID是空的，那么SpittleNotFoundException就会默认产生500的响应。实际上，如果没有找到对应的映射都会返回500的错误。但是你也可以通过对SpittleNotFoundException进行映射改变这种情况。</p><p>当抛出SpittleNotFoundException时就表示一个请求的资源不存在，404恰好符合这种情况。那么，我们就使用<code>@ResponseStatus</code>来将其映射到404。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"Spittle Not Found"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleNotFoundException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写异常处理方法"><a href="#编写异常处理方法" class="headerlink" title="编写异常处理方法"></a>编写异常处理方法</h2><p>将异常映射为状态码大多数情况下是比较简单有效的，但是如果想让响应不仅仅只有一个状态码呢？也许你想对异常进行一些处理，就行处理请求一样。</p><p>例如，SpittleRepository的save()方法在用户重复创建Spittle时抛出了一个DuplicateSpittleException，那么SpittleController的saveSpittle()方法就需要处理该异常。如下面的代码所示，saveSpittle()方法可以直接处理该异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveSpittle</span><span class="params">(SpittleForm form, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">spittleRepository.save(<span class="keyword">new</span> Spittle(<span class="keyword">null</span>, form.getMessage(), </span><br><span class="line"><span class="keyword">new</span> Date(), form.getLongitude(), form.getLatitude()));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/spittles"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (DuplicateSpittleException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码并没有什么特别的，这就是一个简单的Java异常处理。</p><p>这样做还可以，但是这个方法有点复杂。如果saveSpittle()方法专注于业务处理，让其他方法来处理异常该多好。下面就为SpittleController添加一个新的方法来处理DuplicateSpittleException异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(DuplicateSpittleException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleDuplicateSpittle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@ExceptionHandler</code>注解应用在handleDuplicateSpittle()方法上，用来指定在有DuplicateSpittleException异常抛出时执行。</p><p>有意思的是，<code>@ExceptionHandler</code>注解的方法在同一个控制器里是通用的额，即无论SpittleController的哪一个方法抛出DuplicateSpittleException异常，handleDuplicateSpittle()方法都可以对其进行处理，而不再需要在每一个出现异常的地方进行捕获。</p><p>也许你在想，<code>@ExceptionHandler</code>注解的方法能不能捕获其他controller里的异常啊？在Spring3.2里是可以的，但仅仅局限于定义在控制器增强类（controller advice class）里的方法。</p><p>那么什么是控制器增强类呢？下面我们就来看看这个控制器增强类。</p><h1 id="控制器增强类（controller-advice-class）"><a href="#控制器增强类（controller-advice-class）" class="headerlink" title="控制器增强类（controller advice class）"></a>控制器增强类（controller advice class）</h1><p>如果controller类的特定切面可以跨越应用的所有controller进行使用，那么这将会带来极大的便捷。例如，<code>@ExceptionHandler</code>方法就可以处理多个controller抛出的异常了。如果多个controller类都抛出同一个异常，也许你会在这些controller进行重复的<code>@ExceptionHandler</code>方法编写。或者，你也可以编写一个异常处理的基类，供其他<code>@ExceptionHandler</code>方法进行继承。</p><p>Spring3.2带来了另外一种处理方法：控制器增强类，即使用<code>@ControllerAdvice</code>进行注解的类，它们会有下面几个方法构成：</p><ul><li><code>@ExceptionHandler</code>注解的</li><li><code>@InitBinder</code>注解的</li><li><code>@ModelAttribute</code>注解的</li></ul><p><strong><code>@ControllerAdvice</code>注解的类中的这些方法会在整个应用中的所有controller的所有<code>@RequestMapping</code>注解的方法上应用。</strong></p><p><code>@ControllerAdvice</code>注解本身是使用了<code>@Component</code>注解的，因此，使用<code>@ControllerAdvice</code>注解的类会在组件扫描时进行提取，就行使用<code>@Controller</code>注解的类一样。</p><p><code>@ControllerAdvice</code>的最实用的一个功能就是将所有的<code>@ExceptionHandler</code>方法集成在一个类中，从而可以在一个地方处理所有controller中的异常。例如，假设你想处理应用中所有的DuplicateSpittleException异常，可以采用下面的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spittr.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明控制器增强</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWideExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义异常处理方法</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(DuplicateSpittleException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleDuplicateSpittle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(SpittleNotFoundException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleSpittleNotFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，不论哪一个controller抛出DuplicateSpittleException，都会调用handleDuplicateSpittle()方法来处理。</p><h1 id="在redirect请求中携带数据"><a href="#在redirect请求中携带数据" class="headerlink" title="在redirect请求中携带数据"></a>在redirect请求中携带数据</h1><p>正如前文提到的，在处理完一个POST请求后进行重定向是一个不错的选择，起码这样可以避免用户点击刷新造成的POST请求重发的问题。</p><p>在第五章中，已经在控制器方法返回的视图名称中使用了<code>redirect:</code>前缀，这时返回的String不是用来寻找视图，而是浏览器进行跳转的路径：<br><code>return &quot;redirect:/spitter/&quot; + spitter.getUsername();</code></p><p>也许你认为Spring处理重定向只能这样了，但是等等：Spring还可以做得更多。</p><p>特别是一个重定向方法如何向处理重定向的方法发送数据呢？一般的，当一个处理函数结束后，方法中的model数据都会作为request属性复制到request中，并且request会传递到视图中进行解析。因为控制器和视图面对的是同一个request，因此request属性在forward时保留了下来。</p><p>但是，当一个控制器返回的是一个redirect时，原来的request会终止，并且会开启一个新的HTTP请求。原来request中所有的model数据都会清空。新的request不会有任何的model数据。</p><p><img src="http://hoxis-github-io.qiniudn.com/160428-spring-in-action-7.1.png" alt="Model属性会作为request的属性但是不能再redirect中传递"></p><p>明显的，现在不能再redirect时使用model来传递数据了。但是还有其他方法用来从重定向的方法中获取数据：</p><ul><li>将数据转换为路径参数或者查询参数</li><li>在flash属性中发送数据<br>首先来看一下Spring如何在路径参数或者查询参数中传递数据。</li></ul><h2 id="使用URL模版重定向"><a href="#使用URL模版重定向" class="headerlink" title="使用URL模版重定向"></a>使用URL模版重定向</h2><p>将数据转化为路径参数和查询参数看起来比较简单。在之前的代码里，新建的Spitter的username就是作为路径参数进行传递的。但是这里的username是转换为String进行传递的。使用String传递URL和SQL时是比较危险的事情。</p><p>除了使用重定向链接，Spring提供了使用模版来定义重定向链接。例如下面的代码：<br><code>return &quot;redirect:/spitter/{username}&quot;;</code></p><p>你所需做的就是设置model中的相关值。因此，processRegistration()方法需要接收model作为入参，并将username设置其中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(Spitter spitter, Model model)</span> </span>&#123;</span><br><span class="line">    spitterRepository.save(spitter);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, spitter.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/spitter/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于这里使用了占位符而不是直接使用重定向String进行连接，就可以将username中的不安全字符隐藏起来。这样就比让用户直接输入username并将其添加到路径后面要更加安全。</p><p>另外，model中其他的原始值也会作为查询参数添加到重定向URL中。例如，除了username，model同时也包括新建的Spitter对象的id属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(Spitter spitter, Model model)</span> </span>&#123;</span><br><span class="line">    spitterRepository.save(spitter);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, spitter.getUsername());</span><br><span class="line">    model.addAttribute(<span class="string">"spitterId"</span>, spitter.getId());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/spitter/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回的重定向String并没有什么变化，但是由于model中的spitterId属性并没有映射到URL中的占位符，它会自动作为查询参数。</p><p>如果<code>username</code>是habuma，<code>spitterId</code>是42，那么返回的重定向路径将是<code>/spitter/habuma?spitterId=42</code>。</p><p>使用路径参数和查询参数传递数据比较简单，但是它也有局限性。它只适用于传递简单值，比如String和数字，不能传递比较复杂的东西，那么我们就需要flash属性来帮忙。</p><h2 id="使用flash属性"><a href="#使用flash属性" class="headerlink" title="使用flash属性"></a>使用flash属性</h2><p>比如说你不再是想在重定向中传送一个username或者ID，而是传送一个真正的Spitter对象。如果只传送了一个ID，那么处理重定向的方法不得不去数据库中查找该对象。但是在重定向之前你已经有有一个Spitter对象了，为什么不将它传送给重定向处理方法呢？</p><p>Spitter对象不像String或者int那么简单，因此不能作为路径参数或者查询参数进行传送。但是，它可以作为model的一个属性。</p><p>但是在上面的讨论中，model属性最终都会拷贝到request中，并随着redirect的触发而消失。因此，你需要将Spitter对象放在一个会随着redirect存活的地方。</p><p>其中一个方法是将其放在session中，session是可以长期存活的，可以跨越多个request。因此，你可以将Spitter对象在redirect之前放在session中，并在redirect之后取出。当然你还要在取出之后将其从session中清理。</p><p>事实证明，Spring允许将数据存放在session中，从而在redirect时传递数据。但是Spring认为你不应该负责管理这些数据。相反，Spring提供了将数据作为<code>flash</code>属性进行传送的功能。<code>Flash</code>属性，即在到下一个request之前一直携带数据，然后它们就走了。</p><p>Spring提供了通过<code>RedirectAttributes</code>来设置<code>flash</code>属性，<code>RedirectAttributes</code>作为<code>Model</code>的子接口，新增了一些方法用来设置<code>flash</code>属性。</p><p>特别的，<code>RedirectAttributes</code>提供了<code>addFlashAttribute()</code>方法用来添加<code>flash</code>属性。那么就可以利用它来重写processRegistration()方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(Spitter spitter, RedirectAttributes model)</span> </span>&#123;</span><br><span class="line">    spitterRepository.save(spitter);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, spitter.getUsername());</span><br><span class="line">    model.addFlashAttribute(<span class="string">"spitter"</span>, spitter);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/spitter/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里，可以调用addFlashAttribute()方法将Spitter对象作为一个值添加到flash属性中。另外，你也可以不填对应的key值：<br><code>model.addFlashAttribute(spitter);</code><br>由于你传递了一个Spitter对象，因此key会自动生成为<code>spitter</code>。</p><p>在重定向之前，所有的flash属性都会拷贝到session中，在重定向之后，存储在session中的flash属性会从session中移出到model中。然后处理重定向请求的方法就可以使用Spitter对象了，如下图所示：</p><p><img src="http://hoxis-github-io.qiniudn.com/160428-spring-in-action-7.2.png" alt="flash属性都会拷贝到session中，然后转存到model中"></p><p>下面对showSpitterProfile()进行一点点更，在从数据库查找之前对Spitter进行检查：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;username&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showSpitterProfile</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username, Model model) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!model.containsAttribute(<span class="string">"spitter"</span>)) &#123;</span><br><span class="line">Spitter spitter = spitterRepository.findByUsername(username);</span><br><span class="line">model.addAttribute(spitter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"profile"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正如你所见，该方法的第一件事是检查model中是否含有spitter的属性，如果有就啥也不做了。Spitter对象会被直接传送到视图中进行解析。如果没有再去数据库里查。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>每当使用Spring时，好像总有更多：更多的特性、更多的选择以及更多的途径可以达到目标，Spring MVC有很多花样繁多的功能。</p><p>Spring MVC的配置就是一个你需要进行选择的地方。本章中，我们从如何配置Spring MVC的<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>说起。你可以看到如何进行<code>DispatcherServlet</code>注册以及其他的servlet和filter的注册。另外，如果将应用部署在比较旧的容器上，我们还可以使用<code>web.xml</code>进行配置。</p><p>接着，我们看了如何处理Spring MVC控制器抛出的异常。尽管<code>@RequestMapping</code>方法可以处理异常，如果你将异常处理部分抽取出来那么你的代码就会比较清爽。</p><p>为了完成通用的任务，比如异常处理，会在整个应用中使用，Spring3.2开始提供了<code>@ControllerAdvice</code>来创建增强型控制器，从而可以在一个地方完成通用的异常处理。</p><p>最后，我们研究了如何在重定向时传递数据，那就是使用Spring的<code>flash</code>属性。</p><p>至此，也许你会觉得，不过如此嘛！但是我们讨论的仅仅是Spring MVC功能的一小部分。在16章中我们还会讨论其他功能，比如如何利用它来创建REST API。</p><p>下面的章节，我们先放一放Spring MVC，来看一下Spring Web Flow，这是一个流框架，是Spring MVC的扩展，它能够在Spring中实现面向会话的Web开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备用的Spring MVC配置项&lt;/li&gt;
&lt;li&gt;处理文件上传&lt;/li&gt;
&lt;li&gt;控制器中的异常处理&lt;/li&gt;
&lt;li&gt;使用flash属性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring实战》学习笔记-第一章：Spring之旅</title>
    <link href="https://hoxis.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9ASpring%E4%B9%8B%E6%97%85.html"/>
    <id>https://hoxis.github.io/《Spring实战》学习笔记-第一章：Spring之旅.html</id>
    <published>2019-04-08T13:46:26.518Z</published>
    <updated>2019-04-08T13:46:26.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简洁的Spring"><a href="#简洁的Spring" class="headerlink" title="简洁的Spring"></a>简洁的Spring</h1><p>为了降低Java开发的复杂性，Spring采取了以下4种关键策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程；</li><li>通过依赖注入和面向接口实现松耦合；</li><li>基于切面和惯例进行声明式编程；</li><li>通过切面和模板减少样板式代码。</li></ul><a id="more"></a><h2 id="激发POJO的潜能"><a href="#激发POJO的潜能" class="headerlink" title="激发POJO的潜能"></a>激发POJO的潜能</h2><p>相对于EJB的臃肿，Spring尽量避免因自身的api而弄乱用户的应用代码，Spring不会强迫用户实现Spring规范的接口或继承Spring规范的类，相反，在基于Spring构建的应用中，它的类通常没有任何痕迹表明你使用了Spring。最坏的场景是，一个类或许会使用Spring注解，但它依旧是POJO。</p><p>Spring赋予POJO魔力的方式之一就是通过<code>依赖注入</code>来装载它们。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>任何一个有意义的应用一般都需要多个组件，这些组件之间必定需要进行相互协作才能完成特定的业务，从而导致组件之间的紧耦合，<strong>牵一发而动全身</strong>。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DamselRescuingKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RescueDamselQuest quest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DamselRescuingKnight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quest = <span class="keyword">new</span> RescueDamselQuest();<span class="comment">// 与RescueDamselQuest紧耦合</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarhOnQuest</span><span class="params">()</span> <span class="keyword">throws</span> QuestException </span>&#123;</span><br><span class="line">        quest.embark();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你所见，DamselRescuingKnight 在它的构造函数中自行创建了RescueDamselQuest，这使得DamselRescuingKnight和RescueDamselQuest紧密地耦合到了一起，因此极大地限制了这个骑士的执行能力。如果一个少女需要救援，这个骑士能够召之即来。但是如果一条恶龙需要杀掉，那么这个骑士只能爱莫能助了。</p><p>另一方面，可以通过<code>依赖注入</code>的方式来完成对象之间的依赖关系，对象不再需要自行管理它们的依赖关系，而是通过依赖注入自动地注入到对象中去。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Quest quest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest quest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quest = quest;<span class="comment">// quest被注入到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarhOnQuest</span><span class="params">()</span> <span class="keyword">throws</span> QuestException </span>&#123;</span><br><span class="line">        quest.embark();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于之前的DamselRescuingKnight，BraveKnight没有自行创建探险任务，而是在构造器中把探险任务作为参数注入，这也是依赖注入的一种方式，即<strong>构造器注入</strong>。</p><p>更为重要的是，BraveKnight中注入的探险类型是Quest，Quest只是一个探险任务所必须实现的接口。因此，BraveKnight能够响RescueDamselQuest、SlayDraonQuest等任意一种Quest实现，这正是<strong>多态</strong>的体现。</p><p>这里的要点是BraveKnight没有与任何特定的Quest实现发生耦合。对它来说，被要求挑战的探险任务只要实现了Quest接口，那么具体是哪一类型的探险就无关紧要了。这就是依赖注入最大的好处–<strong>松耦合</strong>。如果一个对象只通过<strong>接口</strong>（而不是具体实现或初始化的过程）来表明依赖关系，那么这种依赖就能够在对象本身毫不知情的情况下，用不同的具体实现进行替换。</p><h3 id="注入一个Quest到Knight"><a href="#注入一个Quest到Knight" class="headerlink" title="注入一个Quest到Knight"></a>注入一个Quest到Knight</h3><p>创建应用组件之间协作关系的行为称为<strong>装配</strong>，Spring有多种装配Bean的方式，其中最常用的就是通过XML配置文件的方式装配。<br>示例代码：使用Spring将SlayDragonQuest注入到BraveKnight中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"knight"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.knights.BraveKnight"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"quest"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"quest"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.knights.SlayDragonQuest"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Spring是如何注入的？"><a href="#Spring是如何注入的？" class="headerlink" title="Spring是如何注入的？"></a>Spring是如何注入的？</h3><p>Spring通过应用上下文（<code>ApplicationContext</code>）来装载Bean，<code>ApplicationContext</code>全权负责对象的创建和组装。</p><p>Spring自带了多种ApplicationContext来加载配置，比如，Spring可以使用<code>ClassPathXmlApplicationContext</code>来装载XML文件中的Bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnightMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"knights.xml"</span>);<span class="comment">// 加载Spring上下文</span></span><br><span class="line">        Knight knight = (Knight) context.getBean(<span class="string">"knight"</span>);<span class="comment">// 获取knight Bean</span></span><br><span class="line">        knight.embarhOnQuest();<span class="comment">// 使用knight</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例代码中，Spring上下文加载了<code>knights.xml</code>文件，随后获取了一个ID为knight的Bean的实例，得到该对象实例后，就可以进行正常的使用了。需要注意的是，这个类中完全不知道是由哪个Knight来执行何种Quest任务，只有<code>knights.xml</code>文件知道。</p><h2 id="应用切面"><a href="#应用切面" class="headerlink" title="应用切面"></a>应用切面</h2><p>通常情况下，系统由许多不同组件组成，其中的每一个组件分别负责一块特定功能。除了实现自身核心的功能之外，这些组件还经常承担着额外的职责，诸如日志、事务管理和安全等，此类的系统服务经常融入到有自身核心业务逻辑的组件中去，这些系统服务通常被称为<strong>横切关注点</strong>，因为它们总是跨越系统的多个组件，如下图所示。</p><p><img src="http://hoxis-github-io.qiniudn.com/160104-spring-in-action-1.2.png" alt="对遍布系统的横切关注点的调用散布在各个组件里，而这些关注点并不是组件的核心业务"></p><p>AOP可以使得这些服务模块化，并以声明的方式将它们应用到相应的组件中去，这样，这些组件就具有更高内聚性以及更加关注自身业务，完全不需要了解可能涉及的系统服务的复杂性。总之，AOP确保POJO保持简单。</p><p><img src="http://hoxis-github-io.qiniudn.com/160104-spring-in-action-1.3.png" alt="利用AOP，可以将横切关注点覆盖在所需的组件之上，而这些组件不再需要额外的关注这些非核心业务。"></p><p>如图所示，我们可以把切面想象为覆盖在很多组件之上的一个<strong>外壳</strong>。利用AOP，你可以使用各种功能层去包裹核心业务层。这些层以<strong>声明的方式</strong>灵活应用到你的系统中，甚至你的核心应用根本不知道它们的存在。</p><h3 id="AOP应用"><a href="#AOP应用" class="headerlink" title="AOP应用"></a>AOP应用</h3><p>接上面骑士的故事，现在需要一个诗人来歌颂骑士的勇敢事迹，代码如下「Minstrel是中世纪的音乐记录器」：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minstrel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singBeforeQuest</span><span class="params">()</span> </span>&#123; <span class="comment">// 探险之前调用</span></span><br><span class="line">        System.out.println(<span class="string">"Fa la la; The knight is so brave!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singAfterQuest</span><span class="params">()</span> </span>&#123; <span class="comment">// 探险之后调用</span></span><br><span class="line">        System.out.println(<span class="string">"Tee hee he; The brave knight did embark on a quest!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码中所示，诗人会在骑士每次执行探险前和结束时被调用，完成骑士事迹的歌颂。骑士必须调用诗人的方法完成歌颂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveKnight</span> <span class="keyword">implements</span> <span class="title">Knight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Quest quest;</span><br><span class="line">    <span class="keyword">private</span> Minstrel minstrel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest quest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quest = quest;<span class="comment">// quest被注入到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BraveKnight</span><span class="params">(Quest quest, Minstrel minstrel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quest = quest;<span class="comment">// quest被注入到对象中</span></span><br><span class="line">        <span class="keyword">this</span>.minstrel = minstrel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">embarhOnQuest</span><span class="params">()</span> <span class="keyword">throws</span> QuestException </span>&#123;</span><br><span class="line">        minstrel.singAfterQuest();</span><br><span class="line">        quest.embark();</span><br><span class="line">        minstrel.singAfterQuest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，感觉是骑士在路边抓了一个诗人为自己「歌功颂德」，而不是诗人主动地为其传扬事迹。简单的BraveKnight类开始变得复杂，如果骑士不需要诗人，那么代码将会更加复杂。</p><p>但是有了AOP，骑士就不再需要自己调用诗人的方法为自己服务了，这就需要把Minstrel声明为一个切面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"knight"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.knights.BraveKnight"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"quest"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"quest"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.knights.SlayDragonQuest"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明诗人Minstrel，待切入的对象（刀） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"minstrel"</span> <span class="attr">class</span>=<span class="string">"com.springinaction.knights.Minstrel"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"minstrel"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义切面，即定义从哪里切入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *.embarkOnQuest(..))"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"embark"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明前置通知，在切入点之前执行的方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"singBeforeQuest"</span> <span class="attr">pointcut-ref</span>=<span class="string">"embark"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 声明后置通知，在切入点之后执行的方法  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"singAfterQuest"</span> <span class="attr">pointcut-ref</span>=<span class="string">"embark"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过运行结果可以发现，在没有改动BraveKnight的代码的情况下，就完成了Minstrel对其的歌颂，而且BraveKnight并不知道Minstrel的存在。</p><h2 id="使用Spring模版"><a href="#使用Spring模版" class="headerlink" title="使用Spring模版"></a>使用Spring模版</h2><p>使用Spring模版可以消除很多样板式代码，比如JDBC、JMS、JNDI、REST等。</p><h1 id="容纳Bean"><a href="#容纳Bean" class="headerlink" title="容纳Bean"></a>容纳Bean</h1><p>在Spring中，应用对象生存于Spring容器中，如图所示，Spring容器可以创建、装载、配置这些Bean，并且可以管理它们的生命周期。</p><p><img src="http://hoxis-github-io.qiniudn.com/160104-spring-in-action-1.4.png" alt="在Spring中，对象由Spring容器创建、装配、管理"></p><h2 id="Spring的容器实现"><a href="#Spring的容器实现" class="headerlink" title="Spring的容器实现"></a>Spring的容器实现</h2><ul><li>Bean工厂（<code>org.springframework.beans.factory.BeanFactory</code>）：最简单的容器，提供基本的DI支持；</li><li>应用上下文（<code>org.springframework.context.ApplicationContext</code>）：基于BeanFactory之上构建，提供面向应用的服务。</li></ul><h2 id="常用的几种应用上下文"><a href="#常用的几种应用上下文" class="headerlink" title="常用的几种应用上下文"></a>常用的几种应用上下文</h2><ul><li>ClassPathXmlApplicationContext：从类路径中的XML配置文件加载上下文，会在所有的类路径（包括jar文件）下查找；</li><li>FileSystemXmlApplicationContext：从文件系统中读取XML配置文件并加载上下文，在指定的文件系统路径下查找；</li><li>XmlWebApplicationContext：读取Web应用下的XML配置文件并加载上下文；</li></ul><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p><img src="http://hoxis-github-io.qiniudn.com/160104-spring-in-action-1.5.png" alt="Spring中Bean的生命周期"></p><ol><li>Spring对Bean进行实例化；</li><li>Spring将值和Bean的引用注入进Bean对应的属性中；</li><li>如果Bean实现了<code>BeanNameAware</code>接口，Spring将Bean的ID传递给<code>setBeanName()</code>接口方法；</li><li>如果Bean实现了<code>BeanFactoryAware</code>接口，Spring将调<code>setBeanFactory()</code>接口方法，将BeanFactory容器实例传入；</li><li>如果Bean实现了<code>ApplicationContextAware</code>接口，Spring将调用<code>setApplicationContext()</code>接口方法，将应用上下文的引用传入；</li><li>如果Bean实现了<code>BeanPostProcessor</code>接口，Spring将调用<code>postProcessBeforeInitialization()</code>接口方法；</li><li>如果Bean实现了<code>InitializationBean</code>接口，Spring将调用<code>afterPropertiesSet()</code>方法。类似的如果Bean使用了<code>init-method</code>声明了初始化方法，该方法也会被调用；</li><li>如果Bean实现了<code>BeanPostProcessor</code>接口，Spring将调用<code>ProcessAfterInitialization()</code>方法；</li><li>此时此刻，Bean已经准备就绪，可以被应用程序使用了，它们将一直<code>驻留在应用上下文中</code>，直到该应用上下文被销毁；</li><li>如果Bean实现了<code>DisposableBean</code>接口，Spring将调用<code>destory()</code>方法，同样的，如果Bean中使用了<code>destroy-method</code>声明了销毁方法，也会调用该方法；</li></ol><h1 id="纵观Spring"><a href="#纵观Spring" class="headerlink" title="纵观Spring"></a>纵观Spring</h1><h2 id="Spring模块"><a href="#Spring模块" class="headerlink" title="Spring模块"></a>Spring模块</h2><p><img src="http://hoxis-github-io.qiniudn.com/160104-spring-in-action-1.7.png" alt="Spring中的6个重要模块"></p><h3 id="核心Spring容器"><a href="#核心Spring容器" class="headerlink" title="核心Spring容器"></a>核心Spring容器</h3><p><strong>容器</strong>是Spring框架最核心的部分，它负责Spring应用中Bean的创建、配置和管理。Spring模块都构建与核心容器之上，当配置应用时，其实都隐式地使用了相关的核心容器类。另外，该模块还提供了许多企业级服务，如邮件、JNDI访问、EJB集成和调度等。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP是Spring应用系统开发切面的基础，与依赖注入一样，可以帮助应用对象<code>解耦</code>。借助于AOP，可以将遍布于应用的关注点（如事务和安全等）从所应用的对象中解耦出来。</p><h3 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h3><p>Spring的JDBC和DAO模块封装了大量的样板代码，这样可以使得在数据库代码变得简洁，也可以更专注于我们的业务，还可以避免数据库资源释放失败而引发的问题。另外，Spring AOP为数据访问提供了事务管理服务。同时，Spring还与流程的ORM（Object-Relational Mapping）进行了集成，如Hibernate、MyBatis等。</p><h3 id="Web和远程调用"><a href="#Web和远程调用" class="headerlink" title="Web和远程调用"></a>Web和远程调用</h3><p>Spring提供了两种Web层框架：面向传统Web应用的基于Servlet的框架和面向使用Java Portlet API的基于Portlet的应用。Spring远程调用服务集成了RMI、Hessian、Burlap、JAX-WS等。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Spring提供了测试模块来测试Spring应用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简洁的Spring&quot;&gt;&lt;a href=&quot;#简洁的Spring&quot; class=&quot;headerlink&quot; title=&quot;简洁的Spring&quot;&gt;&lt;/a&gt;简洁的Spring&lt;/h1&gt;&lt;p&gt;为了降低Java开发的复杂性，Spring采取了以下4种关键策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于POJO的轻量级和最小侵入性编程；&lt;/li&gt;
&lt;li&gt;通过依赖注入和面向接口实现松耦合；&lt;/li&gt;
&lt;li&gt;基于切面和惯例进行声明式编程；&lt;/li&gt;
&lt;li&gt;通过切面和模板减少样板式代码。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://hoxis.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>tomcat项目中class文件替换无效引发的思考</title>
    <link href="https://hoxis.github.io/tomcat%E9%A1%B9%E7%9B%AE%E4%B8%ADclass%E6%96%87%E4%BB%B6%E6%9B%BF%E6%8D%A2%E6%97%A0%E6%95%88%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>https://hoxis.github.io/tomcat项目中class文件替换无效引发的思考.html</id>
    <published>2019-04-08T13:46:26.515Z</published>
    <updated>2019-04-08T13:46:26.515Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目部署需要修改补丁文件时，我发现了一个特别古怪的问题：</p><p><strong>替换掉原先的class文件无效，重启服务器也无效！</strong></p><a id="more"></a><p>一般来说，我们更新网站，就是把更新后的文件，如jsp、class文件，替换掉原先的class文件即可。服务器如Tomcat，会自动为我们完成热部署。如果内存有溢出的话，重启一下服务器就OK了。可是今天，我却发现，替换之后的class文件，无论如何也不生效。</p><p>想了很多种可能：Tomcat里面配置自动解析WAR包的配置会不会有影响（项目非war包）？Tomcat里面web.xml相关模式是否有影响？……</p><p>弄了半天，修改后的class文件仍然无法起作用。</p><p>被修改的类文件，并不同普通的类文件，而是一个接口里面的<strong>静态常量</strong>。而在Java中，对常量和变量的处理是不一样的。<strong>常量是在编译期就已经确定的。也就是说：项目在经javac编译成class文件后，常量在应用中不是以常量名的形式存在的，而是以常量值的形式存在。</strong></p><p>举个简单的例子：</p><p>我在修改之前的常量是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BACKUP_STATE_7 = <span class="string">"Failure recovery"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改之后是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BACKUP_STATE_7 = <span class="string">"Failure recovery File normal"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在程序中，我们这样使用常量：Properties.BACKUP_STATE_7</p><p>可是，在java中编译之后，使用该常量的地方都变成了：Failure recovery</p><p>所以，我只是替换我更改后的常量类，项目中使用常量的地方，并没有改变，仍然是Failure recovery</p><p>我们都知道，java是在运行期对类进行装载的，所以，它总是会访问到最新版本的类。但是，对于常量域的引用，会在编译期被转化为它表示的值。所以，也就出现了今天的问题。</p><p>所以说，静态常量，我们使用时一定要慎重。<strong>一旦有修改就需要将整个项目重新编译替换</strong>。</p><p>那么，我又有问题了：如果我现在将上面的常量设置为null，只替换这个文件会怎么样呢？</p><p>也即是如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BACKUP_STATE_7 = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换后，也会出现上面的情况吗？</p><p>答案应该是替换后的null（未经尝试，大家可以自己试一下）。原因也跟Java的设计者有关系。</p><p>参考：<a href="http://blog.csdn.net/liu765023051/article/details/43156631" target="_blank" rel="noopener">http://blog.csdn.net/liu765023051/article/details/43156631</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目部署需要修改补丁文件时，我发现了一个特别古怪的问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;替换掉原先的class文件无效，重启服务器也无效！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="绊脚石" scheme="https://hoxis.github.io/categories/%E7%BB%8A%E8%84%9A%E7%9F%B3/"/>
    
    
      <category term="错误处理" scheme="https://hoxis.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vsftp为不同用户设置不同的ftp的根目录</title>
    <link href="https://hoxis.github.io/vsftp%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%9A%84ftp%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95.html"/>
    <id>https://hoxis.github.io/vsftp为不同用户设置不同的ftp的根目录.html</id>
    <published>2019-04-08T13:46:26.515Z</published>
    <updated>2019-04-08T13:46:26.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要求ftp登录后的根目录是/var/test/，但是又不能影响其他用户的登录路径，因为有些程序是直接在根目录进行操作的，而没有目录切换的过程。</p><a id="more"></a><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd test1</span><br><span class="line">useradd test2</span><br><span class="line">passwd test1</span><br><span class="line">passwd test2</span><br></pre></td></tr></table></figure><h4 id="vsftpd配置"><a href="#vsftpd配置" class="headerlink" title="vsftpd配置"></a>vsftpd配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户登录路径，local_root 针对系统用户</span></span><br><span class="line">local_root=/var/ftp/</span><br><span class="line"><span class="comment"># 锁定用户到各自目录为其根目录</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="comment"># anon_root 针对匿名用户</span></span><br><span class="line">anon_root=/var/www/html</span><br><span class="line"></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="comment"># 用户配置目录</span></span><br><span class="line">user_config_dir=/etc/vsftpd/userconfig</span><br></pre></td></tr></table></figure><h5 id="配置各自用户访问根目录"><a href="#配置各自用户访问根目录" class="headerlink" title="配置各自用户访问根目录"></a>配置各自用户访问根目录</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line">mkdir userconfig</span><br><span class="line"><span class="built_in">cd</span> userconfig/</span><br></pre></td></tr></table></figure><p>在userconfig目录下为不同用户配置不同的根目录：<br><code>vim test1</code>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/var/ftp/test1/</span><br></pre></td></tr></table></figure></p><p><code>vim test2</code>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/var/ftp/test2/</span><br></pre></td></tr></table></figure></p><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>新建<code>/var/ftp/test1/</code>、<code>/var/ftp/test2/</code>目录，并在目录下新增一些测试文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/pub/</span><br><span class="line">mkdir test1</span><br><span class="line">mkdir test2</span><br><span class="line"><span class="built_in">cd</span> test1</span><br><span class="line">touch a</span><br><span class="line">touch aa</span><br><span class="line"><span class="built_in">cd</span> ../test2/</span><br><span class="line">touch b</span><br><span class="line">touch bb</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">chown -R test1:test1 test1</span><br><span class="line">chown -R test2:test2 test2</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://www.github.com/hoxis/token4md/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1506068281129.jpg" alt="修改结果"></p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>默认情况下，ftp登录后是以用户的home目录作为根目录的，因此只要修改用户的主目录即可。</p><p><code>vi /etc/passwd</code></p><p>找到要修改的用户那几行，修改掉即可。此法很暴力，建议慎用。</p><p>/etc/passwd文件格式<br>登录名：加密口令：数字用户ID:数字组ID:注释字段：起始目录：sh程序 </p><p>参考：<br><a href="http://blog.sina.com.cn/s/blog_a97c78020101o8fv.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_a97c78020101o8fv.html</a><br><a href="http://xiaomaimai.blog.51cto.com/1182965/274002" target="_blank" rel="noopener">http://xiaomaimai.blog.51cto.com/1182965/274002</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;要求ftp登录后的根目录是/var/test/，但是又不能影响其他用户的登录路径，因为有些程序是直接在根目录进行操作的，而没有目录切换的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://hoxis.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="Linux" scheme="https://hoxis.github.io/tags/Linux/"/>
    
      <category term="ftp" scheme="https://hoxis.github.io/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>vim 实用指令</title>
    <link href="https://hoxis.github.io/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://hoxis.github.io/VIM常用命令.html</id>
    <published>2019-04-08T13:46:26.464Z</published>
    <updated>2019-04-08T13:46:26.465Z</updated>
    
    <content type="html"><![CDATA[<p>vim 常用指令收集。</p><a id="more"></a><h1 id="vim-列编辑"><a href="#vim-列编辑" class="headerlink" title="vim 列编辑"></a>vim 列编辑</h1><h2 id="插入字符（可以实现快速多行注释、多行缩进）"><a href="#插入字符（可以实现快速多行注释、多行缩进）" class="headerlink" title="插入字符（可以实现快速多行注释、多行缩进）"></a>插入字符（可以实现快速多行注释、多行缩进）</h2><ol><li>将光标移动到要操作的位置；</li><li><code>ctrl-v</code> 进入可视块模式；</li><li>使用j或者k进行光标上下移动，选取待操作的行；</li><li><code>shift-i</code> 进入插入模式，输入要插入的内容；</li><li><code>esc</code>按两次，退出插入模式即可；</li><li>最终会在选中的每行出现插入的内容；</li></ol><p><img src="https://www.github.com/hoxis/token4md/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/test.gif" alt="vim 列编辑"></p><h2 id="删除列字符"><a href="#删除列字符" class="headerlink" title="删除列字符"></a>删除列字符</h2><ol><li>光标定位到要操作的地方；</li><li><code>CTRL+v</code>进入<code>可视块</code>模式，选取这一列操作多少行；</li><li><code>d</code>删除。</li></ol><h1 id="vim单词间移动"><a href="#vim单词间移动" class="headerlink" title="vim单词间移动"></a>vim单词间移动</h1><ul><li><code>w</code> - 跳到下一个单词的开头</li><li><code>e</code> - 跳到这个单词的末尾</li><li><code>%</code> - 跳到对应的<code>()</code>,<code>{}</code>,<code>[]</code>处 </li><li><code>*</code>(<code>#</code>) - 跳到当前光标的下一个(上一个) 相同单词的地方 <blockquote><p>如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成。如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。</p></blockquote></li><li><code>w</code> - 向后移动一个单词，将符号或标点当作单词处理</li><li><code>W</code> - 向后移动一个单词，不把符号或标点当作单词处理</li><li><code>b</code> - 向前移动一个单词，把符号或标点当作单词处理</li><li><code>B</code> - 向前移动一个单词，不把符号或标点当作单词处理</li></ul><p><img src="https://www.github.com/hoxis/token4md/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1513058148082.jpg" alt="单词间移动"></p><h1 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h1><ul><li><code>0</code> - 到行头</li><li><code>^</code> - 到本行的第一个非blank字符</li><li><code>$</code> - 到行尾</li><li><code>g_</code> - 到本行最后一个不是blank字符的位置。</li><li><code>fa</code> - 到下一个为a的字符处，你也可以fs到下一个为s的字符。</li><li><code>t,</code> - 到逗号前的第一个字符。逗号可以变成其它字符。</li><li><code>3fa</code> - 在当前行查找第三个出现的a。<blockquote><p><code>F</code>和<code>T</code>和<code>f</code>和<code>t</code>一样，只不过是相反方向。</p></blockquote></li><li><code>行号+G</code> - 跳转到指定行</li><li><code>n+</code> - 光标下移n行</li><li><code>n-</code> - 光标上移n行 </li><li><code>Ctrl+g</code> - 查询当前行信息和当前文件信息</li></ul><h1 id="删除相关"><a href="#删除相关" class="headerlink" title="删除相关"></a>删除相关</h1><ul><li><code>dt&quot;</code> - 删除所有的内容，直到遇到双引号<code>&quot;</code>，双引号可以变成其它字符。</li><li><code>dd</code> - 删除一行</li><li><code>dw</code> - 删除一个单词/光标之后的单词剩余部分</li><li><code>ndw</code> - 删除以当前字符开始的n个字</li><li><code>x</code> - 删除当前字符</li><li><code>d$</code> - 删除至行尾，光标之后的该行部分</li><li><code>d0</code> - 删除至行首</li><li><code>ndd</code> - 删除以当前行开始的n行</li></ul><h1 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h1><ul><li><code>i</code> - 从<strong>光标前</strong>开始插入</li><li><code>I</code> - 从<strong>行首</strong>开始插入</li><li><code>a</code> - 从<strong>光标后</strong>开始插入</li><li><code>A</code> - 从<strong>行尾</strong>开始插入</li><li><code>o</code> - 在<strong>当前行之下</strong>另起一行，开始插入字符</li><li><code>O</code> - 在<strong>当前行之上</strong>另起一行，开始插入字符</li><li><code>s</code> - 删除当前字符，然后进入插入模式</li><li><code>S</code> - 清空当前行，然后进入插入模式 (同cc)</li></ul><h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><ul><li><code>:%s/abc/123</code> - 替换每一行的第一个abc为123</li><li><code>:%s/abc/123/g</code> - 替换每一行的所有abc为123</li><li><code>:s/abc/123/g</code> - 替换当前行的第一个abc为123</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="重复上一次动作"><a href="#重复上一次动作" class="headerlink" title="重复上一次动作"></a>重复上一次动作</h2><ul><li><code>.</code> - 重复上次改变<h2 id="vim-粘贴时取消自动缩进"><a href="#vim-粘贴时取消自动缩进" class="headerlink" title="vim 粘贴时取消自动缩进"></a>vim 粘贴时取消自动缩进</h2></li></ul><ol><li><p>在vim里，粘贴代码之前最好进入粘贴模式，这样就会关闭自动缩进</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> paste</span><br></pre></td></tr></table></figure></li><li><p>将代码粘贴进去之后再关闭粘贴模式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nopaste</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      vim 常用命令
    
    </summary>
    
      <category term="Linux" scheme="https://hoxis.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://hoxis.github.io/tags/Linux/"/>
    
      <category term="vim" scheme="https://hoxis.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis+Spring+Maven的简单整合Demo</title>
    <link href="https://hoxis.github.io/MyBatis+Spring+Maven%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88Demo.html"/>
    <id>https://hoxis.github.io/MyBatis+Spring+Maven的简单整合Demo.html</id>
    <published>2019-04-08T13:46:26.461Z</published>
    <updated>2019-04-08T13:46:26.461Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是示范基于Maven的MyBatis+Spring的简单使用，其中主要涉及到的是MyBatis的配置使用，另外还有部分log4j的配置使用。</p><a id="more"></a><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>本文项目是基于MyEclipse、JDK1.7、MySQL进行开发的，主要功能是通过MyBatis实现对User这个Bean类进行增删改查操作。<br>先展示下整个项目的结构：<br><img src="http://hoxis-github-io.qiniudn.com/050707-project%20architecture.png" alt="此处输入图片的描述"></p><h3 id="新建web-project"><a href="#新建web-project" class="headerlink" title="新建web project"></a>新建<code>web project</code></h3><p>如图所示（<strong>勾选Maven支持</strong>）：<br><img src="http://hoxis-github-io.qiniudn.com/050707-new%20web%20project.png" alt="此处输入图片的描述"></p><p>一路next，勾选产生<code>web.xml</code><br><img src="http://hoxis-github-io.qiniudn.com/050707-new%20web%20project2.png" alt="此处输入图片的描述"></p><p>最后生成的项目<code>pom.xml</code>文件中会有很多乱七八糟的<code>&lt;dependency&gt;</code>，可以将他们删了，本小项目中暂时用不掉这些。</p><h3 id="准备数据库表"><a href="#准备数据库表" class="headerlink" title="准备数据库表"></a>准备数据库表</h3><p>使用<strong>mybatis</strong>数据库，没有就新建一个。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tb_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment <span class="keyword">comment</span> <span class="string">'主键'</span>,</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> <span class="keyword">comment</span> <span class="string">'用户名'</span>,</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'密码'</span>,</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">comment</span> <span class="string">'邮件'</span>,</span><br><span class="line">    age <span class="built_in">int</span>  <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'性别'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="相关的Java处理类"><a href="#相关的Java处理类" class="headerlink" title="相关的Java处理类"></a>相关的Java处理类</h3><ul><li><p>数据库表对应的实体类<code>User.java</code>：<br>（省略了相关的getter和setter）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String sex;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getter() and  setter () </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>UserDao.java</code>，可以对User进行插入、更新、删除、查找、列出所有等操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String userName)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countAll</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>UserService</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">. <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String userName)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countAll</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现service接口，执行dao操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.service.impl;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> UserDao userDao;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.insert(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.update(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.delete(userName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.selectAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.countAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findByUserName(userName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><ul><li><p>Mapper文件配置<code>/test/config/com/liuhao/dao/UserDao.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.liuhao.dao.UserDao"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 查询表中记录总数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countAll"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(*) c from tb_user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 查询表中的所有用户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.liuhao.entity.User"</span>&gt;</span></span><br><span class="line">    select * from tb_user order by</span><br><span class="line">    username asc</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 向数据库中插入用户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>   <span class="attr">parameterType</span>=<span class="string">"com.liuhao.entity.User"</span>&gt;</span></span><br><span class="line">    insert into</span><br><span class="line">    tb_user(username,password,email,sex,age)</span><br><span class="line">    values(#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;sex&#125;,#&#123;age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 更新库中的用户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.liuhao.entity.User"</span>&gt;</span></span><br><span class="line">    update tb_user set</span><br><span class="line">    username=#&#123;username&#125;,password=#&#123;password&#125;,email=#&#123;email&#125;,sex=#&#123;sex&#125;,age=#&#123;age&#125;</span><br><span class="line">    where username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除用户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span>    </span><br><span class="line">    delete from tb_user where username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户名查找用户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultType</span>=<span class="string">"com.liuhao.entity.User"</span>&gt;</span> </span><br><span class="line">    select * from tb_user where username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mybatis应用配置文件<code>/test/config/MyBatis-Configuration.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/liuhao/dao/UserDao.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring配置文件,本例中我们放在<code>/test/config/applicationContext.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:MyBatis-Configuration.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.liuhao.dao.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.liuhao.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>web.xml</code>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置上下文监听 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>项目是基于Maven构建的，<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis和spring相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JUnit测试框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/WebRoot<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>另外项目中使用了<code>log4j</code>进行日志采集，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#log4j.rootLogger=DEBUG,CONSOLE,A1</span><br><span class="line">#log4j.rootLogger=INFO,CONSOLE,A2</span><br><span class="line">log4j.rootLogger=DEBUG,INFO,CONSOLE,A1,A2,A3</span><br><span class="line"></span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.Threshold=DEBUG</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %c %-5p %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.A1.File=D:/logs/debug.log</span><br><span class="line">log4j.appender.A1.Threshold=INFO</span><br><span class="line">log4j.appender.A1.ImmediateFlush=true</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %-25c -&gt; %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.A2=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.A2.File=D:/logs/log.log</span><br><span class="line">log4j.appender.A2.Threshold=INFO</span><br><span class="line">log4j.appender.A2.ImmediateFlush=true</span><br><span class="line">log4j.appender.A2.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A2.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %-25c -&gt; %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.A3=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.A3.File=D:/logs/error.log</span><br><span class="line">log4j.appender.A3.Threshold=ERROR</span><br><span class="line">log4j.appender.A3.ImmediateFlush=true</span><br><span class="line">log4j.appender.A3.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A3.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %-5p %-25c -&gt; %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.springframework=DEBUG</span><br><span class="line">log4j.logger.com.ibatis=DEBUG  </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG  </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG  </span><br><span class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG  </span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG  </span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG  </span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG  </span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>如果按照上述代码进行部署，应该不会出问题。本人应为少加了MySQL的驱动，和同事搞了差不多一个上午。。。</p><ul><li>基于<code>JUnit</code>的测试代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuhao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.liuhao.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  UserService userService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">        <span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="keyword">this</span>.userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="comment">// username需要是唯一的</span></span><br><span class="line">    user.setUsername(<span class="string">"刘哈哈"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"passtest"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"liuhao2995@163.com"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    userService.insert(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestCountAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"数据库中的记录条数:"</span> + userService.countAll());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSelectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userService.selectAll();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">      User user = list.get(i);</span><br><span class="line">      System.out.println(<span class="string">"用户名:"</span> + user.getUsername() + <span class="string">"\t密码:"</span></span><br><span class="line">          + user.getPassword() + <span class="string">"\t邮箱："</span> + user.getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userService.findByUserName(<span class="string">"刘哈哈"</span>);</span><br><span class="line">    System.out.println(<span class="string">"用户名:"</span> + user.getUsername() + <span class="string">"\t密码:"</span></span><br><span class="line">        + user.getPassword() + <span class="string">"\t邮箱："</span> + user.getEmail());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"刘哈哈"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"xxxxxxxx"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"xxxxxx@163xxx"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    userService.update(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userService.delete(<span class="string">"刘哈哈"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>源码下载：<a href="http://download.csdn.net/detail/bruce_6/8876565" target="_blank" rel="noopener">http://download.csdn.net/detail/bruce_6/8876565</a><br>参考：<a href="http://www.cnblogs.com/dennisit/archive/2013/04/10/3012972.html" target="_blank" rel="noopener">http://www.cnblogs.com/dennisit/archive/2013/04/10/3012972.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是示范基于Maven的MyBatis+Spring的简单使用，其中主要涉及到的是MyBatis的配置使用，另外还有部分log4j的配置使用。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://hoxis.github.io/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="https://hoxis.github.io/tags/MyBatis/"/>
    
      <category term="Spring" scheme="https://hoxis.github.io/tags/Spring/"/>
    
      <category term="Maven" scheme="https://hoxis.github.io/tags/Maven/"/>
    
      <category term="log4j" scheme="https://hoxis.github.io/tags/log4j/"/>
    
  </entry>
  
</feed>
